/** @jsx React.DOM */

var Templates = require('./templates.js.min.js');
var Schedules = require('./schedule.js.min.js');
var Campaigns = require('./campaigns.js.min.js');
var SentMail = require('./sent_mail.js.min.js');
var FollowupFeed = require('./followup_feed.js.min.js');
var CampaignDetail = require('./campaign_detail.js.min.js');
var CreateCampaignModal = require('./create_campaign.js.min.js');

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      selectedScreen: 'Campaigns',
      selectedCampaign:'',
      prospectLists: [],
      campaigns: []
    }
  },

  deleteCampaign: function(objectId) {
    // sweetAlert
    console.log(this.state.campaigns)
    campaigns = _.filter(this.state.campaigns, function(campaign) {
      return campaign.objectId != objectId
    })
    console.log(campaigns)
    this.setState({campaigns: campaigns})
    $.ajax({
      url:'https://api.parse.com/1/classes/Campaign/'+objectId,
      type:'DELETE',
      headers:appConfig.headers,
      success: function(res) { console.log(res) },
      error: function(err) { console.log(err) }
    })
    // persist
    // error log
  },

  componentDidMount: function() {
    thiss = this;
     company = JSON.parse(localStorage.currentUser).company
     user = appConfig.pointer('_User', JSON.parse(localStorage.currentUser).objectId)
     qry = {
       where : JSON.stringify({
         user: user,
         company: company
       }),
       include: 'prospect_list,followups,followups.template,batches',
       order: '-createdAt'
     }
     $.ajax({
       url:'https://api.parse.com/1/classes/Campaign',
      headers: appConfig.headers,
      data: qry,
      success: function(res) {
        console.log(res.results)
        thiss.setState({campaigns: res.results})
        // Find All Prospects In ProspectList that are not in any batches
      },
      error: function(err) {
        console.log('error')
        console.log(err)
      }
     });
    $.ajax({
      url: 'https://api.parse.com/1/classes/ProspectList',
      data: {
        order: '-createdAt',
        where : JSON.stringify({
          user: appConfig.user,
          company: appConfig.company,
        })
      },
      headers: appConfig.headers,
      success: function(res) {
        console.log('PROSPECT LISTS')
        console.log(res.results)
        thiss.setState({prospectLists: res.results})
      },
      error: function(err) {

      }
    })


  },
  
  toggleScreen: function(screen) {
    this.setState({selectedScreen : screen})
  },

  changeSelectedCampaign: function(screen, selectedCampaign) {
    console.log(selectedCampaign)
    this.setState({
      selectedCampaign : selectedCampaign,
      selectedScreen: screen,
    })
  },

  render: function() {
    thiss = this
    console.log(this.state.selectedCampaign)
    console.log(this.state.selectedScreen)
    console.log(this.state.campaigns)
    switch (this.state.selectedScreen){
      case 'Campaigns':
        CurrentScreen = Campaigns({campaigns: thiss.state.campaigns, 
                            changeSelectedCampaign: thiss.changeSelectedCampaign, 
                            deleteCampaign: this.deleteCampaign, 
                            toggleScreen: thiss.toggleScreen})
        break;
      case 'CampaignDetail':
        CurrentScreen = CampaignDetail({
                        selectedCampaign: thiss.state.selectedCampaign, 
                      selectedCampaignObjectId: thiss.state.selectedCampaginObjectId, 
                        toggleScreen: thiss.toggleScreen})
        break;
      case 'Templates':
        CurrentScreen = Templates(null)
        break;
      case 'Overview':
        CurrentScreen = Campaigns({campaigns: thiss.state.campaigns, 
                            changeSelectedCampaign: thiss.changeSelectedCampaign, 
                            toggleScreen: thiss.toggleScreen})
        break;
      case 'Sent Mail':
        CurrentScreen = SentMail(null)
        break;
      case 'Followup Feed':
        CurrentScreen = FollowupFeed(null)
        break;
      case 'Schedules':
        CurrentScreen = Schedules(null)
        break;
    }

    return (
      React.DOM.div({className: "", style: {height:'550px'}}, 
        React.DOM.div({className: "container", style: {padding:'0',width:'100%',height:'100%'}}, 
          SideMenu({
                createCampaign: this.createCampaign, 
                prospectLists: this.state.prospectLists, 
                toggleScreen: this.toggleScreen}), 
              React.DOM.div({className: "col-md-10", 
                   style: {padding:'0',height:'100%'}}, 
            CurrentScreen
          )
        )
      )
    );
  },

  persistCampaign: function(newCampaign) {
    Campaign = {}
    Campaign.name = newCampaign.name
    Campaign.user = appConfig.pointer('_User', JSON.parse(localStorage.currentUser).objectId)
    Campaign.company = JSON.parse(localStorage.currentUser).company
    var thiss = this;

    $.ajax({
      url:'https://api.parse.com/1/classes/Campaign',
      type:'POST',
      headers:appConfig.headers,
      data:JSON.stringify(Campaign),
      success: function(res) {
        the_campaign = _.find(thiss.state.campaigns, function(campaign){
          first = campaign.name == newCampaign.name 
          second = campaign.prospect_list == newCampaign.prospect_list
          return first && second
        })
        console.log(res)
        console.log(res.objectId)

        the_campaign.objectId = res.objectId
        campaigns = _.filter(thiss.state.campaigns, function(campaign){
          first = campaign.name == newCampaign.name 
          second = campaign.prospect_list == newCampaign.prospect_list
          return !(first && second)
        })
        campaigns.push(the_campaign)
        console.log(campaigns)

        thiss.setState({campaigns:  campaigns})

        $.ajax({
          url:'https://api.parse.com/1/classes/Campaign/'+res.objectId,
          type:'PUT',
          data: JSON.stringify({prospect_list:{
            '__type':'Pointer',
            'className':'ProspectList',
            'objectId':newCampaign.prospect_list.objectId,
          }}),
          headers:appConfig.headers,
          success: function(res){
          },
          error: function() {

          }
        })
      },
      error: function(err) {
        console.log(err)
      }
    });
  },

  createCampaign: function(newCampaign) {
    campaigns = this.state.campaigns
    campaigns.push(newCampaign)
    this.setState({campaigns: campaigns})
    console.log(newCampaign)

    $('.modal').click()
    $('.modal-backdrop').click()

    this.persistCampaign(newCampaign)
  }
});

var SideMenu = React.createClass({displayName: 'SideMenu',
  toggleScreen: function(e) {
    this.props.toggleScreen($(e.target).text().trim())
  },

  /*
    <button type="button" className="sharp btn btn-default" onClick={this.toggleScreen}>
      <i className="fa fa-file-text" /> &nbsp; Templates
    </button>
    <button type="button" className="sharp btn btn-default" onClick={this.toggleScreen}>
      <i className="fa fa-clock-o" /> &nbsp; Schedules
    </button>
  */
  createCampaignModal: function() {

  },

  render: function() {
    return (
      React.DOM.div({className: "col-md-2", 
        style: {padding:'0',height:'100%', backgroundColor:'rgb(90, 107, 119)',borderBottomLeftRadius:'3px'}}, 
        React.DOM.div({className: "btn-group-vertical", style: {width:'100%'}}, 
          React.DOM.button({type: "button", 
                  className: "sharp btn btn-default", 
                  onClick: this.toggleScreen}, 
            React.DOM.span({style: {marginLeft:'27px'}}, "Overview")
          ), 
          React.DOM.button({type: "button", 
                  className: "sharp btn btn-default", 
                  onClick: this.toggleScreen}, 
            React.DOM.i({className: "fa fa-newspaper-o"}), "  ",  
            React.DOM.span({style: {marginLeft:'4px'}}, "Followup Feed")
          ), 
          React.DOM.button({type: "button", style: {display:'none'}, 
                  className: "sharp btn btn-default"}, 
            React.DOM.i({className: "fa fa-code-fork"}), "  ",  
            React.DOM.span({style: {marginLeft:'4px'}}, "Rules")
          ), 
          React.DOM.button({type: "button", style: {display:'none'}, 
                  className: "sharp btn btn-default", onClick: this.toggleScreen}, 
            React.DOM.i({className: "fa fa-pie-chart"}), "   Analytics"
          ), 
          React.DOM.button({type: "button", className: "sharp btn btn-default", 
                  onClick: this.toggleScreen}, 
            React.DOM.i({className: "fa fa-paper-plane"}), "   Sent Mail"
          ), 
          React.DOM.button({type: "button", className: "sharp btn btn-default", 
                  onClick: this.toggleScreen}, 
            React.DOM.i({className: "fa fa-wrench"}), "   Settings"
          )
        ), 

        React.DOM.div({className: "", style: {width:'100%',textAlign:'center',marginTop:100}}, 
          React.DOM.a({href: "javascript:", className: "btn btn-primary new-list-btn", 
                'data-toggle': "modal", 'data-target': ".bs-createCampaign-modal-sm", 
                style: { backgroundImage: 'linear-gradient(180deg, #0096ff 0%, #005dff 100%)'}}, 
            React.DOM.i({className: "fa fa-plus-circle"}), "  New Campaign"
          )
        ), 
        CreateCampaignModal({prospectLists: this.props.prospectLists, 
                             createCampaign: this.createCampaign})
      )
    );
  },

  createCampaign: function(newCampaign) {
    this.props.createCampaign(newCampaign)
  }
});
