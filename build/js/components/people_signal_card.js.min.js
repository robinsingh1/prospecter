(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */


module.exports = React.createClass({displayName: 'exports',
  // SignalCard
  prospectPerson: function() {
    // Add To Signal List
    // Add Company
    // Add Prospect
    person = this.props.person
    personId = person.objectId
    company = this.props.person.company
    companyId = company.objectId
    person.signalId = person.signalId
    company.signalId = company.objectId
    p = person; c = company;
    delete p.objectId; delete c.objectId;
    delete p.className; delete c.className;
    delete p.__type; delete c.__type;
    delete p.createdAt; delete c.createdAt;
    delete p.updatedAt; delete c.updatedAt;
    p.companySignal = p.company
    delete p.company

    p.linkedin_url = p.url
    p.company = JSON.parse(localStorage.currentUser).company
    p.archived = true
    p.loading = true
    p.city = p.title.split('-')[0]
    p.pos = p.title.split('-').slice(-1)[0].split(' at ')[0]
    p.company_name = p.title.split('-').slice(-1)[0].split(' at ').slice(-1)[0] 
    name = p.link_text.split('|')[0]
    name = name.split('-')[0]
    p.name = name
    p.websiteUrl = company.websiteUrl
    // Automatically Add To The Signal List It Belongs To
    
    console.log(this.props.profile)
    p.lists = [{'__type':'Pointer','className':'ProspectList','objectId':this.props.profile.prospect_list.objectId}] 

    $.ajax({
      url:'https://api.parse.com/1/classes/Prospects',
      type:'POST',
      headers:appConfig.headers,
      data:JSON.stringify(p),
      success: function(res) {
        console.log(res)
         $.ajax({
          url:'https://api.parse.com/1/classes/PeopleSignal/'+personId,
          type:'PUT',
          headers:appConfig.headers,
          data: JSON.stringify({prospectId: res.objectId, prospected_on: Date.now()/1000}),
          success:function(res) { console.log(res) },
          error: function() { }
         })
      },
      error: function(err) { }
    })

    //Create Company Prospect with Pointer to CompanySignal
    $.ajax({
      url:'https://api.parse.com/1/classes/CompanyProspects',
      type:'POST',
      headers:appConfig.headers,
      data:JSON.stringify(c),
      success: function(res) {
        //Update Company Signal With Pointer to Company Prospect and date prospected
        console.log(res)
         $.ajax({
           url:'https://api.parse.com/1/classes/CompanySignal/'+companyId,
          type:'PUT',
          headers:appConfig.headers,
          data: JSON.stringify({prospectId: res.objectId, prospected_on: Date.now()/1000}),
          success:function(res) { console.log(res) },
          error: function(err) { }
         })
      },
      error: function(err) { }
    })
  },

  render: function() {
    person = this.props.person
    signal = (person.signals) ? person.signals[0] : {}
    
    return (
      React.DOM.div({className: "panel panel-default signal-card"}, 
        React.DOM.div({className: "panel-body", style: {paddingLeft:25, paddingRight:25}}, 
          React.DOM.h4(null, 
            person.title
          ), 
          React.DOM.h6({style: {display:'inline-block',width:'100%'}}, 
            React.DOM.span({style: { float:'left',maxWidth: '60%', whiteSpace: 'nowrap',
                overflow: 'hidden', textOverflow: 'ellipsis'}}, 
              person.link_text)
          ), 
        React.DOM.div({id: "signal-stuff", 
            style: (_.isEqual(signal, {})) ? {display:'none'} : {display:'block'}}, 
          React.DOM.h6(null, " ", React.DOM.i({className: "fa fa-building"}), 
            "  ", signal.company), 
          React.DOM.h6(null, " ", React.DOM.i({className: "fa fa-map-marker"}), 
            "  ", signal.location), 
          React.DOM.h6(null, " ", React.DOM.i({className: "fa fa-suitcase"}), 
            " ", signal.job_title, " ")
        ), 

          React.DOM.a({href: "javascript:", className: "btn btn-success", 
            onClick: this.prospectPerson, 
            style: {float:'right',marginTop:15, fontWeight:'bold',width:'100%'}}, 
            "Prospect This Person")
        )
      )
    );
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2Jpbi9Qcm9qZWN0cy9wcm9zcGVjdGVyL3Byb3NwZWN0ZXItcGFyc2UvZGV2L25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy9yb2Jpbi9Qcm9qZWN0cy9wcm9zcGVjdGVyL3Byb3NwZWN0ZXItcGFyc2UvZGV2L2J1aWxkL2pzL2NvbXBvbmVudHMvcGVvcGxlX3NpZ25hbF9jYXJkLmpzLm1pbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyoqIEBqc3ggUmVhY3QuRE9NICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7ZGlzcGxheU5hbWU6ICdleHBvcnRzJyxcbiAgLy8gU2lnbmFsQ2FyZFxuICBwcm9zcGVjdFBlcnNvbjogZnVuY3Rpb24oKSB7XG4gICAgLy8gQWRkIFRvIFNpZ25hbCBMaXN0XG4gICAgLy8gQWRkIENvbXBhbnlcbiAgICAvLyBBZGQgUHJvc3BlY3RcbiAgICBwZXJzb24gPSB0aGlzLnByb3BzLnBlcnNvblxuICAgIHBlcnNvbklkID0gcGVyc29uLm9iamVjdElkXG4gICAgY29tcGFueSA9IHRoaXMucHJvcHMucGVyc29uLmNvbXBhbnlcbiAgICBjb21wYW55SWQgPSBjb21wYW55Lm9iamVjdElkXG4gICAgcGVyc29uLnNpZ25hbElkID0gcGVyc29uLnNpZ25hbElkXG4gICAgY29tcGFueS5zaWduYWxJZCA9IGNvbXBhbnkub2JqZWN0SWRcbiAgICBwID0gcGVyc29uOyBjID0gY29tcGFueTtcbiAgICBkZWxldGUgcC5vYmplY3RJZDsgZGVsZXRlIGMub2JqZWN0SWQ7XG4gICAgZGVsZXRlIHAuY2xhc3NOYW1lOyBkZWxldGUgYy5jbGFzc05hbWU7XG4gICAgZGVsZXRlIHAuX190eXBlOyBkZWxldGUgYy5fX3R5cGU7XG4gICAgZGVsZXRlIHAuY3JlYXRlZEF0OyBkZWxldGUgYy5jcmVhdGVkQXQ7XG4gICAgZGVsZXRlIHAudXBkYXRlZEF0OyBkZWxldGUgYy51cGRhdGVkQXQ7XG4gICAgcC5jb21wYW55U2lnbmFsID0gcC5jb21wYW55XG4gICAgZGVsZXRlIHAuY29tcGFueVxuXG4gICAgcC5saW5rZWRpbl91cmwgPSBwLnVybFxuICAgIHAuY29tcGFueSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmN1cnJlbnRVc2VyKS5jb21wYW55XG4gICAgcC5hcmNoaXZlZCA9IHRydWVcbiAgICBwLmxvYWRpbmcgPSB0cnVlXG4gICAgcC5jaXR5ID0gcC50aXRsZS5zcGxpdCgnLScpWzBdXG4gICAgcC5wb3MgPSBwLnRpdGxlLnNwbGl0KCctJykuc2xpY2UoLTEpWzBdLnNwbGl0KCcgYXQgJylbMF1cbiAgICBwLmNvbXBhbnlfbmFtZSA9IHAudGl0bGUuc3BsaXQoJy0nKS5zbGljZSgtMSlbMF0uc3BsaXQoJyBhdCAnKS5zbGljZSgtMSlbMF0gXG4gICAgbmFtZSA9IHAubGlua190ZXh0LnNwbGl0KCd8JylbMF1cbiAgICBuYW1lID0gbmFtZS5zcGxpdCgnLScpWzBdXG4gICAgcC5uYW1lID0gbmFtZVxuICAgIHAud2Vic2l0ZVVybCA9IGNvbXBhbnkud2Vic2l0ZVVybFxuICAgIC8vIEF1dG9tYXRpY2FsbHkgQWRkIFRvIFRoZSBTaWduYWwgTGlzdCBJdCBCZWxvbmdzIFRvXG4gICAgXG4gICAgY29uc29sZS5sb2codGhpcy5wcm9wcy5wcm9maWxlKVxuICAgIHAubGlzdHMgPSBbeydfX3R5cGUnOidQb2ludGVyJywnY2xhc3NOYW1lJzonUHJvc3BlY3RMaXN0Jywnb2JqZWN0SWQnOnRoaXMucHJvcHMucHJvZmlsZS5wcm9zcGVjdF9saXN0Lm9iamVjdElkfV0gXG5cbiAgICAkLmFqYXgoe1xuICAgICAgdXJsOidodHRwczovL2FwaS5wYXJzZS5jb20vMS9jbGFzc2VzL1Byb3NwZWN0cycsXG4gICAgICB0eXBlOidQT1NUJyxcbiAgICAgIGhlYWRlcnM6YXBwQ29uZmlnLmhlYWRlcnMsXG4gICAgICBkYXRhOkpTT04uc3RyaW5naWZ5KHApLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcylcbiAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgdXJsOidodHRwczovL2FwaS5wYXJzZS5jb20vMS9jbGFzc2VzL1Blb3BsZVNpZ25hbC8nK3BlcnNvbklkLFxuICAgICAgICAgIHR5cGU6J1BVVCcsXG4gICAgICAgICAgaGVhZGVyczphcHBDb25maWcuaGVhZGVycyxcbiAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7cHJvc3BlY3RJZDogcmVzLm9iamVjdElkLCBwcm9zcGVjdGVkX29uOiBEYXRlLm5vdygpLzEwMDB9KSxcbiAgICAgICAgICBzdWNjZXNzOmZ1bmN0aW9uKHJlcykgeyBjb25zb2xlLmxvZyhyZXMpIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkgeyB9XG4gICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihlcnIpIHsgfVxuICAgIH0pXG5cbiAgICAvL0NyZWF0ZSBDb21wYW55IFByb3NwZWN0IHdpdGggUG9pbnRlciB0byBDb21wYW55U2lnbmFsXG4gICAgJC5hamF4KHtcbiAgICAgIHVybDonaHR0cHM6Ly9hcGkucGFyc2UuY29tLzEvY2xhc3Nlcy9Db21wYW55UHJvc3BlY3RzJyxcbiAgICAgIHR5cGU6J1BPU1QnLFxuICAgICAgaGVhZGVyczphcHBDb25maWcuaGVhZGVycyxcbiAgICAgIGRhdGE6SlNPTi5zdHJpbmdpZnkoYyksXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgLy9VcGRhdGUgQ29tcGFueSBTaWduYWwgV2l0aCBQb2ludGVyIHRvIENvbXBhbnkgUHJvc3BlY3QgYW5kIGRhdGUgcHJvc3BlY3RlZFxuICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICB1cmw6J2h0dHBzOi8vYXBpLnBhcnNlLmNvbS8xL2NsYXNzZXMvQ29tcGFueVNpZ25hbC8nK2NvbXBhbnlJZCxcbiAgICAgICAgICB0eXBlOidQVVQnLFxuICAgICAgICAgIGhlYWRlcnM6YXBwQ29uZmlnLmhlYWRlcnMsXG4gICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe3Byb3NwZWN0SWQ6IHJlcy5vYmplY3RJZCwgcHJvc3BlY3RlZF9vbjogRGF0ZS5ub3coKS8xMDAwfSksXG4gICAgICAgICAgc3VjY2VzczpmdW5jdGlvbihyZXMpIHsgY29uc29sZS5sb2cocmVzKSB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnIpIHsgfVxuICAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24oZXJyKSB7IH1cbiAgICB9KVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcGVyc29uID0gdGhpcy5wcm9wcy5wZXJzb25cbiAgICBzaWduYWwgPSAocGVyc29uLnNpZ25hbHMpID8gcGVyc29uLnNpZ25hbHNbMF0gOiB7fVxuICAgIFxuICAgIHJldHVybiAoXG4gICAgICBSZWFjdC5ET00uZGl2KHtjbGFzc05hbWU6IFwicGFuZWwgcGFuZWwtZGVmYXVsdCBzaWduYWwtY2FyZFwifSwgXG4gICAgICAgIFJlYWN0LkRPTS5kaXYoe2NsYXNzTmFtZTogXCJwYW5lbC1ib2R5XCIsIHN0eWxlOiB7cGFkZGluZ0xlZnQ6MjUsIHBhZGRpbmdSaWdodDoyNX19LCBcbiAgICAgICAgICBSZWFjdC5ET00uaDQobnVsbCwgXG4gICAgICAgICAgICBwZXJzb24udGl0bGVcbiAgICAgICAgICApLCBcbiAgICAgICAgICBSZWFjdC5ET00uaDYoe3N0eWxlOiB7ZGlzcGxheTonaW5saW5lLWJsb2NrJyx3aWR0aDonMTAwJSd9fSwgXG4gICAgICAgICAgICBSZWFjdC5ET00uc3Bhbih7c3R5bGU6IHsgZmxvYXQ6J2xlZnQnLG1heFdpZHRoOiAnNjAlJywgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLCB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcyd9fSwgXG4gICAgICAgICAgICAgIHBlcnNvbi5saW5rX3RleHQpXG4gICAgICAgICAgKSwgXG4gICAgICAgIFJlYWN0LkRPTS5kaXYoe2lkOiBcInNpZ25hbC1zdHVmZlwiLCBcbiAgICAgICAgICAgIHN0eWxlOiAoXy5pc0VxdWFsKHNpZ25hbCwge30pKSA/IHtkaXNwbGF5Oidub25lJ30gOiB7ZGlzcGxheTonYmxvY2snfX0sIFxuICAgICAgICAgIFJlYWN0LkRPTS5oNihudWxsLCBcIiBcIiwgUmVhY3QuRE9NLmkoe2NsYXNzTmFtZTogXCJmYSBmYS1idWlsZGluZ1wifSksIFxuICAgICAgICAgICAgXCLCoCBcIiwgc2lnbmFsLmNvbXBhbnkpLCBcbiAgICAgICAgICBSZWFjdC5ET00uaDYobnVsbCwgXCIgXCIsIFJlYWN0LkRPTS5pKHtjbGFzc05hbWU6IFwiZmEgZmEtbWFwLW1hcmtlclwifSksIFxuICAgICAgICAgICAgXCLCoCBcIiwgc2lnbmFsLmxvY2F0aW9uKSwgXG4gICAgICAgICAgUmVhY3QuRE9NLmg2KG51bGwsIFwiIFwiLCBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLXN1aXRjYXNlXCJ9KSwgXG4gICAgICAgICAgICBcIsKgXCIsIHNpZ25hbC5qb2JfdGl0bGUsIFwiIFwiKVxuICAgICAgICApLCBcblxuICAgICAgICAgIFJlYWN0LkRPTS5hKHtocmVmOiBcImphdmFzY3JpcHQ6XCIsIGNsYXNzTmFtZTogXCJidG4gYnRuLXN1Y2Nlc3NcIiwgXG4gICAgICAgICAgICBvbkNsaWNrOiB0aGlzLnByb3NwZWN0UGVyc29uLCBcbiAgICAgICAgICAgIHN0eWxlOiB7ZmxvYXQ6J3JpZ2h0JyxtYXJnaW5Ub3A6MTUsIGZvbnRXZWlnaHQ6J2JvbGQnLHdpZHRoOicxMDAlJ319LCBcbiAgICAgICAgICAgIFwiUHJvc3BlY3QgVGhpcyBQZXJzb25cIilcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuIl19
