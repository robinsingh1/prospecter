(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // createListModal
  createList: function() {
    console.log($('#listTitle').val())

    data =  {
      'name'        : $('#listTitle').val().trim(),   //Waiting , Running
      'user'        : { '__type':'Pointer',
                      'className':'_User',
                      'objectId':'xWESiw5Smd' },
    }

    thiss = this;
    listClassName = (this.props.listClassName) ? this.props.listClassName : 'ProspectList'
    $.ajax({
      url:'https://api.parse.com/1/classes/'+listClassName,
      type:'POST',
      headers: appConfig.parseHeaders,
      data: JSON.stringify(data),
      success: function(res) {
        console.log(res)
      },
      error: function(err) {
        console.log('error')
        console.log(err)
      }
    });

    data.count = 0

    this.props.createList(data)
    
    $('#createListModal').modal('hide')
    $('body').removeClass('modal-open');
    $('.modal-backdrop').remove();
    //$('button.close').click()
  },

  createListButtonClick: function() {
    if($('#listTitle').val().trim() != "")
      this.createList()
  },

  createMiningJob: function(e) {
    e.preventDefault()
    console.log('lmao')
    if($('#listTitle').val().trim() != "")
      this.createList()
  },

  render: function() {
    return (
          React.DOM.div({className: "modal fade bs-example-modal-sm", tabIndex: "-1", role: "dialog", 'aria-labelledby': "mySmallModalLabel", 'aria-hidden': "true", id: "createListModal", style: {top:'200px'}}, 
            React.DOM.div({className: "modal-dialog modal-sm"}, 
              React.DOM.div({className: "modal-content"}, 
                React.DOM.div({className: "modal-header"}, 
                  React.DOM.button({type: "button", className: "close", 'data-dismiss': "modal"}, React.DOM.span({'aria-hidden': "true"}, "×"), 
                    React.DOM.span({className: "sr-only"}, "Close")), 
                  React.DOM.h4({className: "modal-title", id: "myModalLabel"}, 
                    React.DOM.i({className: "fa fa-list"}), "  Create List")
                ), 
                React.DOM.div({className: "modal-body"}, 
                  React.DOM.form({onSubmit: this.createMiningJob}, 
                    React.DOM.input({id: "listTitle", type: "text", placeholder: "Enter list title...", className: "form-control"}), 
                    React.DOM.br(null), 
                    React.DOM.a({href: "javascript:", onClick: this.createListButtonClick, placeholder: "Enter City Area...", className: "btn btn-success", style: {display:'block', width:'100%'}}, "Create List")
                  )

                )
              )
            )
          )
    );
  }
});


},{}]},{},[1])


},{}],2:[function(require,module,exports){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // createListModal
  createList: function() {
    console.log($('#listTitle').val())

    data =  {
      'name'        : $('#listTitle').val().trim(),   //Waiting , Running
      'user'        : { '__type':'Pointer',
                      'className':'_User',
                      'objectId':'xWESiw5Smd' },
    }

    $.ajax({
      url:'https://api.parse.com/1/classes/ProspectList',
      type:'POST',
      headers: appConfig.parseHeaders,
      data: JSON.stringify(data),
      success: function(res) {
        console.log(res)
      },
      error: function(err) {
        console.log('error')
        console.log(err)
      }
    });

    data.count = 0

    this.props.createList(data)
    
    $('#createListModal').modal('hide')
    $('body').removeClass('modal-open');
    $('.modal-backdrop').remove();
    //$('button.close').click()
  },

  createListButtonClick: function() {
    if($('#listTitle').val().trim() != "")
      this.createList()
  },

  createMiningJob: function(e) {
    e.preventDefault()
    console.log('lmao')
    if($('#listTitle').val().trim() != "")
      this.createList()
  },

  deleteList: function() {
    this.props.deleteList()
  },

  render: function() {
    return (
          React.DOM.div({className: "modal fade bs-deleteList-modal-sm", tabIndex: "-1", role: "dialog", 'aria-labelledby': "mySmallModalLabel", 'aria-hidden': "true", id: "createListModal", style: {top:'200px'}}, 
            React.DOM.div({className: "modal-dialog modal-sm"}, 
              React.DOM.div({className: "modal-content"}, 
                React.DOM.div({className: "modal-header"}, 
                  React.DOM.button({type: "button", className: "close", 'data-dismiss': "modal"}, React.DOM.span({'aria-hidden': "true"}, "×"), 
                    React.DOM.span({className: "sr-only"}, "Close")), 
                  React.DOM.h4({className: "modal-title", id: "myModalLabel"}, 
                    React.DOM.i({className: "fa fa-trash-o"}), "  Delete List?")
                ), 
                React.DOM.div({className: "modal-body"}, 
                  React.DOM.form({className: "deleteForm", onSubmit: this.deleteList}, 
                    React.DOM.a({href: "javascript:", 
                      onClick: this.deleteList, 
                      className: "btn btn-danger", 
                      style: {display:'block', width:'100%'}}, 
                      "Delete"
                    ), 
                    React.DOM.br(null), 
                    React.DOM.a({href: "javascript:", 
                      onClick: this.deleteList, 
                      className: "btn btn-default", 
                      style: {display:'block', width:'100%'}}, 
                      "Cancel"
                    )
                  )

                )
              )
            )
          )
    );
  }
});


},{}]},{},[1])


},{}],3:[function(require,module,exports){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // LoadingSpinner
  render: function() {
    return (
    React.DOM.div({className: "spinner", style: {marginTop:'180px'}}, 
      React.DOM.div({className: "spinner-container container1"}, 
        React.DOM.div({className: "circle circle1"}), 
        React.DOM.div({className: "circle circle2"}), 
        React.DOM.div({className: "circle circle3"}), 
        React.DOM.div({className: "circle circle4"})
      ), 
      React.DOM.div({className: "spinner-container container2"}, 
        React.DOM.div({className: "circle circle1"}), 
        React.DOM.div({className: "circle circle2"}), 
        React.DOM.div({className: "circle circle3"}), 
        React.DOM.div({className: "circle circle4"})
      ), 
      React.DOM.div({className: "spinner-container container3"}, 
        React.DOM.div({className: "circle circle1"}), 
        React.DOM.div({className: "circle circle2"}), 
        React.DOM.div({className: "circle circle3"}), 
        React.DOM.div({className: "circle circle4"})
      )
    )
    )
  }
});

},{}]},{},[1])


},{}],4:[function(require,module,exports){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  //Messenger
  render: function() {
    return (
        React.DOM.div({className: "alert alert-success", 
             'data-alert': "alert", 
             style: {position:'absolute',
                     top: 31, 
                     right:30, 
                     display:'none',
                     width:200}}, 
                     React.DOM.a({className: "close", 
                       href: "javascript:", 
                       onClick: this.hideAlert}, "×"), 
            "Test"
        )
    );
  }
});

},{}]},{},[1])


},{}],5:[function(require,module,exports){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // Panel Footing
  paginatePrevious: function() {
    thiss = this;

    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospects?skip='+(thiss.props.currentPage-2)*thiss.props.prospectsPerPage,
      type:'GET',
      headers: parse_headers,
      data: 'where={"company":'+company+',"archived":true}&count=1',
      success: function(res){
        //thiss.setState({prospects: res.results})
        //thiss.setState({currentPage: this.props.currentPage - 1})
        thiss.props.paginate(res.results, thiss.props.currentPage - 1)
      },
      error: function(res){
        console.log(res)
      }
    });
  },


  paginate: function(direction) {
    prospectsPerPage = this.props.prospectsPerPage
    if(direction=='previous')
      skip = (this.props.currentPage - 2)*prospectsPerPage
    else if(direction=="forward")
      skip = this.props.currentPage*prospectsPerPage

    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospect?skip='+skip,
      type:'GET',
      headers: parse_headers,
      data: 'where={"company":'+company+'}&count=1',
      success: function(res){
        //thiss.setState({prospects: res.results})
        //thiss.setState({currentPage: this.props.currentPage + 1})
        this.props.paginate(res.results, this.props.currentPage + 1)
      },
      error: function(res){
        console.log(res)
      }
    });
  },

  paginateForward: function() {
    thiss = this;
    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospects?skip='+thiss.props.currentPage*thiss.props.prospectsPerPage,
      type:'GET',
      headers: parse_headers,
      data: 'where={"company":'+company+',"archived":true}&count=1',
      success: function(res){
        //thiss.setState({prospects: res.results})
        //thiss.setState({currentPage: thiss.props.currentPage + 1})
        console.log("success")
        thiss.props.paginate(res.results, thiss.props.currentPage + 1)
      },
      error: function(res){
        console.log(res)
      }
    });
  },
  componentDidMount: function() {
    paginateForward = this.paginateForward
    paginatePrevious = this.paginatePrevious

    Mousetrap.bind('l', function() { 
      console.log('new forward')
      paginateForward()
    });

    Mousetrap.bind('h', function() { 
      console.log('new back')
      paginatePrevious()
    });
  },

  render: function() {
    // Should be handled by Panle Footing


    previous = (this.props.currentPage - 1) ? '' : 'disabled'
    forward = (this.props.currentPage == this.props.pages) ? 'disabled' : ''

    lowerLimit = (this.props.currentPage-1)*this.props.prospectsPerPage
    upperLimit = this.props.currentPage*this.props.prospectsPerPage

    lowerLimit = (lowerLimit) ? lowerLimit : 1
    upperLimit = (upperLimit > this.props.count) ? this.props.count : upperLimit

    return (
      React.DOM.div({className: "panel-footing", 
           id: "navbar", 
           style: {height:'35px',padding:'0px', paddingTop:'7px'}}, 
          React.DOM.span({style: {float:'right',marginRight:'20px'}}, 
            React.DOM.a({href: "javascript:", 
               style: {marginRight:'5px'}, 
               onClick: this.paginatePrevious, 
               className: "blue-gradient btn btn-primary btn-xs "+previous}, 
            React.DOM.i({className: "fa fa-fast-backward"})
          ), 
          React.DOM.a({href: "javascript:", 
             onClick: this.paginatePrevious, 
             className: "paginate-back-btn blue-gradient btn btn-primary btn-xs "+previous}, 
            React.DOM.i({className: "fa fa-chevron-left"})
          ), 
          React.DOM.span({style: {marginLeft:5, marginRight:5,display:'inline-block',width:115, textAlign:'center'}}, 
            lowerLimit+' - '+upperLimit+' of '+this.props.count
          ), 
          React.DOM.a({href: "javascript:", 
             onClick: this.paginateForward, 
             className: "paginate-forward-btn blue-gradient btn btn-primary btn-xs "+forward}, 
            React.DOM.i({className: "fa fa-chevron-right"})
          ), 
          React.DOM.a({href: "javascript:", 
             style: {marginLeft:'5px'}, 
             onClick: this.paginateForward, 
             className: "blue-gradient btn btn-primary btn-xs "+forward}, 
            React.DOM.i({className: "fa fa-fast-forward"}))
          )
        )
    );
  }
});

},{}]},{},[1])


},{}],6:[function(require,module,exports){
/** @jsx React.DOM */

//TODO - abstract lists
var SideMenuProspects = require('./side_menu_user_prospects.js.min.js');

var UserProspect = require('./user_prospect.js.min.js');
var UserProspectHeader = require('./user_prospect_header.js.min.js');
var SideMenuListOption = require('./user_side_menu_list.js.min.js');
var LoadingSpinner = require('./loading_spinner.js.min.js')
var PanelFooting = require('./panel_footing.js.min.js')
var Messenger = require('./messenger.js.min.js')
var DeleteListModal = require('./delete_list_modal.js.min.js')
var RenameListModal = require('./rename_list_modal.js.min.js')

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {  prospects   : [],
              currentPage : 1,
              className: 'Prospect',
              listClassName: 'ProspectList',
              pages       : 1,
              currentList : 'All',
              currentListObjectId : '',
              loading: true,
              prospectsPerPage: 50,
              lists : [],
              masterCheckboxChecked: false,
              keyboardActiveProspect: 0, //first
              selectedProspects: [],
              totalCount  : "~", 
              count       : "~", }
  },

  createList: function(data) {
    lists = this.state.lists
    lists.push(data)
    this.setState({ lists: lists })
  },

  renameList: function(newListName) {
    parseHeaders = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb',
      'Content-Type': 'application/json'
    }
    console.log(this.state.currentListObjectId)
    console.log(this.state.currentList)
    console.log(newListName)

    // Update Local State
    thiss = this;
    var filtered = _.filter(this.state.lists, function(item) {
      if(item.name == thiss.state.currentList){
        item.name = newListName
        return item
      }
      return item
    });

    this.setState({lists : filtered})
    this.setState({currentList: newListName})

    $('.modal').click()
    $('#newListName').val('')
    $('.modal-backdrop').click()

    // Persist / Ajax
    $.ajax({
      url:'https://api.parse.com/1/classes/ProspectList/'+this.state.currentListObjectId,
      headers: parseHeaders,
      type:'PUT',
      data:JSON.stringify({'name':newListName}),
      success: function(res) {
        console.log(res)
      },
      error: function(err) {
        console.log(err)
      }
    });
  },

  deleteList: function() {
    // TODO 
    // Get All Members Of This List
    // Remove From List Array
    parseHeaders = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb',
      'Content-Type': 'application/json'
    }
    
    var filtered = _.filter(this.state.lists, function(item) {
      if(item.objectId == thiss.state.currentListObjectId)
        return false
      return true
    });

    this.setState({lists: filtered})
    this.setState({currentList: 'All'})
    this.changeList('All', '')

    // Remove
    $('.modal').click()
    $('#newListName').val('')
    $('.modal-backdrop').click()

    // Persist / Ajax
    $.ajax({
      url:'https://api.parse.com/1/classes/ProspectList/'+this.state.currentListObjectId,
      headers: parseHeaders,
      type:'DELETE',
      success: function(res) {
        console.log(res)
      },
      error: function(err) {
        console.log(err)
      }
    });
  },

  changeList: function(newListName,objectId) {
    // add overlay loading
    //console.log(newListName)
    //console.log(objectId)

    localStorage.selectedProspects = JSON.stringify([])

    this.setState({currentList : newListName})
    this.setState({currentListObjectId : objectId})
    this.setState({prospects  : []    })
    this.setState({count      : '~'   })
    this.setState({pages      : 1     })
    this.setState({loading    : true  })
    this.setState({currentPage: 1})
    this.setState({keyboardActiveProspect: 0})

    qry = 'where={"company":'+company+',"archived":true}&count=1&order=-createdAt'
    console.log(newListName)

    if(this.state.currentList != 'All' || typeof(objectId) != "undefined" && newListName != 'Archived'){
      currentList = JSON.stringify({
        'objectId'  : objectId, 
        '__type'    : 'Pointer', 
        'className' : 'ProspectList' 
      })

      company = JSON.stringify(JSON.parse(localStorage.currentUser).company)
      qry = 'where={"company":'+company+'}&count=1'
      qry = 'where={"lists":'+currentList+'}&count=1&order=-createdAt'
    } else if (newListName == 'Archived') {
      qry = 'where={"company":'+company+',"archived":false}&count=1&order=-createdAt'
    }
    console.log(qry)

    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospect',
      type:'GET',
      headers: parse_headers,
      async: true,
      data: qry,
      ajaxStart: function() {
        console.log('started list')
      },
      success: function(res){
        thisss.setState({prospects: res.results})
        thisss.setState({count: res.count})
        //thisss.setState({totalCount: res.count})
        thisss.setState({pages: Math.ceil(res.count/thisss.props.prospectsPerPage)})
        thisss.setState({loading: false})
      },
      error: function(res){
        //console.log('error')
        //console.log(res)
      }
    })
  },

  checkboxAction: function(checkedState, objId) {
    /* Storing Checked Prospects In LocalStorage To Make it Easier To
     * Copy and Move Prospects 
     *
     * Move To User_Prospects?
     */
    
    selectedProspects = JSON.parse(localStorage.selectedProspects)
    //console.log(checkedState)
    if(checkedState)
      selectedProspects.push(objId)
    else
      selectedProspects = _.reject(selectedProspects, 
                                   function(id){return id == objId})

    console.log(selectedProspects)
    localStorage.selectedProspects = JSON.stringify(selectedProspects)
    this.setState({selectedProspects: selectedProspects})
  },

  masterCheckboxChanged: function(masterCheckboxValue) {
    this.setState({masterCheckboxChecked: masterCheckboxValue})
  },

  render: function() {
    this.startKeyboardShortcuts()
    $('body').css({overflow:'auto'})

    prospects = []
    for(i=0;i<this.state.prospects.length;i++) {
      url = this.state.prospects[i].url
      prospect = this.state.prospects[i]

      if(url != "no linkedin website" && typeof(url) != "undefined" && url != ""){
        url = url.replace('http://','')
        the_link = React.DOM.a({href: 'http://'+url}, React.DOM.i({className: "fa fa-globe"}))
      } else {
        the_link = ""
      }

      profile = this.state.prospects[i].linkedin_url.replace('http://','')
      profile = this.state.prospects[i].linkedin_url.replace('https://','')
      li = React.DOM.a({href: 'http://'+profile, className: "linkedin_link"}, React.DOM.i({className: "fa fa-linkedin-square"}))

      keyboardSelected = (i == this.state.keyboardActiveProspect)

      selectedProspects = JSON.parse(localStorage.selectedProspects)
      alreadyChecked=false
      for(ii=0;ii< selectedProspects.length;ii++)
        if(prospect.objectId == selectedProspects[ii])
          alreadyChecked = true

        //console.log(alreadyChecked)

      prospects.push(
        UserProspect({deleteProspect: this.deleteProspect, 
                      prospect: this.state.prospects[i], 
                      masterCheckboxChecked: this.state.masterCheckboxChecked, 
                      key: this.generate_id(), 
                      link: the_link, 
                      keyboardSelected: keyboardSelected, 
                      checkboxAction: this.checkboxAction, 
                      alreadyChecked: alreadyChecked, 
                      li: li}))
    }

    listType = (this.state.currentList == "All") ? {display:'none'} : {float:'left'}
    listBtn = (this.state.currentList == "All") ? {display:'none'} : {float:'left',marginLeft:5}
    listOptions = (this.state.currentList == "All") ? {display:'none'} : {float:'right'}
    copyDropdownStyle = (this.state.currentList == "All") ? {width:114, right:4} : {width:114, right:36}
    currentList = this.state.currentList
    return (
        React.DOM.div(null, 
      React.DOM.div({className: "container", style: {width:'100%',padding:'0', background: 'linear-gradient(#dae8ff,#dae8ff)', backgroundImage: 'radial-gradient(circle at center center,#fff,#dff1fd 900px)'}}, 
        SideMenuProspects({currentList: this.state.currentList, 
                           count: this.state.count, 
                           totalCount: this.state.totalCount, 
                           changeList: this.changeList, 
                           createList: this.createList, 
                           lists: this.state.lists}), 

        React.DOM.div({className: "col-md-10", style: {padding:'0'}}, 
              React.DOM.div({id: "prospectDetailButtons"}, 
                ListDetailButtons({
                  renameList: this.renameList, 
                  deleteList: this.deleteList, 
                  currentListName: this.state.currentList, 
                  currentList: this.state.currentListObjectId}), 

                React.DOM.div({className: "dropdown"}, 
                  React.DOM.a({href: "javascript:", 
                     className: "btn btn-primary btn-xs list-options", 
                     id: "", 
                     style: listOptions}, 
                    React.DOM.i({className: "fa fa-bars"})
                  )
                ), 

                React.DOM.div({className: "dropdown"}, 
                  React.DOM.a({'data-toggle': "dropdown", 
                     id: "copyToList", 
                     href: "javascript:", 
                     className: "drop-target btn btn-primary btn-xs list-options"}, 
                     React.DOM.i({className: "fa fa-copy"}), 
                       "  Copy To List  ",  
                     React.DOM.i({className: "fa fa-caret-down"})
                ), 
                CurrentListsTwo({lists: this.state.lists, 
                                 copyDropdownStyle: copyDropdownStyle, 
                                 listAction: this.copySelectedProspects})
                ), 
  
                React.DOM.div({className: "dropdown"}, 
                  React.DOM.a({'data-toggle': "dropdown", 
                     href: "javascript:", 
                     id: "moveToList", 
                     style: listOptions, 
                     className: "btn btn-primary btn-xs list-options"}, 
                     React.DOM.i({className: "fa fa-share"}), 
                     "  Move To List  ",  
                     React.DOM.i({className: "fa fa-caret-down"})
                ), 
                CurrentLists({lists: this.state.lists, 
                              listAction: this.moveSelectedProspects})
                ), 

                React.DOM.a({onClick: this.downloadFile, 
                   href: "javascript:", 
                   id: "downloadProspects", 
                   className: "drop-target btn btn-primary btn-xs list-options"}, 
                  React.DOM.i({className: "fa fa-download"}), "   Download CSV  " 
                )
              ), 
        

          React.DOM.div({id: "autoscroll", style: {height:'400px',overflow:'auto'}}, 
            React.DOM.table({className: "prospects-table table table-striped", style: {marginBottom:'0px'}}, 
              React.DOM.thead({style: {backgroundColor:'white'}}, 
                UserProspectHeader({masterCheckboxChanged: this.masterCheckboxChanged})
              ), 
              React.DOM.tbody(null, 
                prospects
              )
            ), 
            (this.state.loading) ? LoadingSpinner(null) : ""
          )
        )
      ), 

      PanelFooting({currentPage: this.state.currentPage, 
                    count: this.state.count, 
                    paginate: this.paginate, 
                    prospectsPerPage: this.state.prospectsPerPage, 
                    pages: this.state.pages}), 
      Messenger(null)
    )
    );
  },

  paginate: function(newProspects, newPage) {
    this.setState({
      prospects: newProspects,
      currentPage: newPage,
      keyboardActiveProspect: 0
    })
    this.startKeyboardShortcuts()
    document.getElementById('autoscroll').scrollTop = 0
  },

  downloadFile: function() {
    parse_headers = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb',
    }

    // Get List Count
    list = JSON.stringify({
      '__type'   :  'Pointer',
      'className':  'ProspectList',
      'objectId' :  this.state.currentListObjectId
    })
    console.log(list)
    // Add Support For More than 1000
    // num_of_requests
    localStorage.download_total = Math.ceil(this.state.count/1000)
        this.props.paginate(res.results, this.props.currentPage + 1)
    localStorage.downloads      = 0

    if(this.state.currentList == "All")
      qry = 'where={"company":'+company+'}&count=1'
    else
      qry = 'where={"lists":'+list+'}&count=1'

    for(i=0;i< Math.ceil(this.state.count/1000); i++){
      $.ajax({
        url: 'https://api.parse.com/1/classes/Prospect?limit=1000&skip='+i,
        type:'GET',
        headers: parse_headers,
        downloadFile: 'download_'+i,
        data: qry,
        success: function(res){
          // Clean Results
          // Remove Certain Parse Columns - created_at, updated_at, objectId
          // Rename createdAt as date prospected
          for(i=0;i< res.results.length;i++) {
            delete res.results[i].company
            delete res.results[i].pos
            delete res.results[i].user
            delete res.results[i].objectId
            delete res.results[i].createdAt
            delete res.results[i].updatedAt
          }

          // Add Results To LocalStorage
          localStorage.downloads = JSON.parse(localStorage.downloads) + 1 
          localStorage.setItem(this.downloadFile, JSON.stringify(res.results))

          // Check to see if all ajax reqs in for loop are complete
          if(localStorage.downloads == localStorage.download_total) {
            console.log('matched')
            // Merge all localStorage results
            prospects = []
            for(ii=0;ii < JSON.parse(localStorage.download_total); ii++){
              prospects = prospects.concat(JSON.parse(localStorage.getItem('download_'+ii)))
              console.log(prospects)
            }

            console.log(prospects)
            // Output as CSV
            var blob = new Blob([Papa.unparse(prospects)], {type: "text/plain;charset=utf-8"});
            console.log(blob)
            saveAs(blob, "prospects.csv");
          }
      },

      error: function(res){
        console.log(res)
      }
      });
    }
    
    company = JSON.stringify(JSON.parse(localStorage.currentUser).company)
    

  },

  removeSelectedProspects: function() {
    // If List Type is All Archive the prospect
    parseHeaders = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb',
      "Content-Type" : "application/json"
    }

    selectedProspects = JSON.parse(localStorage.selectedProspects)
    batchData = []

    for(i=0;i< selectedProspects.length;i++){
      if(this.state.currentList != 'All'){
        tmp = {
          method:'PUT',
          path:'/1/classes/Prospect/'+selectedProspects[i],
          body: {
            lists: {
              '__op'    : 'Remove',
              "objects" : [{ 
                  '__type':'Pointer',
                  'className':'ProspectList',
                  'objectId':this.state.currentListObjectId
              }]
            }
          }
        }
      }else{
        tmp = {
          method:'PUT',
          path:'/1/classes/Prospect/'+selectedProspects[i],
          body: {
            archived:false,
          }
        }
      }
      batchData.push(tmp)
    }

    thiss = this;
    $.ajax({
      url:'https://api.parse.com/1/batch',
      type:'POST',
      headers:parseHeaders,
      data: JSON.stringify({requests: batchData}),
      success:function(res) {
        console.log(res)
        lists = thiss.state.lists

        for(i=0;i< lists.length; i++) { 
          // Subtract From Old List - Not Working For Archive
          if(lists[i].objectId == thiss.state.currentListObjectId)
            lists[i].count = parseInt(lists[i].count) - parseInt(selectedProspects.length)
        }
        // Update local list count
        thiss.setState({lists: lists})

        // remove from current list ui
        selectedProspects = JSON.parse(localStorage.selectedProspects)
        console.log('remove selected prospects')
        console.log(selectedProspects)
        console.log(thiss.state.prospects)
        var filtered = _.filter(thiss.state.prospects, function(item) {
          for(i=0;i< selectedProspects.length;i++) 
            if(item.objectId == selectedProspects[i])
              return false
          return true
        });
        console.log(filtered)
        thiss.setState({prospects: filtered})
        localStorage.selectedProspects = JSON.stringify([])

        // add alert to inform user
      },
      error: function(err) {
        console.log(err)
      }
    });
  },

  moveSelectedProspects: function(listObjectId) {
    parseHeaders = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb',
      "Content-Type" : "application/json"
    }

    // get the selected objectId from selectedProspects state
    selectedProspects = JSON.parse(localStorage.selectedProspects)
    batchData = []


    // Batch Update Parse
    // - Remove All Selected Prospects From Current List
    for(i=0;i< selectedProspects.length;i++){
      tmp = {
        method:'PUT',
        path:'/1/classes/Prospect/'+selectedProspects[i],
        body: {
          lists: {
            '__op'    : 'Remove',
            "objects" : [{ 
                '__type':'Pointer',
                'className':'ProspectList',
                'objectId':this.state.currentListObjectId
            }]
          }
        }
      }
      batchData.push(tmp)
    }
    
    // - Add Other List 
    for(i=0;i< selectedProspects.length;i++){
      tmp = {
        method:'PUT',
        path:'/1/classes/Prospect/'+selectedProspects[i],
        body: {
          lists: {
            '__op'    : 'AddUnique',
            "objects" : [{ 
                '__type':'Pointer',
                'className':'ProspectList',
                'objectId':listObjectId
            }]
          }
        }
      }
      batchData.push(tmp)
    }

    thiss = this;
    $.ajax({
      url:'https://api.parse.com/1/batch',
      type:'POST',
      headers:parseHeaders,
      data: JSON.stringify({requests: batchData}),
      success:function(res) {
        console.log(res)
        lists = thiss.state.lists

        for(i=0;i< lists.length; i++) { 
          // Add To New List
          if(lists[i].objectId == listObjectId)
            lists[i].count = parseInt(lists[i].count) + parseInt(selectedProspects.length)
          // Subtract From Old List
          if(lists[i].objectId == thiss.state.currentListObjectId)
            lists[i].count = parseInt(lists[i].count) - parseInt(selectedProspects.length)
        }
        // Update local list count
        thiss.setState({lists: lists})

        // remove from current list ui
        console.log('selectedProspects')
        console.log(thiss.state.prospects)
        var filtered = _.filter(thiss.state.prospects, function(item) {
          is_selected = true
          for(i=0;i< selectedProspects.length;i++) 
            if(item.objectId == selectedProspects[i])
              is_selected = false
          return is_selected
        });
        console.log(filtered)
        thiss.setState({prospects: filtered})
        localStorage.selectedProspects = JSON.stringify([])

        // add alert to inform user
      },
      error: function(err) {
        console.log(err)
      }
    });
  },

  copySelectedProspects: function(listObjectId) {
    console.log(listObjectId)
    
    // make batch ajax request to parse
    parseHeaders = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb',
      "Content-Type" : "application/json"
    }

    // Add Loading Sign To List

    selectedProspects = JSON.parse(localStorage.selectedProspects)
    batchData = []
    for(i=0;i< selectedProspects.length;i++){
      tmp = {
        method:'PUT',
        path:'/1/classes/Prospect/'+selectedProspects[i],
        body: {
          lists: {
            '__op'    : 'AddUnique',
            "objects" : [{ 
                '__type':'Pointer',
                'className':'ProspectList',
                'objectId':listObjectId
            }]
          }
        }
      }
      batchData.push(tmp)
    }

    thiss = this;
    $.ajax({
      url:'https://api.parse.com/1/batch',
      type:'POST',
      headers:parseHeaders,
      data: JSON.stringify({requests: batchData}),
      success:function(res) {
        console.log(res)
        // Update With the number of successes
        // Update local list count
        lists = thiss.state.lists
        for(i=0;i< lists.length; i++) { 
          if(lists[i].objectId == listObjectId)
            lists[i].count = parseInt(lists[i].count) + parseInt(res.length)
        }
        thiss.setState({lists: lists})
        localStorage.selectedProspects = "[]"
        thiss.setState({selectedProspects : [] })
        
        // add alert to inform user
        // Unselect all selected
      },
      error: function(err) {
        console.log(err)
      }
    });

  },

  hideAlert: function() {
    $('.alert').hide()
  },

  adjustHeight: function(whichOne) {
    prospectWindowTop = $('#prospectDetailButtons').position().top
    prospectWindowTop = prospectWindowTop + $('#prospectDetailButtons').height()
    prospectWindowBottom = $('#autoscroll').position().top + $('#autoscroll').height()

    if(whichOne == 'j')
      activeProspect = this.state.keyboardActiveProspect +1 
    else
      activeProspect = this.state.keyboardActiveProspect -1 

    activeTop = $($('.prospects-tr')[activeProspect]).position().top
    selectedHeight = $($('.prospects-tr')[activeProspect]).height()
    activeBottom = $($('.prospects-tr')[activeProspect]).position().top+selectedHeight

    console.log(prospectWindowTop, prospectWindowBottom)
    console.log(activeTop, activeBottom)

    scrollTop = document.getElementById('autoscroll').scrollTop
    if(activeBottom > prospectWindowBottom)
      document.getElementById('autoscroll').scrollTop = scrollTop + activeBottom - prospectWindowBottom

    if(activeTop < 0)
      document.getElementById('autoscroll').scrollTop = scrollTop + activeTop - 37
    else if(activeTop == $($('.prospects-tr')[0]).position().top)
      document.getElementById('autoscroll').scrollTop = 0
      
    // Get Postion of Top
    // Get Position of Bottom 
    // Get Position of Current Selected
    // Adjust by scrolling down or up
  },

  startKeyboardShortcuts: function() {
    /* Keyboard Shortcuts */
    Mousetrap.reset()
    //Mousetrap.unbind(['j','k','o'])
    thiss = this;

    /* Prospect Table Shortcuts */
    Mousetrap.bind('j', function() { 
      keyboard = thiss.state.keyboardActiveProspect
      if(keyboard != thiss.state.prospectsPerPage+1)
        thiss.adjustHeight('j')
        thiss.setState({keyboardActiveProspect: keyboard+1})
    });

    Mousetrap.bind('k', function() { 
      keyboard = thiss.state.keyboardActiveProspect
      if(keyboard != 1)
        thiss.adjustHeight('k')
        thiss.setState({keyboardActiveProspect: keyboard-1})
    });


    Mousetrap.bind('o', function() { 
      console.log('open current prospect')
      console.log($($('.keySelect').find('a.linkedin_link')[0]).attr('href'))
      link = $($('.keySelect').find('a.linkedin_link')[0]).attr('href')
      /*
      window.open(link, '_blank')
      console.log('new')
      */
      //popupWindow.blur();
      //window.focus();
      // keyboard = thiss.state.keyboardActiveProspect
      
      var a = document.createElement("a");
      a.href = link
      var evt = document.createEvent("MouseEvents");
      //the tenth parameter of initMouseEvent sets ctrl key
      // For Mac This Works Check For - Windows
      evt.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0,
                                  false, false, false, true, 0, null);
      a.dispatchEvent(evt);
    });



    /* List Modification Shortcuts */
    Mousetrap.bind('tab+r', function(){
      //console.log('reload')
      $('#renameListBtn').click()
    })

    Mousetrap.bind('tab+d', function(){
      //console.log('reload')
      $('#deleteListModal').click()
    })

    Mousetrap.bind('tab+s', function(){
      //console.log('reload')
      //$('#downloadProspects').click()
      thiss.downloadFile()
    })

    Mousetrap.bind('shift+l', function(){
      //console.log('reload')
      //$('#downloadProspects').click()
      //thiss.downloadFile()
      $('.new-list-btn').click()
    })

    Mousetrap.bind('e', function(){
      console.log('reload')
      //$('#downloadProspects').click()
      thiss.removeSelectedProspects()
    })

    Mousetrap.bind('c', function() { 
      console.log('copy')
      $('#copyToList').click()
    });

    Mousetrap.bind('m', function() { 
      console.log('copy')
      $('#moveToList').click()
    });

    //Mousetrap.bind('e', function() { console.log('e'); });
    Mousetrap.bind('right', function() { console.log('right'); });
    Mousetrap.bind('left', function() { console.log('left'); });

  },

  componentDidMount: function() {
    /* OnLoad For The First Time Function */
    localStorage.selectedProspects = JSON.stringify([])
    thisss = this;

    //this.startKeyboardShortcuts()

    parse_headers = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb'
    }

    company = JSON.stringify(JSON.parse(localStorage.currentUser).company)
    cuid = JSON.parse(localStorage.currentUser).objectId
    user = JSON.stringify({'__type':'Pointer',
                           'objectId':cuid, 
                           'className': 'User'})
    archiveList = JSON.stringify({ //hardCode
      'objectId':'SerPQjckve',
      '__type':'Pointer', 
      'className' : 'ProspectList' 
    })

    qry = 'where={"company":'+company+',"archived":true}&count=1&order=-createdAt'

    if(this.state.currentList != 'All'){
      currentList = {
        'objectId':this.state.currentListObjectId, 
        '__type':'Pointer', 
        'className' : 'ProspectList' 
      }
      currentList = JSON.stringify(currentList)
      user = JSON.stringify({'__type':'Pointer',
                             'objectId':'xThAXc0LZT',
                             'className':'User'})

      // add company to prospects added through mining job
      qry = 'where={"company":'+company+',"lists":'+currentList+'}&count=1'
    }

    $.ajax({
      //url: 'https://api.parse.com/1/classes/Prospects?limit=50',
      url: 'https://api.parse.com/1/classes/Prospect?limit='+thisss.state.prospectsPerPage,
      type:'GET',
      headers: parse_headers,
      cache: true,
      data: qry,
      success: function(res){
        console.log(res)
        thisss.setState({prospects: res.results})
        thisss.setState({count: res.count})
        thisss.setState({totalCount: res.count})
        thisss.setState({pages: Math.ceil(res.count/thisss.props.prospectsPerPage)})
        thisss.setState({loading: false})
      },
      error: function(res){
        console.log('error')
        console.log(res)
      }
    })

    parse_headers = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb',
    }

    currentUser = { 
      '__type'   : 'Pointer',
      'className': '_User',
      'objectId' : JSON.parse(localStorage.currentUser).objectId
    }

    thiss = this;
    $.ajax({
      url: 'https://api.parse.com/1/classes/ProspectList',
      type: 'GET',
      headers: parse_headers,
      data: 'where={"user":'+JSON.stringify(currentUser)+"}&count=1&order=-createdAt",
      success: function(res) {
        console.log(res)
        results = res.results
        for(i=0;i< results.length; i++) {
          results.count = '~'
        }
        thiss.setState({lists: results})
        // Make batch request to get list counts after they are loaded
        for(i=0;i < res.results.length; i++) {
          localStorage.setItem(res.results[i].objectId, "")
        }

        for(i=0;i< res.results.length; i++) {
          list = {
            '__type'    : 'Pointer',
            'objectId'  : res.results[i].objectId,
            'className' : 'ProspectList', 
          }

          $.ajax({
            url:'https://api.parse.com/1/classes/Prospect',
            type:'GET',
            headers:parse_headers,
            listObjectId: res.results[i].objectId,
            data: 'where={"lists":'+JSON.stringify(list)+'}&count=1',
            success: function(res) {
              //console.log(this.listObjectId)
              localStorage.setItem(this.listObjectId, res.count)
              amount = 0
              for(ii=0;ii< results.length;ii++){
                if(localStorage.getItem(results[ii].objectId) == "")
                  amount = amount + 1
              }

              if(amount == 0) {
                for(ii=0;ii< results.length;ii++)
                  results[ii].count = localStorage.getItem(results[ii].objectId)

                thiss.setState({lists: results})
                //console.log('Got Counts')
              }

              // updated res.count
              //thiss.setState({count: res.count})
            },
            error: function(err) {
              console.log(err)
            }
          })
        }
      },
      error: function(err) {
        console.log('error')
        console.log(err)
      }
    });
  },

  generate_id : function () {
    return '_' + Math.random().toString(36).substr(2, 9);
  },
});

/*  Dropdown Menus */

var CurrentLists = React.createClass({displayName: 'CurrentLists',
  listAction: function(e) {
    listName = $(e.target).text()
    
    var listSelect = _.filter(this.props.lists, function(item) {
       return item.name == listName
    });

    this.props.listAction(listSelect[0].objectId)
  },

  render: function() {
    lists = [] 
    for(i=0;i< this.props.lists.length;i++) {
      lists.push(
        React.DOM.li(null, React.DOM.a({style: {fontWeight:'bold',fontSize:'10px'}, href: "javascript:", onClick: this.listAction}, this.props.lists[i].name))
      )
    }
    //console.log(this.props.copyDropdownStyle)
    return (
      React.DOM.ul({className: "dropdown-menu drop-test", id: "dropdown", 
          style: {right:158}}, 
        lists
      )
    );
  }
});

var ListsMenu = React.createClass({displayName: 'ListsMenu',
  render: function() {
    return (
      React.DOM.ul({className: "dropdown-menu drop-test", id: "dropdown", 
          style: {
            minWidth:'inherit',
            top: '20px',
            width: '125px',
            right: '154px',
            left:'auto'
          }}, 
        React.DOM.li(null, React.DOM.a({href: "#books"}, 
          React.DOM.i({className: "fa fa-times"}), "  " + ' ' +
          "Delete List"
        )), 
        React.DOM.li(null, React.DOM.a({href: "#podcasts"}, 
          "Rename Lists"
        ))
      )
    );
  }
});

var CurrentListsTwo = React.createClass({displayName: 'CurrentListsTwo',
  listAction: function(e) {
    listName = $(e.target).text()
    
    var listSelect = _.filter(this.props.lists, function(item) {
       return item.name == listName
    });

    this.props.listAction(listSelect[0].objectId)
  },

  render: function() {
    lists = [] 
    for(i=0;i<this.props.lists.length;i++) {
      lists.push(
        React.DOM.li(null, React.DOM.a({style: {fontWeight:'bold',fontSize:'10px'}, 
               href: "javascript:", 
               onClick: this.listAction}, 
          this.props.lists[i].name))
      )
    }
    return (
      React.DOM.ul({className: "dropdown-menu drop-test", id: "dropdown", 
          style: this.props.copyDropdownStyle}, 
        lists
      )
    );
  }
});

var ListDetailButtons = React.createClass({displayName: 'ListDetailButtons',
  // Rename List
  getInitialState: function() {
    return {
      editMode: false
    }
  },
  render: function() {
    //console.log(this.props.currentListObjectId)
    if(!this.state.editMode) {
      stuff = React.DOM.span({className: "label label-default", style: listType}, 
            (this.props.currentListName == "All") ? '' : React.DOM.i({className: "fa fa-align-justify", style: {marginRight:'5px'}}), 
            (this.props.currentListName == "All") ? '' : "   " +this.props.currentListName
              )
    } else {
      stuff = React.DOM.input({className: "form-control", style: {width: 100, float: 'left', height: 24, marginTop: -1}})
    }
    return (

          React.DOM.div(null, 
            React.DOM.h4({style: {margin:0}}, 
              stuff, 
              React.DOM.a({href: "javascript:", 
                style: listBtn, 
                'data-toggle': "modal", 
                id: "renameListBtn", 
                'data-target': ".bs-renameList-modal-sm", 
                className: "btn-gradient btn btn-xs btn-primary"}, 
                React.DOM.i({className: "fa fa-pencil"})
              ), 
              React.DOM.a({href: "javascript:", 
                style: listBtn, 
                'data-toggle': "modal", 
                id: "deleteListModal", 
                'data-target': ".bs-deleteList-modal-sm", 
                className: "btn-gradient btn btn-xs btn-primary"}, 
                React.DOM.i({className: "fa fa-trash-o"})
              )
            ), 
            RenameListModal({renameList: this.props.renameList}), 
            DeleteListModal({deleteList: this.props.deleteList})
          )
      );
  },

  renameList: function(newListName) {
    this.props.renameList(newListName)
  },

  deleteList: function(){
    this.props.deleteList()
  },

  toggleEdit: function() {
    this.setState({editMode: !this.state.editMode })
  }
});


},{"./delete_list_modal.js.min.js":2,"./loading_spinner.js.min.js":3,"./messenger.js.min.js":4,"./panel_footing.js.min.js":5,"./rename_list_modal.js.min.js":7,"./side_menu_user_prospects.js.min.js":8,"./user_prospect.js.min.js":9,"./user_prospect_header.js.min.js":10,"./user_side_menu_list.js.min.js":11}],7:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // createListModal
  createList: function() {
    console.log($('#listTitle').val())

    data =  {
      'name'        : $('#listTitle').val().trim(),   //Waiting , Running
      'user'        : { '__type':'Pointer',
                      'className':'_User',
                      'objectId':'xWESiw5Smd' },
    }

    $.ajax({
      url:'https://api.parse.com/1/classes/ProspectList',
      type:'POST',
      headers: appConfig.parseHeaders,
      data: JSON.stringify(data),
      success: function(res) {
        console.log(res)
      },
      error: function(err) {
        console.log('error')
        console.log(err)
      }
    });

    data.count = 0

    this.props.createList(data)
    
    $('#createListModal').modal('hide')
    $('body').removeClass('modal-open');
    $('.modal-backdrop').remove();
    //$('button.close').click()
  },

  renameList: function(e) {
    e.preventDefault()
    //console.log($('#newListName').val())
    newListName = $('#newListName').val()
    if(newListName.trim() != "")
      this.props.renameList(newListName)
    // Disable Modal
  },

  render: function() {
    return (
          React.DOM.div({className: "modal fade bs-renameList-modal-sm", tabIndex: "-1", role: "dialog", 'aria-labelledby': "mySmallModalLabel", 'aria-hidden': "true", id: "createListModal", style: {top:'200px'}}, 
            React.DOM.div({className: "modal-dialog modal-sm"}, 
              React.DOM.div({className: "modal-content"}, 
                React.DOM.div({className: "modal-header"}, 
                  React.DOM.button({type: "button", className: "close", 'data-dismiss': "modal"}, React.DOM.span({'aria-hidden': "true"}, "×"), 
                    React.DOM.span({className: "sr-only"}, "Close")), 
                  React.DOM.h4({className: "modal-title", id: "myModalLabel"}, 
                    React.DOM.i({className: "fa fa-list"}), "  Rename List")
                ), 
                React.DOM.div({className: "modal-body"}, 
                  React.DOM.form({onSubmit: this.renameList}, 
                    React.DOM.input({id: "newListName", type: "text", placeholder: "Enter list title...", className: "form-control"}), 
                    React.DOM.br(null), 
                    React.DOM.a({href: "javascript:", 
                      onClick: this.renameList, 
                      className: "btn btn-success", 
                      style: {display:'block', width:'100%'}}, 
                      "Create List"
                    )
                  )
                )
              )
            )
          )
    );
  }
});


},{}],8:[function(require,module,exports){
/** @jsx React.DOM */

var SideMenuListOption = require('./user_side_menu_list.js.min.js');
var createListModal = require('./create_list_modal.js.min.js')

module.exports = React.createClass({displayName: 'exports',
  //SideMenuProspects - SideList
  getInitialState: function() {
    return {
      /*
      createList: 
      renameList:
      deleteList:
      changeList:
      currentList:
      totalCount:
      lists:
      */
    }
  },

  createList: function (data) {
    this.props.createList(data)
  },

  componentDidMount: function() {
  },

  changeList: function(e) {
    /*
    currentList = $(e.target).parent()//.data('list')
    console.log(currentList)
    this.props.changeList(currentList.name, currentList.objectId)
    */
  },

  render: function() {
    if(this.props.currentList == "All")
      styles = {'backgroundColor':'rgb(0, 122, 255)', 'color':'white'} 
    else
      styles =  {}

    lists = [SideMenuListOption({list: {name: 'All',count: this.props.totalCount}, 
                                 iconType: 'users', 
                                 changeList: this.props.changeList}), 
             SideMenuListOption({list: {name: 'Archived', count: '~'}, 
                                 iconType: 'archive', 
                                 changeList: this.props.changeList, 
                                 hideCount: true})]

    for(i=0;i< this.props.lists.length;i++){
      list = this.props.lists[i]
      if(list.signal_list)
        lists.push( SideMenuListOption({list: list, 
                                        iconType: 'wifi', 
                                        changeList: this.props.changeList}))
      else 
        lists.push( SideMenuListOption({list: list, 
                                        changeList: this.props.changeList}))
    }

    return (
      React.DOM.div({className: "col-md-2", 
           style: {padding:'0',height:'438px',backgroundColor:'#e0e9ee',
                   borderRight:'1px solid #b0b8bf',textAlign:'center'}}, 
        React.DOM.div({className: "prospect-list-header"}, " Lists "), 
        React.DOM.div({className: "btn-group-vertical", 
             style: {width:'100%', height: '320px', overflow: 'auto'}}, 
          lists
        ), 
        React.DOM.br(null), React.DOM.br(null), 
        React.DOM.a({href: "javascript:", className: "btn btn-primary new-list-btn", 
              'data-toggle': "modal", 'data-target': ".bs-example-modal-sm", 
              style: { backgroundImage: 'linear-gradient(180deg, #0096ff 0%, #005dff 100%)'}}, 
          React.DOM.i({className: "fa fa-plus-circle"}), "  New List"
        ), 
        createListModal({createList: this.createList, 
                         listClassName: this.props.listClassName}), " ", React.DOM.br(null)
      )
    );
  },
});

},{"./create_list_modal.js.min.js":1,"./user_side_menu_list.js.min.js":11}],9:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // UserProspect
  getInitialState: function() {
    return { }
  },

  clickCheck: function() {
    domNode = this.getDOMNode()
    isChecked = $($(domNode).find('input[type="checkbox"]')[0]).prop('checked')
    //console.log(isChecked)
    this.setState({checked: isChecked})
    this.props.checkboxAction(isChecked, this.props.prospect.objectId)
  },

  rowClick: function() {
    $($(this.getDOMNode()).find('input[type="checkbox"]')[0]).click()
  },

  keyboardClick: function() {
    $($('.keySelect').find('input[type="checkbox"]')[0]).click()
  },

  componentDidMount: function() { },

  render: function() {
    keyboardSelected = {borderLeft:'7px solid rgba(0,0,0,0)'}
    thissss = this
    if(this.props.keyboardSelected) {
      // Adjust Scroll depending on where the prospect is
      keyboardSelected = {borderLeft:'7px solid #0096ff !important'}
      Mousetrap.unbind('x')
      Mousetrap.bind('x', function() { 
        thissss.keyboardClick()
        if(thissss.state.checked)
          console.log("lmao")
      });
    }

    prospect = this.props.prospect

    if(this.props.masterCheckboxChecked && this.state.checked)
      checked = true
    else if(this.props.alreadyChecked)
      checked = true
    else if(this.state.checked)
      checked = true
    else if(this.props.masterCheckboxChecked || this.state.checked)
      checked = true
    else
      checked = false

    //console.log(this.state.checked)
    //console.log(checked)
    //{prospect.employeeCountRange.name + " employees" }
    
    color = {}
    if(this.state.checked || this.props.alreadyChecked)
      color = {backgroundColor: '#eef8ff'}
      
    rowCl = (this.props.keyboardSelected) ? "prospects-tr keySelect" : "prospects-tr"
    websiteBtn = (prospect.websiteUrl) ?  React.DOM.a({href: "http://"+prospect.websiteUrl.replace('http://','')}, " ", React.DOM.i({className: "fa fa-globe"}), " ") : ""
    return (
      React.DOM.tr({className: rowCl, 
          onClick: this.rowClick, 
          style: keyboardSelected}, 
          React.DOM.td({style: color}, 
              React.DOM.input({type: "checkbox", 
                     onChange: this.clickCheck, 
                     checked: checked})
          ), 
          React.DOM.td({style: color, 
              className: "fixed-data-column"}, 
            React.DOM.span({style: {fontWeight:'bold'}}, prospect.name), 
            React.DOM.h6({style: {fontWeight:'400',margin:'0px'}}, 
              (prospect.pos) ? prospect.pos.trim() : ""
            )
          ), 
          React.DOM.td({style: color, 
              className: "fixed-data-column"}, 
            React.DOM.span({style: {fontWeight:'bold'}}, 
              prospect.company_name
            ), 
            React.DOM.h6({style: {fontWeight:'400',margin:'0px'}}, 
              (prospect.employeeCountRange) ? prospect.employeeCountRange.name + " employees" : ""
            )
          ), 

          React.DOM.td({style: color}, 
            React.DOM.h6({style: {margin:'0px'}}, prospect.city)), 
          React.DOM.td({style: color}, 
            React.DOM.a({href: "mailto:"+prospect.email, 
               style: {margin:'0px'}}, 
            (prospect.email) ? prospect.email.toLowerCase() : ""
          )), 
          React.DOM.td({style: color}, this.props.li, " ", this.props.link), 
          React.DOM.td({style: color}, 
            websiteBtn
          )
        )
    );
  },

  deleteProspect: function() {
    this.props.deleteProspect(this.props.prospect.objectId, 'Prospect')
  }
});


},{}],10:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  checkboxAction: function(e) {
    checkboxVal = $(e.target).is(':checked')
    this.props.masterCheckboxChanged(checkboxVal)
  },

  componentDidMount: function() {

  },

  render: function() {
    return (
            React.DOM.tr(null, 
              React.DOM.th(null, React.DOM.input({type: "checkbox", onChange: this.checkboxAction})), 
              React.DOM.th(null, "Name"), 
              React.DOM.th(null, "Company"), 
              React.DOM.th({style: {width:'170px'}}, "City"), 
              React.DOM.th(null, "Email"), 
              React.DOM.th(null, " "), 
              React.DOM.th(null, " ")
            )
    );
  }
});

},{}],11:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  //SideMenuListOption
  getInitialState: function() {
    return {count: '~'}
  },

  componentDidMount: function() {
    // make ajax request to get each requests 
    /*
    list = {
      '__type'    : 'Pointer',
      'objectId'  : this.props.list.objectId,
      'className' : 'ProspectList', 
    }

    parse_headers = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb',
    }

    thiss = this;

    //console.log(this.props.list.name)
    $.ajax({
      url:'https://api.parse.com/1/classes/Prospects',
      type:'GET',
      headers:parse_headers,
      data: 'where={"lists":'+JSON.stringify(list)+'}&count=1',
      success: function(res) {
        thiss.setState({count: res.count})
      },
      error: function(err) {
        console.log(err)
      }
    })
    */
  },

  changeList: function() {
    this.props.changeList(this.props.list.name, this.props.list.objectId)
  },

  render: function() {
    listName = this.props.list.name
    propsCount = this.props.count
    count = (typeof(propsCount)== "undefined") ? this.state.count : propsCount

    //console.log(this.props.iconType)
    icon = ""
    if(this.props.iconType == "archive"){
      icon = React.DOM.i({className: "fa fa-archive"})
    } else if(this.props.iconType == "users"){
      icon = React.DOM.i({className: "fa fa-user"})
    } else if(this.props.iconType == "wifi"){
      icon = React.DOM.i({className: "fa fa-wifi"})
    }


    countStyle = (this.props.hideCount) ? {'display':'none'} : {backgroundColor:'#999',float:'right',marginTop:'1px'}
    return (
      React.DOM.button({type: "button", 
              onClick: this.changeList, 
              className: "list-names btn btn-default"}, 
              icon, 
              " ", 
              listName, 
              React.DOM.span({style: countStyle, 
                className: "badge badge-default"}, this.props.list.count)
      )
    );
  }
});


},{}]},{},[6])
//# sourceMappingURL=data:application/json;base64,
