/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // TimelineDayElement
  // TODO
  // - add prospect list progression
  // - add scheduled followup
  //
  getInitialState: function() {
    // 
    return {
      followupCompleted: 0,
    }
  },

  addFollowup: function() {
    this.props.addFollowup(this.props.dayCount)
  },

  render: function() {
    if(this.props.addTemplateMode) {
      mode = EditTemplate({addFollowup: this.props.addFollowup, 
                           saveFollowup: this.props.saveFollowup, 
                           removeFollowup: this.props.removeFollowup, 
                           dayCount: this.props.dayCount, 
                           templates: this.props.templates})
    } else {
      mode = TemplateFollowup({currentTemplate: this.props.currentTemplate, 
                               editFollowup: this.props.editFollowup, 
                               dayCount: this.props.dayCount, 
                               currentBatch: this.props.currentBatch, 
                               hasBatch: typeof(this.props.batchCount) != "undefined" && this.props.batchCount > 0, 
                               setCurrentBatch: this.props.setCurrentBatch, 
                               dayCount: this.props.dayCount, 
                               removeFollowup: this.props.removeFollowup, 
                               setCurrentTemplate: this.props.setCurrentTemplate})
    }
    if(this.props.alreadySent) {
      mode = FollowupCompleted({currentTemplate: this.props.currentTemplate})
    }

    mode = (this.props.elementType) ? "" : mode
    addFollowup = (this.props.elementType) ? this.addFollowup : ""
    if(typeof(this.props.batchCount) != "undefined")
      batchStage = BatchStage({currentBatch: this.props.currentBatch, 
                               newProspects: this.props.newProspects, 
                               prospectListCount: this.props.prospectListCount, 
                               batchCount: this.props.batchCount, 
                               hasScheduledEmail: mode != "", 
                               dayCount: this.props.dayCount})
    else
      batchStage = ""

    dayCount = (this.props.dayCount != 0.5) ? "D"+this.props.dayCount : ""

    return (
      React.DOM.div(null, 
        React.DOM.div({onClick: addFollowup, className: "day", 'data-trigger': "manual"}, 
          dayCount
        ), 
        mode, batchStage
      )
    )
  },

  setCurrentTemplate: function(template) {
    this.props.setCurrentTemplate(template)
  }
});

var FollowupCompleted = React.createClass({displayName: 'FollowupCompleted',
  render: function() {
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:130,display:'inline-block'}}, 
          React.DOM.i({className: "fa fa-file-text-o"}), "  ", 
          (this.props.currentTemplate) ? this.props.currentTemplate.name : ""
        ), 
        React.DOM.button({className: "win-btn btn btn-success btn-xs disabled", 
                'data-target': ".bs-sendEmail-modal-lg", 
                onClick: this.setCurrentTemplate, 
                'data-toggle': "modal"}, 
          React.DOM.i({className: "fa fa-check"}), " Sent"), " ", 
        React.DOM.button({onClick: this.editFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-pencil"})), " ", 
        React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-trash-o"}))
      )
                                         )
  }
})

var TemplateFollowup = React.createClass({displayName: 'TemplateFollowup',
  // EditMode False

  setCurrentTemplate: function() {
    this.props.setCurrentTemplate(this.props.currentTemplate)
    // setCurrentBatch
    this.props.setCurrentBatch(this.props.currentBatch)
    $('.bs-sendEmail-modal-lg').modal()
  },

  waitForBatch: function() {
    alertify.log("You must wait for a batch!");
  },

  render: function() {
    trash = (this.props.dayCount == 0) ?  React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-trash-o"})) : React.DOM.button({onClick: this.removeFollowup, className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-trash-o"})) 
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:130,display:'inline-block'}}, 
          React.DOM.i({className: "fa fa-file-text-o"}), "  ", 
          (this.props.currentTemplate) ? this.props.currentTemplate.name : ""
        ), 
        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
          onClick: (this.props.hasBatch) ? this.setCurrentTemplate : this.waitForBatch, 
                'data-toggle': "modal"}, 
          React.DOM.i({className: "fa fa-paper-plane"}), " Send"), " ", 
        React.DOM.button({onClick: this.editFollowup, 
                className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-pencil"})), " ", 
        trash
      )
    );
  },

  editFollowup: function(e) { 
    e.preventDefault()
    console.log(this.props.dayCount)
    this.props.editFollowup(this.props.dayCount)
  },

  removeFollowup: function() {
    console.log('remove')
    this.props.removeFollowup(this.props.dayCount)
  }
});

var BatchStage = React.createClass({displayName: 'BatchStage',
  // Different Stages of People Added to Prospect List
  getInitialState: function() {
    return {
      initialBatchCount: this.props.batchCount
    }
  },

  componentDidMount: function() {
    // state
    //console.debug('INSIDE BATCH '+this.props.dayCount)
    console.debug(this.props.currentBatch)
    _batches = appConfig.pointer('ProspectBatch', this.props.currentBatch)
    if(this.props.batchCount == "~") {
      // Why doesnt this work 
      var thissss = this;
      console.debug('INSIDE BATCH '+thiss.props.dayCount)
      console.debug(_batches)
      $.ajax({
        url:'https://api.parse.com/1/classes/Prospect',
        batches: _batches,
        data: {
          where: JSON.stringify({
            batches: _batches
          }),
          count: true,
          limit:1000,
        },
        headers: appConfig.headers,
        success: function(res) { 
          //console.debug('SUCCESS GET COUNT ' + res.count)
          //console.debug(res.results) 
          thissss.setState({initialBatchCount: res.count})
        },
        error: function(err) { 
          thissss.setState({initialBatchCount: 0 })
        }
      })
    }
  },

  componentWillReceiveProps: function(nextProps) {
    if(this.props.dayCount == 0)
      this.setState({ initialBatchCount: nextProps.batchCount })
  },


  render: function() {
    if(this.props.hasScheduledEmail)
      batchStageStyle = {top:-42, left:6}
    else
      batchStageStyle = {}

    if(this.props.dayCount == 0.5)
      batchStageStyle.left = 7

    //console.log('BATCH STAGE')
    //console.log(this.props)
    //console.debug(this.props.currentBatch)                                                           

    return (
      React.DOM.div({className: "followup-placement arrow_box tmp", style: batchStageStyle}, 
        React.DOM.span({className: "label label-primary"}, 
          React.DOM.i({className: "fa fa-user"}), " ", 
          this.state.initialBatchCount
        ), " ", 
        React.DOM.h6({style: {display:'inline-block'}}, 
          "prospects in the sales cycle.")
      )
    );
  }
});

var EditTemplate = React.createClass({displayName: 'EditTemplate',
  // Edit Mode - True
  render: function() {
    options = []
    for(i=0;i< this.props.templates.length; i++) {
      options.push( React.DOM.option(null, this.props.templates[i].name))
    }
    trash = (this.props.dayCount == 0) ?  React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-trash-o"})) : React.DOM.button({onClick: this.removeFollowup, className: "win-btn btn btn-default btn-xs"}, " ", React.DOM.i({className: "fa fa-trash-o"})) 
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:55,display:'inline-block'}, 
            className: "text-muted"}, 
          "Choose :"
        ), 
        React.DOM.select({className: "form-control input-sm", 
                id: "chooseTemplateForFollowup", 
                style: {display:'inline-block',width:127,marginRight:5}}, 
          options
        ), 

        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
                onClick: this.saveFollowup, 
                style: {marginRight:5}}, 
          React.DOM.i({className: "fa fa-check"})), 
        trash
      )
    )
  },

  saveFollowup: function(e) {
    //get template from currentTemplate
    e.preventDefault()
    chosenTemplate = $('#chooseTemplateForFollowup').val()
    console.log(chosenTemplate)
    for(i=0;i< this.props.templates.length; i++){
      if(this.props.templates[i].name == chosenTemplate){
        chosenTemplate = this.props.templates[i]
        break
      }
    }
    console.log(chosenTemplate)
    
    this.props.saveFollowup(this.props.dayCount, chosenTemplate)
  },

  removeFollowup: function(day) {
    this.props.removeFollowup(this.props.dayCount)
  },
});

