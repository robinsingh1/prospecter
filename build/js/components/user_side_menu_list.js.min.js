(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  //SideMenuListOption
  getInitialState: function() {
    return {count: '~'}
  },

  componentDidMount: function() {
    // make ajax request to get each requests 
    /*
    list = {
      '__type'    : 'Pointer',
      'objectId'  : this.props.list.objectId,
      'className' : 'ProspectList', 
    }

    parse_headers = {
      'X-Parse-Application-Id'  : 'N85QOkteEEQkuZVJKAvt8MVes0sjG6qNpEGqQFVJ', 
      'X-Parse-REST-API-Key'    : 'VN6EwVyBZwO1uphsBPsau8t7JQRp00UM3KYsiiQb',
    }

    thiss = this;

    //console.log(this.props.list.name)
    $.ajax({
      url:'https://api.parse.com/1/classes/Prospects',
      type:'GET',
      headers:parse_headers,
      data: 'where={"lists":'+JSON.stringify(list)+'}&count=1',
      success: function(res) {
        thiss.setState({count: res.count})
      },
      error: function(err) {
        console.log(err)
      }
    })
    */
  },

  changeList: function() {
    this.props.changeList(this.props.list.name, this.props.list.objectId)
  },

  render: function() {
    listName = this.props.list.name
    propsCount = this.props.count
    count = (typeof(propsCount)== "undefined") ? this.state.count : propsCount

    //console.log(this.props.iconType)
    icon = ""
    if(this.props.iconType == "archive"){
      icon = React.DOM.i({className: "fa fa-archive"})
    } else if(this.props.iconType == "users"){
      icon = React.DOM.i({className: "fa fa-user"})
    } else if(this.props.iconType == "wifi"){
      icon = React.DOM.i({className: "fa fa-wifi"})
    } else if(this.props.iconType == "cloudDownload"){
      icon = React.DOM.i({className: "fa fa-cloud-download"})
    }


    countStyle = (this.props.hideCount) ? {'display':'none'} : {backgroundColor:'#999',float:'right',marginTop:'1px'}
    return (
      React.DOM.button({type: "button", 
              onClick: this.changeList, 
              className: "list-names btn btn-default"}, 
              icon, 
              "Â ", 
              listName, 
              React.DOM.span({style: countStyle, 
                className: "badge badge-default"}, this.props.list.count)
      )
    );
  }
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2Jpbi9Qcm9qZWN0cy9wcm9zcGVjdGVyL3Byb3NwZWN0ZXItcGFyc2UvZGV2L25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy9yb2Jpbi9Qcm9qZWN0cy9wcm9zcGVjdGVyL3Byb3NwZWN0ZXItcGFyc2UvZGV2L2J1aWxkL2pzL2NvbXBvbmVudHMvdXNlcl9zaWRlX21lbnVfbGlzdC5qcy5taW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyoqIEBqc3ggUmVhY3QuRE9NICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe2Rpc3BsYXlOYW1lOiAnZXhwb3J0cycsXG4gIC8vU2lkZU1lbnVMaXN0T3B0aW9uXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtjb3VudDogJ34nfVxuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAvLyBtYWtlIGFqYXggcmVxdWVzdCB0byBnZXQgZWFjaCByZXF1ZXN0cyBcbiAgICAvKlxuICAgIGxpc3QgPSB7XG4gICAgICAnX190eXBlJyAgICA6ICdQb2ludGVyJyxcbiAgICAgICdvYmplY3RJZCcgIDogdGhpcy5wcm9wcy5saXN0Lm9iamVjdElkLFxuICAgICAgJ2NsYXNzTmFtZScgOiAnUHJvc3BlY3RMaXN0JywgXG4gICAgfVxuXG4gICAgcGFyc2VfaGVhZGVycyA9IHtcbiAgICAgICdYLVBhcnNlLUFwcGxpY2F0aW9uLUlkJyAgOiAnTjg1UU9rdGVFRVFrdVpWSktBdnQ4TVZlczBzakc2cU5wRUdxUUZWSicsIFxuICAgICAgJ1gtUGFyc2UtUkVTVC1BUEktS2V5JyAgICA6ICdWTjZFd1Z5Qlp3TzF1cGhzQlBzYXU4dDdKUVJwMDBVTTNLWXNpaVFiJyxcbiAgICB9XG5cbiAgICB0aGlzcyA9IHRoaXM7XG5cbiAgICAvL2NvbnNvbGUubG9nKHRoaXMucHJvcHMubGlzdC5uYW1lKVxuICAgICQuYWpheCh7XG4gICAgICB1cmw6J2h0dHBzOi8vYXBpLnBhcnNlLmNvbS8xL2NsYXNzZXMvUHJvc3BlY3RzJyxcbiAgICAgIHR5cGU6J0dFVCcsXG4gICAgICBoZWFkZXJzOnBhcnNlX2hlYWRlcnMsXG4gICAgICBkYXRhOiAnd2hlcmU9e1wibGlzdHNcIjonK0pTT04uc3RyaW5naWZ5KGxpc3QpKyd9JmNvdW50PTEnLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIHRoaXNzLnNldFN0YXRlKHtjb3VudDogcmVzLmNvdW50fSlcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgIH1cbiAgICB9KVxuICAgICovXG4gIH0sXG5cbiAgY2hhbmdlTGlzdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wcm9wcy5jaGFuZ2VMaXN0KHRoaXMucHJvcHMubGlzdC5uYW1lLCB0aGlzLnByb3BzLmxpc3Qub2JqZWN0SWQpXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICBsaXN0TmFtZSA9IHRoaXMucHJvcHMubGlzdC5uYW1lXG4gICAgcHJvcHNDb3VudCA9IHRoaXMucHJvcHMuY291bnRcbiAgICBjb3VudCA9ICh0eXBlb2YocHJvcHNDb3VudCk9PSBcInVuZGVmaW5lZFwiKSA/IHRoaXMuc3RhdGUuY291bnQgOiBwcm9wc0NvdW50XG5cbiAgICAvL2NvbnNvbGUubG9nKHRoaXMucHJvcHMuaWNvblR5cGUpXG4gICAgaWNvbiA9IFwiXCJcbiAgICBpZih0aGlzLnByb3BzLmljb25UeXBlID09IFwiYXJjaGl2ZVwiKXtcbiAgICAgIGljb24gPSBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLWFyY2hpdmVcIn0pXG4gICAgfSBlbHNlIGlmKHRoaXMucHJvcHMuaWNvblR5cGUgPT0gXCJ1c2Vyc1wiKXtcbiAgICAgIGljb24gPSBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLXVzZXJcIn0pXG4gICAgfSBlbHNlIGlmKHRoaXMucHJvcHMuaWNvblR5cGUgPT0gXCJ3aWZpXCIpe1xuICAgICAgaWNvbiA9IFJlYWN0LkRPTS5pKHtjbGFzc05hbWU6IFwiZmEgZmEtd2lmaVwifSlcbiAgICB9IGVsc2UgaWYodGhpcy5wcm9wcy5pY29uVHlwZSA9PSBcImNsb3VkRG93bmxvYWRcIil7XG4gICAgICBpY29uID0gUmVhY3QuRE9NLmkoe2NsYXNzTmFtZTogXCJmYSBmYS1jbG91ZC1kb3dubG9hZFwifSlcbiAgICB9XG5cblxuICAgIGNvdW50U3R5bGUgPSAodGhpcy5wcm9wcy5oaWRlQ291bnQpID8geydkaXNwbGF5Jzonbm9uZSd9IDoge2JhY2tncm91bmRDb2xvcjonIzk5OScsZmxvYXQ6J3JpZ2h0JyxtYXJnaW5Ub3A6JzFweCd9XG4gICAgcmV0dXJuIChcbiAgICAgIFJlYWN0LkRPTS5idXR0b24oe3R5cGU6IFwiYnV0dG9uXCIsIFxuICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLmNoYW5nZUxpc3QsIFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IFwibGlzdC1uYW1lcyBidG4gYnRuLWRlZmF1bHRcIn0sIFxuICAgICAgICAgICAgICBpY29uLCBcbiAgICAgICAgICAgICAgXCLCoFwiLCBcbiAgICAgICAgICAgICAgbGlzdE5hbWUsIFxuICAgICAgICAgICAgICBSZWFjdC5ET00uc3Bhbih7c3R5bGU6IGNvdW50U3R5bGUsIFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJiYWRnZSBiYWRnZS1kZWZhdWx0XCJ9LCB0aGlzLnByb3BzLmxpc3QuY291bnQpXG4gICAgICApXG4gICAgKTtcbiAgfVxufSk7XG5cbiJdfQ==
