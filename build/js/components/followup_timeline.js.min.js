(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */
var SendEmailModal = require('./send_email_modal.js.min.js')
var TimelineDayElement = require('./timeline_day_element.js.min.js')

module.exports = React.createClass({displayName: 'exports',
  // FollowupTimeline
  getInitialState: function() {
    initialFollowups = this.props.initialFollowups
    initialFollowups = (initialFollowups) ? initialFollowups : []

    return {
      followups: initialFollowups,
      loading: false,
      currentTemplate:''
    }
  },

  componentDidMount: function() {
    thiss = this;
    $('.day').tooltip({
      placement: 'right',
      title:'+ Add a follow-up'
    })
    // Followups that belong to campaign
     company = JSON.stringify(JSON.parse(localStorage.currentUser).company)
     currentCampaign = {
       '__type': 'Pointer',
       'className':'Campaign',
       'objectId':this.props.currentCampaign.objectId
     }
     currentCampaign = JSON.stringify(currentCampaign)
     //qry = 'where={"company":'+company+',"campaign":'+currentCampaign+'}&include=template'
     qry = 'where={"campaign":'+currentCampaign+'}&include=template'
     //qry = 'where={"campaign":'+currentCampaign+'}'
     $.ajax({
       url:'https://api.parse.com/1/classes/Followup',
       type:'GET',
       headers: appConfig.headers,
       data: qry,
       success: function(res) {
         console.log('followup timeline')
         console.log(res.results)
       },
       error: function(err) {
         console.log('error')
         console.log(err)
       }
     })
  },
  
  render: function() {
    batches =  _.countBy(this.props.prospects, 
                      function(prospect) { return prospect.last_contacted })

    timelineElements = []
    followups = (this.state.followups) ? this.state.followups : []
    console.log(followups)
    for(i=0;i< 31;i++){
      batchCount = (batches[i]) ? batches[i] : 0
      
      addTemplateMode = false; 
      currentTemplate = false;
      elementType = false
      for(ii=0;ii< followups.length; ii++){
        // TODO - Replace with underscore method
        //console.log('FOLLOWUPS ERROR')
        //console.log(followups)
        elementType = i == followups[ii].day
        if(elementType) {
          addTemplateMode = (followups[ii].addTemplateMode) ? true : false
          currentTemplate = followups[ii].template
          break
        }
      }

      timelineElements.push(TimelineDayElement({
                              dayCount: i, 
                              templates: this.props.templates, 
                              currentTemplate: currentTemplate, 
                              batchCount: batchCount, 
                              addTemplateMode: addTemplateMode, 
                              elementType: !elementType, 
                              addFollowup: this.addFollowup, 
                              editFollowup: this.editFollowup, 
                              saveFollowup: this.saveFollowup, 
                              removeFollowup: this.removeFollowup, 
                              setCurrentTemplate: this.setCurrentTemplate}))
    }
    return (
      React.DOM.div(null, 
        React.DOM.div({className: "timeline", 
             style: {height:'100%',backgroundColor:'rgb(90, 107, 119)',
                     width:5,marginTop:-35}}, 
             timelineElements
        ), 
        SendEmailModal({prospects: this.props.prospects, 
                        currentTemplate: this.state.currentTemplate})
      )
    );
  },

  createFollowup: function() {
    //
  },         

  addFollowup: function(day) {
    //console.log('called template edit menu')
    followups = this.state.followups
    followups.push({addTemplateMode: true, day: day})
    this.setState({
      followups: followups
    })
  },

  editFollowup: function(day) {
    // find template set editmode is false
    for(i=0;i< this.state.followups.length; i++){
      if(this.state.followups[i].day == day){
        break
      }
    }

    followups = this.state.followups
    followups[i].addTemplateMode = true
    this.setState({followups: followups})
  },

  saveFollowup: function(day, chosenTemplate) {
    new_followups = this.state.followups
    new_followups[day].addTemplateMode = false
    new_followups[day].template = chosenTemplate

    this.setState({followups: new_followups})

    if(new_followups[day].objectId){
      url = "/"+new_followups[i].objectId; type="PUT"

      data = {template:{
        __type:'Pointer',
        className:'Template',
        objectId: chosenTemplate.objectId
      }}
    } else {
      url = ""; type="POST";

      data = {
        day: day,
        campaign: {
          __type: 'Pointer',
          className:'Campaign',
          objectId: this.props.currentCampaign.objectId
        },
        template: {
          __type: 'Pointer',
          className:'Template',
          objectId:chosenTemplate.objectId,
        }
      }
    }

    thiss = this;
    $.ajax({
      url:'https://api.parse.com/1/classes/Followup',
      type:type,
      data:JSON.stringify(data),
      headers:appConfig.headers,
      success: function(res) {
        
        new_followups[day].objectId = res.objectId
        thiss.setState({followups: new_followups})

        console.log(res)
        $.ajax({
          url:'https://api.parse.com/1/classes/Campaign/'+thiss.props.currentCampaign.objectId,
          type:'PUT',
          data:JSON.stringify({followups: {
            __op: 'AddUnique',
            objects:[{
              __type:'Pointer', 
              className:'Followup',
              objectId:res.objectId
            }]
          }}),
          headers:appConfig.headers,
          success: function() {
          },
          error: function() {
          }
        })
      },
      error: function() {

      },
    })
  },

  removeFollowup: function(day) {
    followups = []
    for(i=0;i< this.state.followups.length;i++)
      if(this.state.followups[i].day != day)
        followups.push(this.state.followups[i])
      
    for(i=0;i< this.state.followups.length;i++)
      if(this.state.followups[i].day == day)
        break
    
    this.setState({followups: followups}) 
    id = this.state.followups[i]

    thiss = this;
    if(id) {
      id = id.objectId
      $.ajax({
        url:'https://api.parse.com/1/classes/Followup/'+id,
        headers:appConfig.headers,
        type:'DELETE',
        success: function(res) {
          console.log(res)
        }
      })

     console.log('REMOVE ARRAY')
      $.ajax({
        url:'https://api.parse.com/1/classes/Campaign/'+thiss.props.currentCampaign.objectId,
        headers:appConfig.headers,
        type:'PUT',
        data: JSON.stringify({
          followups: {
            __op : 'Remove',
            objects: [{
              __type: 'Pointer',
              className: 'Followup',
              objectId: id
            }]
          }
        }),
        success: function(res){
          console.log(res)
        },
        error: function() {
        }
      })
    }
  },

  setCurrentTemplate: function(template) {
    this.setState({currentTemplate: template })
  }
});



},{"./send_email_modal.js.min.js":2,"./timeline_day_element.js.min.js":3}],2:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      currentProspect: 0,
    }
  },
  //SendEmailModal
  render: function() {
    //console.log(this.props.currentTemplate)
    prospect = this.props.prospects[this.state.currentProspect]
    prospect = (prospect) ? prospect : {'name':'','email':''}
    //console.log(prospect)
    prospects = []
    for(i=0; i< this.props.prospects.length; i++){
      prospects.push(UserPlaceHolder({prospect: this.props.prospects[i]}))
    }
    email = (prospect.email) ? prospect.email.toLowerCase() : ""
    return (
          React.DOM.div({className: "modal fade bs-sendEmail-modal-lg", tabIndex: "-1", role: "dialog", 'aria-labelledby': "mySmallModalLabel", 'aria-hidden': "true", id: "sendEmailModal", style: {top:'10px'}}, 
            React.DOM.div({className: "modal-dialog modal-lg"}, 
              React.DOM.div({className: "modal-content"}, 
                React.DOM.div({className: "modal-header"}, 
                  React.DOM.button({type: "button", className: "close", 'data-dismiss': "modal"}, React.DOM.span({'aria-hidden': "true"}, "×"), 
                    React.DOM.span({className: "sr-only"}, "Close")), 
        React.DOM.button({type: "button", 
                style: {float:'right'}, 
                className: "btn btn-primary btn-sm"}, 
                React.DOM.i({className: "fa fa-paper-plane"}), " " + ' ' +
                "Send Email"), 
        React.DOM.button({type: "button", style: {marginRight:10, float:'right'}, 
                className: "btn btn-default btn-sm", 'data-dismiss': "modal"}, "Close"), 
                  React.DOM.h4({className: "modal-title", id: "myModalLabel"}, 
                    React.DOM.i({className: "fa fa-envelope"}), "  Send Email" + ' ' +
                    "  ", 
                    React.DOM.small(null, "("+this.props.prospects.length+")")
                  )
                ), 
                React.DOM.div({className: "modal-body", style: {paddingTop:5}}, 
                  React.DOM.h4(null, "People"), 
                  
                  React.DOM.div({className: "prospect-container"}, 
                    prospects
                  ), 
                  React.DOM.br(null), 
                  React.DOM.h4({style: {display:'inline-block'}}, "Emails    ", 
                    React.DOM.small(null, (this.state.currentProspect+1)+' of '+this.props.prospects.length)), 
                  "   ", 
                  React.DOM.a({href: "javascript:", 
              className: (this.state.currentProspect == 0 ) ? "btn disabled" : "btn", 
                    onClick: this.previousProspect}, React.DOM.i({className: "fa fa-arrow-left"})), 
                  React.DOM.a({href: "javascript:", 
            className: (this.state.currentProspect == 135 ) ? "btn disabled" : "btn", 
                    onClick: this.nextProspect}, React.DOM.i({className: "fa fa-arrow-right"})), 

                  React.DOM.div(null, 

React.DOM.ul({className: "list-group email-holder", style: {borderTop:'solid 1px #eee'}}, 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "To:  "), 
    prospect.name + " - " + email
  ), 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "Subject:  "), " ", this.props.currentTemplate.subject
  ), 
  React.DOM.li({className: "list-group-item body"})
)
  
                  )

                ), 

      React.DOM.div({className: "modal-footer", style: {display:'none'}}, 
        React.DOM.button({type: "button", 
                className: "btn btn-default", 'data-dismiss': "modal"}, "Close"), 
        React.DOM.button({type: "button", 
                className: "btn btn-primary"}, "Send Email")
      )
              )
            )
          )
    );
  },

  previousProspect: function() {
    this.setState({currentProspect: this.state.currentProspect-1 })
  },

  nextProspect: function() {
    this.setState({currentProspect: this.state.currentProspect+1 })
  },

  parseTemplate: function(templateBody) {
    first_name = prospect.name.split(' ')[0]
    //hiring_signal = prospect.signals

    signals = (prospect.signals) ? prospect.signals[0] : ""
    templateBody = Mustache.render(templateBody, {
      hiring_signal: signals,
      first_name: prospect.name.split(' ')[0]
    })

    console.log(templateBody)
      
    return templateBody
  },

  componentDidUpdate: function() {
    //console.log(this.props.currentTemplate)
    parsedTemplate = this.parseTemplate(this.props.currentTemplate.body)
    
    //$('.body').html(this.props.currentTemplate.body)
    $('.body').html(parsedTemplate)
  }
});

var UserPlaceHolder = React.createClass({displayName: 'UserPlaceHolder',
  render: function() {
    return (
        React.DOM.div({className: "btn-group", style: {marginRight:5,marginBottom:5}}, 
          React.DOM.div({className: "btn-group"}, 
            React.DOM.button({type: "button", 
                    className: "btn btn-success btn-sm"}, 
              React.DOM.i({className: "fa fa-user"}), "  ", 
              (this.props.prospect) ? this.props.prospect.name : ""
            )
          ), 
          React.DOM.button({type: "button", className: "btn btn-success btn-sm"}, 
            React.DOM.i({className: "fa fa-trash-o"})
          )
        )
    )
  }
});

},{}],3:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // TimelineDayElement
  // TODO
  // - add prospect list progression
  // - add scheduled followup
  //

  addFollowup: function() {
    this.props.addFollowup(this.props.dayCount)
  },

  render: function() {
    batchCount = this.props.batchCount
    batchStage = (batchCount) ? BatchStage({batchCount: this.props.batchCount}) : ""

    if(this.props.addTemplateMode) {
      mode = EditTemplate({addFollowup: this.props.addFollowup, 
                           saveFollowup: this.props.saveFollowup, 
                           removeFollowup: this.props.removeFollowup, 
                           dayCount: this.props.dayCount, 
                           templates: this.props.templates})
    } else {
      mode = TemplateFollowup({currentTemplate: this.props.currentTemplate, 
                               editFollowup: this.props.editFollowup, 
                               dayCount: this.props.dayCount, 
                               removeFollowup: this.props.removeFollowup, 
                               setCurrentTemplate: this.props.setCurrentTemplate})
    }
    mode = (this.props.elementType) ? "" : mode
    addFollowup = (this.props.elementType) ? this.addFollowup : ""

    return (
      React.DOM.div(null, 
        React.DOM.div({onClick: addFollowup, className: "day", 'data-trigger': "manual"}, 
          "D"+this.props.dayCount
        ), 
        batchStage, mode
      )
    )
  },

  setCurrentTemplate: function(template) {
    this.props.setCurrentTemplate(template)
  }
});

var TemplateFollowup = React.createClass({displayName: 'TemplateFollowup',
  // EditMode False

  setCurrentTemplate: function() {
    this.props.setCurrentTemplate(this.props.currentTemplate)
  },

  render: function() {
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:130,display:'inline-block'}}, 
          React.DOM.i({className: "fa fa-file-text-o"}), "  ", 
          (this.props.currentTemplate) ? this.props.currentTemplate.name : ""
        ), 
        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
                'data-target': ".bs-sendEmail-modal-lg", 
                onClick: this.setCurrentTemplate, 
                'data-toggle': "modal"}, 
          React.DOM.i({className: "fa fa-paper-plane"}), " Send"), " ", 
        React.DOM.button({onClick: this.editFollowup, 
                className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-pencil"})), " ", 
        React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-trash-o"}))
      )
    );
  },

  editFollowup: function(e) { 
    e.preventDefault()
    console.log(this.props.dayCount)
    this.props.editFollowup(this.props.dayCount)
  },

  removeFollowup: function() {
    console.log('remove')
    this.props.removeFollowup(this.props.dayCount)
  }
});

var BatchStage = React.createClass({displayName: 'BatchStage',
  // Different Stages of People Added to Prospect List
  render: function() {
    return (
      React.DOM.div({className: "followup-placement arrow_box tmp"}, 
        React.DOM.span({className: "badge"}, 
          this.props.batchCount
        ), " ", 
        React.DOM.h6({style: {display:'inline-block'}}, 
          "prospects in the sales cycle.")
      )
    );
  }
});

var EditTemplate = React.createClass({displayName: 'EditTemplate',
  // Edit Mode - True
  render: function() {
    options = []
    for(i=0;i< this.props.templates.length; i++) {
      options.push( React.DOM.option(null, this.props.templates[i].name))
    }
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:55,display:'inline-block'}, 
            className: "text-muted"}, 
          "Choose :"
        ), 
        React.DOM.select({className: "form-control input-sm", 
                id: "chooseTemplateForFollowup", 
                style: {display:'inline-block',width:127,marginRight:5}}, 
          options
        ), 

        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
                onClick: this.saveFollowup, 
                style: {marginRight:5}}, 
          React.DOM.i({className: "fa fa-check"})), 
        React.DOM.button({className: "win-btn btn btn-default btn-xs", 
                onClick: this.removeFollowup}, 
          React.DOM.i({className: "fa fa-trash-o"}))
      )
    )
  },

  saveFollowup: function(e) {
    //get template from currentTemplate
    e.preventDefault()
    chosenTemplate = $('#chooseTemplateForFollowup').val()
    console.log(chosenTemplate)
    for(i=0;i< this.props.templates.length; i++){
      if(this.props.templates[i].name == chosenTemplate){
        chosenTemplate = this.props.templates[i]
        break
      }
    }
    console.log(chosenTemplate)
    
    this.props.saveFollowup(this.props.dayCount, chosenTemplate)
  },

  removeFollowup: function(day) {
    this.props.removeFollowup(this.props.dayCount)
  },
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2Jpbi9Qcm9qZWN0cy9wcm9zcGVjdGVyL3Byb3NwZWN0ZXItcGFyc2UvZGV2L25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy9yb2Jpbi9Qcm9qZWN0cy9wcm9zcGVjdGVyL3Byb3NwZWN0ZXItcGFyc2UvZGV2L2J1aWxkL2pzL2NvbXBvbmVudHMvZm9sbG93dXBfdGltZWxpbmUuanMubWluLmpzIiwiL1VzZXJzL3JvYmluL1Byb2plY3RzL3Byb3NwZWN0ZXIvcHJvc3BlY3Rlci1wYXJzZS9kZXYvYnVpbGQvanMvY29tcG9uZW50cy9zZW5kX2VtYWlsX21vZGFsLmpzLm1pbi5qcyIsIi9Vc2Vycy9yb2Jpbi9Qcm9qZWN0cy9wcm9zcGVjdGVyL3Byb3NwZWN0ZXItcGFyc2UvZGV2L2J1aWxkL2pzL2NvbXBvbmVudHMvdGltZWxpbmVfZGF5X2VsZW1lbnQuanMubWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8qKiBAanN4IFJlYWN0LkRPTSAqL1xudmFyIFNlbmRFbWFpbE1vZGFsID0gcmVxdWlyZSgnLi9zZW5kX2VtYWlsX21vZGFsLmpzLm1pbi5qcycpXG52YXIgVGltZWxpbmVEYXlFbGVtZW50ID0gcmVxdWlyZSgnLi90aW1lbGluZV9kYXlfZWxlbWVudC5qcy5taW4uanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogJ2V4cG9ydHMnLFxuICAvLyBGb2xsb3d1cFRpbWVsaW5lXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgaW5pdGlhbEZvbGxvd3VwcyA9IHRoaXMucHJvcHMuaW5pdGlhbEZvbGxvd3Vwc1xuICAgIGluaXRpYWxGb2xsb3d1cHMgPSAoaW5pdGlhbEZvbGxvd3VwcykgPyBpbml0aWFsRm9sbG93dXBzIDogW11cblxuICAgIHJldHVybiB7XG4gICAgICBmb2xsb3d1cHM6IGluaXRpYWxGb2xsb3d1cHMsXG4gICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgIGN1cnJlbnRUZW1wbGF0ZTonJ1xuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgdGhpc3MgPSB0aGlzO1xuICAgICQoJy5kYXknKS50b29sdGlwKHtcbiAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICAgIHRpdGxlOicrIEFkZCBhIGZvbGxvdy11cCdcbiAgICB9KVxuICAgIC8vIEZvbGxvd3VwcyB0aGF0IGJlbG9uZyB0byBjYW1wYWlnblxuICAgICBjb21wYW55ID0gSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuY3VycmVudFVzZXIpLmNvbXBhbnkpXG4gICAgIGN1cnJlbnRDYW1wYWlnbiA9IHtcbiAgICAgICAnX190eXBlJzogJ1BvaW50ZXInLFxuICAgICAgICdjbGFzc05hbWUnOidDYW1wYWlnbicsXG4gICAgICAgJ29iamVjdElkJzp0aGlzLnByb3BzLmN1cnJlbnRDYW1wYWlnbi5vYmplY3RJZFxuICAgICB9XG4gICAgIGN1cnJlbnRDYW1wYWlnbiA9IEpTT04uc3RyaW5naWZ5KGN1cnJlbnRDYW1wYWlnbilcbiAgICAgLy9xcnkgPSAnd2hlcmU9e1wiY29tcGFueVwiOicrY29tcGFueSsnLFwiY2FtcGFpZ25cIjonK2N1cnJlbnRDYW1wYWlnbisnfSZpbmNsdWRlPXRlbXBsYXRlJ1xuICAgICBxcnkgPSAnd2hlcmU9e1wiY2FtcGFpZ25cIjonK2N1cnJlbnRDYW1wYWlnbisnfSZpbmNsdWRlPXRlbXBsYXRlJ1xuICAgICAvL3FyeSA9ICd3aGVyZT17XCJjYW1wYWlnblwiOicrY3VycmVudENhbXBhaWduKyd9J1xuICAgICAkLmFqYXgoe1xuICAgICAgIHVybDonaHR0cHM6Ly9hcGkucGFyc2UuY29tLzEvY2xhc3Nlcy9Gb2xsb3d1cCcsXG4gICAgICAgdHlwZTonR0VUJyxcbiAgICAgICBoZWFkZXJzOiBhcHBDb25maWcuaGVhZGVycyxcbiAgICAgICBkYXRhOiBxcnksXG4gICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICBjb25zb2xlLmxvZygnZm9sbG93dXAgdGltZWxpbmUnKVxuICAgICAgICAgY29uc29sZS5sb2cocmVzLnJlc3VsdHMpXG4gICAgICAgfSxcbiAgICAgICBlcnJvcjogZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICBjb25zb2xlLmxvZygnZXJyb3InKVxuICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgIH1cbiAgICAgfSlcbiAgfSxcbiAgXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgYmF0Y2hlcyA9ICBfLmNvdW50QnkodGhpcy5wcm9wcy5wcm9zcGVjdHMsIFxuICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHByb3NwZWN0KSB7IHJldHVybiBwcm9zcGVjdC5sYXN0X2NvbnRhY3RlZCB9KVxuXG4gICAgdGltZWxpbmVFbGVtZW50cyA9IFtdXG4gICAgZm9sbG93dXBzID0gKHRoaXMuc3RhdGUuZm9sbG93dXBzKSA/IHRoaXMuc3RhdGUuZm9sbG93dXBzIDogW11cbiAgICBjb25zb2xlLmxvZyhmb2xsb3d1cHMpXG4gICAgZm9yKGk9MDtpPCAzMTtpKyspe1xuICAgICAgYmF0Y2hDb3VudCA9IChiYXRjaGVzW2ldKSA/IGJhdGNoZXNbaV0gOiAwXG4gICAgICBcbiAgICAgIGFkZFRlbXBsYXRlTW9kZSA9IGZhbHNlOyBcbiAgICAgIGN1cnJlbnRUZW1wbGF0ZSA9IGZhbHNlO1xuICAgICAgZWxlbWVudFR5cGUgPSBmYWxzZVxuICAgICAgZm9yKGlpPTA7aWk8IGZvbGxvd3Vwcy5sZW5ndGg7IGlpKyspe1xuICAgICAgICAvLyBUT0RPIC0gUmVwbGFjZSB3aXRoIHVuZGVyc2NvcmUgbWV0aG9kXG4gICAgICAgIC8vY29uc29sZS5sb2coJ0ZPTExPV1VQUyBFUlJPUicpXG4gICAgICAgIC8vY29uc29sZS5sb2coZm9sbG93dXBzKVxuICAgICAgICBlbGVtZW50VHlwZSA9IGkgPT0gZm9sbG93dXBzW2lpXS5kYXlcbiAgICAgICAgaWYoZWxlbWVudFR5cGUpIHtcbiAgICAgICAgICBhZGRUZW1wbGF0ZU1vZGUgPSAoZm9sbG93dXBzW2lpXS5hZGRUZW1wbGF0ZU1vZGUpID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgY3VycmVudFRlbXBsYXRlID0gZm9sbG93dXBzW2lpXS50ZW1wbGF0ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGltZWxpbmVFbGVtZW50cy5wdXNoKFRpbWVsaW5lRGF5RWxlbWVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXlDb3VudDogaSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZXM6IHRoaXMucHJvcHMudGVtcGxhdGVzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUZW1wbGF0ZTogY3VycmVudFRlbXBsYXRlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhdGNoQ291bnQ6IGJhdGNoQ291bnQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkVGVtcGxhdGVNb2RlOiBhZGRUZW1wbGF0ZU1vZGUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICFlbGVtZW50VHlwZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRGb2xsb3d1cDogdGhpcy5hZGRGb2xsb3d1cCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0Rm9sbG93dXA6IHRoaXMuZWRpdEZvbGxvd3VwLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGb2xsb3d1cDogdGhpcy5zYXZlRm9sbG93dXAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRm9sbG93dXA6IHRoaXMucmVtb3ZlRm9sbG93dXAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudFRlbXBsYXRlOiB0aGlzLnNldEN1cnJlbnRUZW1wbGF0ZX0pKVxuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgUmVhY3QuRE9NLmRpdihudWxsLCBcbiAgICAgICAgUmVhY3QuRE9NLmRpdih7Y2xhc3NOYW1lOiBcInRpbWVsaW5lXCIsIFxuICAgICAgICAgICAgIHN0eWxlOiB7aGVpZ2h0OicxMDAlJyxiYWNrZ3JvdW5kQ29sb3I6J3JnYig5MCwgMTA3LCAxMTkpJyxcbiAgICAgICAgICAgICAgICAgICAgIHdpZHRoOjUsbWFyZ2luVG9wOi0zNX19LCBcbiAgICAgICAgICAgICB0aW1lbGluZUVsZW1lbnRzXG4gICAgICAgICksIFxuICAgICAgICBTZW5kRW1haWxNb2RhbCh7cHJvc3BlY3RzOiB0aGlzLnByb3BzLnByb3NwZWN0cywgXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGVtcGxhdGU6IHRoaXMuc3RhdGUuY3VycmVudFRlbXBsYXRlfSlcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIGNyZWF0ZUZvbGxvd3VwOiBmdW5jdGlvbigpIHtcbiAgICAvL1xuICB9LCAgICAgICAgIFxuXG4gIGFkZEZvbGxvd3VwOiBmdW5jdGlvbihkYXkpIHtcbiAgICAvL2NvbnNvbGUubG9nKCdjYWxsZWQgdGVtcGxhdGUgZWRpdCBtZW51JylcbiAgICBmb2xsb3d1cHMgPSB0aGlzLnN0YXRlLmZvbGxvd3Vwc1xuICAgIGZvbGxvd3Vwcy5wdXNoKHthZGRUZW1wbGF0ZU1vZGU6IHRydWUsIGRheTogZGF5fSlcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGZvbGxvd3VwczogZm9sbG93dXBzXG4gICAgfSlcbiAgfSxcblxuICBlZGl0Rm9sbG93dXA6IGZ1bmN0aW9uKGRheSkge1xuICAgIC8vIGZpbmQgdGVtcGxhdGUgc2V0IGVkaXRtb2RlIGlzIGZhbHNlXG4gICAgZm9yKGk9MDtpPCB0aGlzLnN0YXRlLmZvbGxvd3Vwcy5sZW5ndGg7IGkrKyl7XG4gICAgICBpZih0aGlzLnN0YXRlLmZvbGxvd3Vwc1tpXS5kYXkgPT0gZGF5KXtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb2xsb3d1cHMgPSB0aGlzLnN0YXRlLmZvbGxvd3Vwc1xuICAgIGZvbGxvd3Vwc1tpXS5hZGRUZW1wbGF0ZU1vZGUgPSB0cnVlXG4gICAgdGhpcy5zZXRTdGF0ZSh7Zm9sbG93dXBzOiBmb2xsb3d1cHN9KVxuICB9LFxuXG4gIHNhdmVGb2xsb3d1cDogZnVuY3Rpb24oZGF5LCBjaG9zZW5UZW1wbGF0ZSkge1xuICAgIG5ld19mb2xsb3d1cHMgPSB0aGlzLnN0YXRlLmZvbGxvd3Vwc1xuICAgIG5ld19mb2xsb3d1cHNbZGF5XS5hZGRUZW1wbGF0ZU1vZGUgPSBmYWxzZVxuICAgIG5ld19mb2xsb3d1cHNbZGF5XS50ZW1wbGF0ZSA9IGNob3NlblRlbXBsYXRlXG5cbiAgICB0aGlzLnNldFN0YXRlKHtmb2xsb3d1cHM6IG5ld19mb2xsb3d1cHN9KVxuXG4gICAgaWYobmV3X2ZvbGxvd3Vwc1tkYXldLm9iamVjdElkKXtcbiAgICAgIHVybCA9IFwiL1wiK25ld19mb2xsb3d1cHNbaV0ub2JqZWN0SWQ7IHR5cGU9XCJQVVRcIlxuXG4gICAgICBkYXRhID0ge3RlbXBsYXRlOntcbiAgICAgICAgX190eXBlOidQb2ludGVyJyxcbiAgICAgICAgY2xhc3NOYW1lOidUZW1wbGF0ZScsXG4gICAgICAgIG9iamVjdElkOiBjaG9zZW5UZW1wbGF0ZS5vYmplY3RJZFxuICAgICAgfX1cbiAgICB9IGVsc2Uge1xuICAgICAgdXJsID0gXCJcIjsgdHlwZT1cIlBPU1RcIjtcblxuICAgICAgZGF0YSA9IHtcbiAgICAgICAgZGF5OiBkYXksXG4gICAgICAgIGNhbXBhaWduOiB7XG4gICAgICAgICAgX190eXBlOiAnUG9pbnRlcicsXG4gICAgICAgICAgY2xhc3NOYW1lOidDYW1wYWlnbicsXG4gICAgICAgICAgb2JqZWN0SWQ6IHRoaXMucHJvcHMuY3VycmVudENhbXBhaWduLm9iamVjdElkXG4gICAgICAgIH0sXG4gICAgICAgIHRlbXBsYXRlOiB7XG4gICAgICAgICAgX190eXBlOiAnUG9pbnRlcicsXG4gICAgICAgICAgY2xhc3NOYW1lOidUZW1wbGF0ZScsXG4gICAgICAgICAgb2JqZWN0SWQ6Y2hvc2VuVGVtcGxhdGUub2JqZWN0SWQsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzcyA9IHRoaXM7XG4gICAgJC5hamF4KHtcbiAgICAgIHVybDonaHR0cHM6Ly9hcGkucGFyc2UuY29tLzEvY2xhc3Nlcy9Gb2xsb3d1cCcsXG4gICAgICB0eXBlOnR5cGUsXG4gICAgICBkYXRhOkpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgaGVhZGVyczphcHBDb25maWcuaGVhZGVycyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlcykge1xuICAgICAgICBcbiAgICAgICAgbmV3X2ZvbGxvd3Vwc1tkYXldLm9iamVjdElkID0gcmVzLm9iamVjdElkXG4gICAgICAgIHRoaXNzLnNldFN0YXRlKHtmb2xsb3d1cHM6IG5ld19mb2xsb3d1cHN9KVxuXG4gICAgICAgIGNvbnNvbGUubG9nKHJlcylcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICB1cmw6J2h0dHBzOi8vYXBpLnBhcnNlLmNvbS8xL2NsYXNzZXMvQ2FtcGFpZ24vJyt0aGlzcy5wcm9wcy5jdXJyZW50Q2FtcGFpZ24ub2JqZWN0SWQsXG4gICAgICAgICAgdHlwZTonUFVUJyxcbiAgICAgICAgICBkYXRhOkpTT04uc3RyaW5naWZ5KHtmb2xsb3d1cHM6IHtcbiAgICAgICAgICAgIF9fb3A6ICdBZGRVbmlxdWUnLFxuICAgICAgICAgICAgb2JqZWN0czpbe1xuICAgICAgICAgICAgICBfX3R5cGU6J1BvaW50ZXInLCBcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOidGb2xsb3d1cCcsXG4gICAgICAgICAgICAgIG9iamVjdElkOnJlcy5vYmplY3RJZFxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9fSksXG4gICAgICAgICAgaGVhZGVyczphcHBDb25maWcuaGVhZGVycyxcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuXG4gICAgICB9LFxuICAgIH0pXG4gIH0sXG5cbiAgcmVtb3ZlRm9sbG93dXA6IGZ1bmN0aW9uKGRheSkge1xuICAgIGZvbGxvd3VwcyA9IFtdXG4gICAgZm9yKGk9MDtpPCB0aGlzLnN0YXRlLmZvbGxvd3Vwcy5sZW5ndGg7aSsrKVxuICAgICAgaWYodGhpcy5zdGF0ZS5mb2xsb3d1cHNbaV0uZGF5ICE9IGRheSlcbiAgICAgICAgZm9sbG93dXBzLnB1c2godGhpcy5zdGF0ZS5mb2xsb3d1cHNbaV0pXG4gICAgICBcbiAgICBmb3IoaT0wO2k8IHRoaXMuc3RhdGUuZm9sbG93dXBzLmxlbmd0aDtpKyspXG4gICAgICBpZih0aGlzLnN0YXRlLmZvbGxvd3Vwc1tpXS5kYXkgPT0gZGF5KVxuICAgICAgICBicmVha1xuICAgIFxuICAgIHRoaXMuc2V0U3RhdGUoe2ZvbGxvd3VwczogZm9sbG93dXBzfSkgXG4gICAgaWQgPSB0aGlzLnN0YXRlLmZvbGxvd3Vwc1tpXVxuXG4gICAgdGhpc3MgPSB0aGlzO1xuICAgIGlmKGlkKSB7XG4gICAgICBpZCA9IGlkLm9iamVjdElkXG4gICAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6J2h0dHBzOi8vYXBpLnBhcnNlLmNvbS8xL2NsYXNzZXMvRm9sbG93dXAvJytpZCxcbiAgICAgICAgaGVhZGVyczphcHBDb25maWcuaGVhZGVycyxcbiAgICAgICAgdHlwZTonREVMRVRFJyxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgIGNvbnNvbGUubG9nKCdSRU1PVkUgQVJSQVknKVxuICAgICAgJC5hamF4KHtcbiAgICAgICAgdXJsOidodHRwczovL2FwaS5wYXJzZS5jb20vMS9jbGFzc2VzL0NhbXBhaWduLycrdGhpc3MucHJvcHMuY3VycmVudENhbXBhaWduLm9iamVjdElkLFxuICAgICAgICBoZWFkZXJzOmFwcENvbmZpZy5oZWFkZXJzLFxuICAgICAgICB0eXBlOidQVVQnLFxuICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgZm9sbG93dXBzOiB7XG4gICAgICAgICAgICBfX29wIDogJ1JlbW92ZScsXG4gICAgICAgICAgICBvYmplY3RzOiBbe1xuICAgICAgICAgICAgICBfX3R5cGU6ICdQb2ludGVyJyxcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnRm9sbG93dXAnLFxuICAgICAgICAgICAgICBvYmplY3RJZDogaWRcbiAgICAgICAgICAgIH1dXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH0sXG5cbiAgc2V0Q3VycmVudFRlbXBsYXRlOiBmdW5jdGlvbih0ZW1wbGF0ZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe2N1cnJlbnRUZW1wbGF0ZTogdGVtcGxhdGUgfSlcbiAgfVxufSk7XG5cblxuIiwiLyoqIEBqc3ggUmVhY3QuRE9NICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe2Rpc3BsYXlOYW1lOiAnZXhwb3J0cycsXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnRQcm9zcGVjdDogMCxcbiAgICB9XG4gIH0sXG4gIC8vU2VuZEVtYWlsTW9kYWxcbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMucHJvcHMuY3VycmVudFRlbXBsYXRlKVxuICAgIHByb3NwZWN0ID0gdGhpcy5wcm9wcy5wcm9zcGVjdHNbdGhpcy5zdGF0ZS5jdXJyZW50UHJvc3BlY3RdXG4gICAgcHJvc3BlY3QgPSAocHJvc3BlY3QpID8gcHJvc3BlY3QgOiB7J25hbWUnOicnLCdlbWFpbCc6Jyd9XG4gICAgLy9jb25zb2xlLmxvZyhwcm9zcGVjdClcbiAgICBwcm9zcGVjdHMgPSBbXVxuICAgIGZvcihpPTA7IGk8IHRoaXMucHJvcHMucHJvc3BlY3RzLmxlbmd0aDsgaSsrKXtcbiAgICAgIHByb3NwZWN0cy5wdXNoKFVzZXJQbGFjZUhvbGRlcih7cHJvc3BlY3Q6IHRoaXMucHJvcHMucHJvc3BlY3RzW2ldfSkpXG4gICAgfVxuICAgIGVtYWlsID0gKHByb3NwZWN0LmVtYWlsKSA/IHByb3NwZWN0LmVtYWlsLnRvTG93ZXJDYXNlKCkgOiBcIlwiXG4gICAgcmV0dXJuIChcbiAgICAgICAgICBSZWFjdC5ET00uZGl2KHtjbGFzc05hbWU6IFwibW9kYWwgZmFkZSBicy1zZW5kRW1haWwtbW9kYWwtbGdcIiwgdGFiSW5kZXg6IFwiLTFcIiwgcm9sZTogXCJkaWFsb2dcIiwgJ2FyaWEtbGFiZWxsZWRieSc6IFwibXlTbWFsbE1vZGFsTGFiZWxcIiwgJ2FyaWEtaGlkZGVuJzogXCJ0cnVlXCIsIGlkOiBcInNlbmRFbWFpbE1vZGFsXCIsIHN0eWxlOiB7dG9wOicxMHB4J319LCBcbiAgICAgICAgICAgIFJlYWN0LkRPTS5kaXYoe2NsYXNzTmFtZTogXCJtb2RhbC1kaWFsb2cgbW9kYWwtbGdcIn0sIFxuICAgICAgICAgICAgICBSZWFjdC5ET00uZGl2KHtjbGFzc05hbWU6IFwibW9kYWwtY29udGVudFwifSwgXG4gICAgICAgICAgICAgICAgUmVhY3QuRE9NLmRpdih7Y2xhc3NOYW1lOiBcIm1vZGFsLWhlYWRlclwifSwgXG4gICAgICAgICAgICAgICAgICBSZWFjdC5ET00uYnV0dG9uKHt0eXBlOiBcImJ1dHRvblwiLCBjbGFzc05hbWU6IFwiY2xvc2VcIiwgJ2RhdGEtZGlzbWlzcyc6IFwibW9kYWxcIn0sIFJlYWN0LkRPTS5zcGFuKHsnYXJpYS1oaWRkZW4nOiBcInRydWVcIn0sIFwiw5dcIiksIFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5ET00uc3Bhbih7Y2xhc3NOYW1lOiBcInNyLW9ubHlcIn0sIFwiQ2xvc2VcIikpLCBcbiAgICAgICAgUmVhY3QuRE9NLmJ1dHRvbih7dHlwZTogXCJidXR0b25cIiwgXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtmbG9hdDoncmlnaHQnfSwgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImJ0biBidG4tcHJpbWFyeSBidG4tc21cIn0sIFxuICAgICAgICAgICAgICAgIFJlYWN0LkRPTS5pKHtjbGFzc05hbWU6IFwiZmEgZmEtcGFwZXItcGxhbmVcIn0pLCBcIsKgXCIgKyAnICcgK1xuICAgICAgICAgICAgICAgIFwiU2VuZCBFbWFpbFwiKSwgXG4gICAgICAgIFJlYWN0LkRPTS5idXR0b24oe3R5cGU6IFwiYnV0dG9uXCIsIHN0eWxlOiB7bWFyZ2luUmlnaHQ6MTAsIGZsb2F0OidyaWdodCd9LCBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbVwiLCAnZGF0YS1kaXNtaXNzJzogXCJtb2RhbFwifSwgXCJDbG9zZVwiKSwgXG4gICAgICAgICAgICAgICAgICBSZWFjdC5ET00uaDQoe2NsYXNzTmFtZTogXCJtb2RhbC10aXRsZVwiLCBpZDogXCJteU1vZGFsTGFiZWxcIn0sIFxuICAgICAgICAgICAgICAgICAgICBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLWVudmVsb3BlXCJ9KSwgXCIgwqBTZW5kIEVtYWlsXCIgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICBcIsKgwqBcIiwgXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LkRPTS5zbWFsbChudWxsLCBcIihcIit0aGlzLnByb3BzLnByb3NwZWN0cy5sZW5ndGgrXCIpXCIpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSwgXG4gICAgICAgICAgICAgICAgUmVhY3QuRE9NLmRpdih7Y2xhc3NOYW1lOiBcIm1vZGFsLWJvZHlcIiwgc3R5bGU6IHtwYWRkaW5nVG9wOjV9fSwgXG4gICAgICAgICAgICAgICAgICBSZWFjdC5ET00uaDQobnVsbCwgXCJQZW9wbGVcIiksIFxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICBSZWFjdC5ET00uZGl2KHtjbGFzc05hbWU6IFwicHJvc3BlY3QtY29udGFpbmVyXCJ9LCBcbiAgICAgICAgICAgICAgICAgICAgcHJvc3BlY3RzXG4gICAgICAgICAgICAgICAgICApLCBcbiAgICAgICAgICAgICAgICAgIFJlYWN0LkRPTS5icihudWxsKSwgXG4gICAgICAgICAgICAgICAgICBSZWFjdC5ET00uaDQoe3N0eWxlOiB7ZGlzcGxheTonaW5saW5lLWJsb2NrJ319LCBcIkVtYWlscyDCoMKgwqBcIiwgXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0LkRPTS5zbWFsbChudWxsLCAodGhpcy5zdGF0ZS5jdXJyZW50UHJvc3BlY3QrMSkrJyBvZiAnK3RoaXMucHJvcHMucHJvc3BlY3RzLmxlbmd0aCkpLCBcbiAgICAgICAgICAgICAgICAgIFwiwqDCoMKgXCIsIFxuICAgICAgICAgICAgICAgICAgUmVhY3QuRE9NLmEoe2hyZWY6IFwiamF2YXNjcmlwdDpcIiwgXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogKHRoaXMuc3RhdGUuY3VycmVudFByb3NwZWN0ID09IDAgKSA/IFwiYnRuIGRpc2FibGVkXCIgOiBcImJ0blwiLCBcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5wcmV2aW91c1Byb3NwZWN0fSwgUmVhY3QuRE9NLmkoe2NsYXNzTmFtZTogXCJmYSBmYS1hcnJvdy1sZWZ0XCJ9KSksIFxuICAgICAgICAgICAgICAgICAgUmVhY3QuRE9NLmEoe2hyZWY6IFwiamF2YXNjcmlwdDpcIiwgXG4gICAgICAgICAgICBjbGFzc05hbWU6ICh0aGlzLnN0YXRlLmN1cnJlbnRQcm9zcGVjdCA9PSAxMzUgKSA/IFwiYnRuIGRpc2FibGVkXCIgOiBcImJ0blwiLCBcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5uZXh0UHJvc3BlY3R9LCBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLWFycm93LXJpZ2h0XCJ9KSksIFxuXG4gICAgICAgICAgICAgICAgICBSZWFjdC5ET00uZGl2KG51bGwsIFxuXG5SZWFjdC5ET00udWwoe2NsYXNzTmFtZTogXCJsaXN0LWdyb3VwIGVtYWlsLWhvbGRlclwiLCBzdHlsZToge2JvcmRlclRvcDonc29saWQgMXB4ICNlZWUnfX0sIFxuICBSZWFjdC5ET00ubGkoe2NsYXNzTmFtZTogXCJsaXN0LWdyb3VwLWl0ZW1cIn0sIFxuICAgIFJlYWN0LkRPTS5oNSh7c3R5bGU6IHtkaXNwbGF5OidpbmxpbmUtYmxvY2snLG1hcmdpblRvcDowLG1hcmdpbkJvdHRvbTowfX0sIFwiVG86wqDCoFwiKSwgXG4gICAgcHJvc3BlY3QubmFtZSArIFwiIC0gXCIgKyBlbWFpbFxuICApLCBcbiAgUmVhY3QuRE9NLmxpKHtjbGFzc05hbWU6IFwibGlzdC1ncm91cC1pdGVtXCJ9LCBcbiAgICBSZWFjdC5ET00uaDUoe3N0eWxlOiB7ZGlzcGxheTonaW5saW5lLWJsb2NrJyxtYXJnaW5Ub3A6MCxtYXJnaW5Cb3R0b206MH19LCBcIlN1YmplY3Q6wqDCoFwiKSwgXCIgXCIsIHRoaXMucHJvcHMuY3VycmVudFRlbXBsYXRlLnN1YmplY3RcbiAgKSwgXG4gIFJlYWN0LkRPTS5saSh7Y2xhc3NOYW1lOiBcImxpc3QtZ3JvdXAtaXRlbSBib2R5XCJ9KVxuKVxuICBcbiAgICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgICksIFxuXG4gICAgICBSZWFjdC5ET00uZGl2KHtjbGFzc05hbWU6IFwibW9kYWwtZm9vdGVyXCIsIHN0eWxlOiB7ZGlzcGxheTonbm9uZSd9fSwgXG4gICAgICAgIFJlYWN0LkRPTS5idXR0b24oe3R5cGU6IFwiYnV0dG9uXCIsIFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJidG4gYnRuLWRlZmF1bHRcIiwgJ2RhdGEtZGlzbWlzcyc6IFwibW9kYWxcIn0sIFwiQ2xvc2VcIiksIFxuICAgICAgICBSZWFjdC5ET00uYnV0dG9uKHt0eXBlOiBcImJ1dHRvblwiLCBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiYnRuIGJ0bi1wcmltYXJ5XCJ9LCBcIlNlbmQgRW1haWxcIilcbiAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIHByZXZpb3VzUHJvc3BlY3Q6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe2N1cnJlbnRQcm9zcGVjdDogdGhpcy5zdGF0ZS5jdXJyZW50UHJvc3BlY3QtMSB9KVxuICB9LFxuXG4gIG5leHRQcm9zcGVjdDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7Y3VycmVudFByb3NwZWN0OiB0aGlzLnN0YXRlLmN1cnJlbnRQcm9zcGVjdCsxIH0pXG4gIH0sXG5cbiAgcGFyc2VUZW1wbGF0ZTogZnVuY3Rpb24odGVtcGxhdGVCb2R5KSB7XG4gICAgZmlyc3RfbmFtZSA9IHByb3NwZWN0Lm5hbWUuc3BsaXQoJyAnKVswXVxuICAgIC8vaGlyaW5nX3NpZ25hbCA9IHByb3NwZWN0LnNpZ25hbHNcblxuICAgIHNpZ25hbHMgPSAocHJvc3BlY3Quc2lnbmFscykgPyBwcm9zcGVjdC5zaWduYWxzWzBdIDogXCJcIlxuICAgIHRlbXBsYXRlQm9keSA9IE11c3RhY2hlLnJlbmRlcih0ZW1wbGF0ZUJvZHksIHtcbiAgICAgIGhpcmluZ19zaWduYWw6IHNpZ25hbHMsXG4gICAgICBmaXJzdF9uYW1lOiBwcm9zcGVjdC5uYW1lLnNwbGl0KCcgJylbMF1cbiAgICB9KVxuXG4gICAgY29uc29sZS5sb2codGVtcGxhdGVCb2R5KVxuICAgICAgXG4gICAgcmV0dXJuIHRlbXBsYXRlQm9keVxuICB9LFxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLnByb3BzLmN1cnJlbnRUZW1wbGF0ZSlcbiAgICBwYXJzZWRUZW1wbGF0ZSA9IHRoaXMucGFyc2VUZW1wbGF0ZSh0aGlzLnByb3BzLmN1cnJlbnRUZW1wbGF0ZS5ib2R5KVxuICAgIFxuICAgIC8vJCgnLmJvZHknKS5odG1sKHRoaXMucHJvcHMuY3VycmVudFRlbXBsYXRlLmJvZHkpXG4gICAgJCgnLmJvZHknKS5odG1sKHBhcnNlZFRlbXBsYXRlKVxuICB9XG59KTtcblxudmFyIFVzZXJQbGFjZUhvbGRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogJ1VzZXJQbGFjZUhvbGRlcicsXG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgUmVhY3QuRE9NLmRpdih7Y2xhc3NOYW1lOiBcImJ0bi1ncm91cFwiLCBzdHlsZToge21hcmdpblJpZ2h0OjUsbWFyZ2luQm90dG9tOjV9fSwgXG4gICAgICAgICAgUmVhY3QuRE9NLmRpdih7Y2xhc3NOYW1lOiBcImJ0bi1ncm91cFwifSwgXG4gICAgICAgICAgICBSZWFjdC5ET00uYnV0dG9uKHt0eXBlOiBcImJ1dHRvblwiLCBcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImJ0biBidG4tc3VjY2VzcyBidG4tc21cIn0sIFxuICAgICAgICAgICAgICBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLXVzZXJcIn0pLCBcIsKgwqBcIiwgXG4gICAgICAgICAgICAgICh0aGlzLnByb3BzLnByb3NwZWN0KSA/IHRoaXMucHJvcHMucHJvc3BlY3QubmFtZSA6IFwiXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLCBcbiAgICAgICAgICBSZWFjdC5ET00uYnV0dG9uKHt0eXBlOiBcImJ1dHRvblwiLCBjbGFzc05hbWU6IFwiYnRuIGJ0bi1zdWNjZXNzIGJ0bi1zbVwifSwgXG4gICAgICAgICAgICBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLXRyYXNoLW9cIn0pXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgKVxuICB9XG59KTtcbiIsIi8qKiBAanN4IFJlYWN0LkRPTSAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogJ2V4cG9ydHMnLFxuICAvLyBUaW1lbGluZURheUVsZW1lbnRcbiAgLy8gVE9ET1xuICAvLyAtIGFkZCBwcm9zcGVjdCBsaXN0IHByb2dyZXNzaW9uXG4gIC8vIC0gYWRkIHNjaGVkdWxlZCBmb2xsb3d1cFxuICAvL1xuXG4gIGFkZEZvbGxvd3VwOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnByb3BzLmFkZEZvbGxvd3VwKHRoaXMucHJvcHMuZGF5Q291bnQpXG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICBiYXRjaENvdW50ID0gdGhpcy5wcm9wcy5iYXRjaENvdW50XG4gICAgYmF0Y2hTdGFnZSA9IChiYXRjaENvdW50KSA/IEJhdGNoU3RhZ2Uoe2JhdGNoQ291bnQ6IHRoaXMucHJvcHMuYmF0Y2hDb3VudH0pIDogXCJcIlxuXG4gICAgaWYodGhpcy5wcm9wcy5hZGRUZW1wbGF0ZU1vZGUpIHtcbiAgICAgIG1vZGUgPSBFZGl0VGVtcGxhdGUoe2FkZEZvbGxvd3VwOiB0aGlzLnByb3BzLmFkZEZvbGxvd3VwLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGb2xsb3d1cDogdGhpcy5wcm9wcy5zYXZlRm9sbG93dXAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRm9sbG93dXA6IHRoaXMucHJvcHMucmVtb3ZlRm9sbG93dXAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5Q291bnQ6IHRoaXMucHJvcHMuZGF5Q291bnQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVzOiB0aGlzLnByb3BzLnRlbXBsYXRlc30pXG4gICAgfSBlbHNlIHtcbiAgICAgIG1vZGUgPSBUZW1wbGF0ZUZvbGxvd3VwKHtjdXJyZW50VGVtcGxhdGU6IHRoaXMucHJvcHMuY3VycmVudFRlbXBsYXRlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0Rm9sbG93dXA6IHRoaXMucHJvcHMuZWRpdEZvbGxvd3VwLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXlDb3VudDogdGhpcy5wcm9wcy5kYXlDb3VudCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRm9sbG93dXA6IHRoaXMucHJvcHMucmVtb3ZlRm9sbG93dXAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRUZW1wbGF0ZTogdGhpcy5wcm9wcy5zZXRDdXJyZW50VGVtcGxhdGV9KVxuICAgIH1cbiAgICBtb2RlID0gKHRoaXMucHJvcHMuZWxlbWVudFR5cGUpID8gXCJcIiA6IG1vZGVcbiAgICBhZGRGb2xsb3d1cCA9ICh0aGlzLnByb3BzLmVsZW1lbnRUeXBlKSA/IHRoaXMuYWRkRm9sbG93dXAgOiBcIlwiXG5cbiAgICByZXR1cm4gKFxuICAgICAgUmVhY3QuRE9NLmRpdihudWxsLCBcbiAgICAgICAgUmVhY3QuRE9NLmRpdih7b25DbGljazogYWRkRm9sbG93dXAsIGNsYXNzTmFtZTogXCJkYXlcIiwgJ2RhdGEtdHJpZ2dlcic6IFwibWFudWFsXCJ9LCBcbiAgICAgICAgICBcIkRcIit0aGlzLnByb3BzLmRheUNvdW50XG4gICAgICAgICksIFxuICAgICAgICBiYXRjaFN0YWdlLCBtb2RlXG4gICAgICApXG4gICAgKVxuICB9LFxuXG4gIHNldEN1cnJlbnRUZW1wbGF0ZTogZnVuY3Rpb24odGVtcGxhdGUpIHtcbiAgICB0aGlzLnByb3BzLnNldEN1cnJlbnRUZW1wbGF0ZSh0ZW1wbGF0ZSlcbiAgfVxufSk7XG5cbnZhciBUZW1wbGF0ZUZvbGxvd3VwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe2Rpc3BsYXlOYW1lOiAnVGVtcGxhdGVGb2xsb3d1cCcsXG4gIC8vIEVkaXRNb2RlIEZhbHNlXG5cbiAgc2V0Q3VycmVudFRlbXBsYXRlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnByb3BzLnNldEN1cnJlbnRUZW1wbGF0ZSh0aGlzLnByb3BzLmN1cnJlbnRUZW1wbGF0ZSlcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoXG4gICAgICBSZWFjdC5ET00uZGl2KHtjbGFzc05hbWU6IFwiZm9sbG93dXAtcGxhY2VtZW50IGFycm93X2JveF8xIHRtcF8yXCJ9LCBcbiAgICAgICAgUmVhY3QuRE9NLmg2KHtzdHlsZToge3dpZHRoOjEzMCxkaXNwbGF5OidpbmxpbmUtYmxvY2snfX0sIFxuICAgICAgICAgIFJlYWN0LkRPTS5pKHtjbGFzc05hbWU6IFwiZmEgZmEtZmlsZS10ZXh0LW9cIn0pLCBcIsKgwqBcIiwgXG4gICAgICAgICAgKHRoaXMucHJvcHMuY3VycmVudFRlbXBsYXRlKSA/IHRoaXMucHJvcHMuY3VycmVudFRlbXBsYXRlLm5hbWUgOiBcIlwiXG4gICAgICAgICksIFxuICAgICAgICBSZWFjdC5ET00uYnV0dG9uKHtjbGFzc05hbWU6IFwid2luLWJ0biBidG4gYnRuLXN1Y2Nlc3MgYnRuLXhzXCIsIFxuICAgICAgICAgICAgICAgICdkYXRhLXRhcmdldCc6IFwiLmJzLXNlbmRFbWFpbC1tb2RhbC1sZ1wiLCBcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLnNldEN1cnJlbnRUZW1wbGF0ZSwgXG4gICAgICAgICAgICAgICAgJ2RhdGEtdG9nZ2xlJzogXCJtb2RhbFwifSwgXG4gICAgICAgICAgUmVhY3QuRE9NLmkoe2NsYXNzTmFtZTogXCJmYSBmYS1wYXBlci1wbGFuZVwifSksIFwiwqBTZW5kXCIpLCBcIsKgXCIsIFxuICAgICAgICBSZWFjdC5ET00uYnV0dG9uKHtvbkNsaWNrOiB0aGlzLmVkaXRGb2xsb3d1cCwgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIndpbi1idG4gYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1wifSwgXG4gICAgICAgICAgUmVhY3QuRE9NLmkoe2NsYXNzTmFtZTogXCJmYSBmYS1wZW5jaWxcIn0pKSwgXCLCoFwiLCBcbiAgICAgICAgUmVhY3QuRE9NLmJ1dHRvbih7b25DbGljazogdGhpcy5yZW1vdmVGb2xsb3d1cCwgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcIndpbi1idG4gYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1wifSwgXG4gICAgICAgICAgUmVhY3QuRE9NLmkoe2NsYXNzTmFtZTogXCJmYSBmYS10cmFzaC1vXCJ9KSlcbiAgICAgIClcbiAgICApO1xuICB9LFxuXG4gIGVkaXRGb2xsb3d1cDogZnVuY3Rpb24oZSkgeyBcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zb2xlLmxvZyh0aGlzLnByb3BzLmRheUNvdW50KVxuICAgIHRoaXMucHJvcHMuZWRpdEZvbGxvd3VwKHRoaXMucHJvcHMuZGF5Q291bnQpXG4gIH0sXG5cbiAgcmVtb3ZlRm9sbG93dXA6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKCdyZW1vdmUnKVxuICAgIHRoaXMucHJvcHMucmVtb3ZlRm9sbG93dXAodGhpcy5wcm9wcy5kYXlDb3VudClcbiAgfVxufSk7XG5cbnZhciBCYXRjaFN0YWdlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe2Rpc3BsYXlOYW1lOiAnQmF0Y2hTdGFnZScsXG4gIC8vIERpZmZlcmVudCBTdGFnZXMgb2YgUGVvcGxlIEFkZGVkIHRvIFByb3NwZWN0IExpc3RcbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgUmVhY3QuRE9NLmRpdih7Y2xhc3NOYW1lOiBcImZvbGxvd3VwLXBsYWNlbWVudCBhcnJvd19ib3ggdG1wXCJ9LCBcbiAgICAgICAgUmVhY3QuRE9NLnNwYW4oe2NsYXNzTmFtZTogXCJiYWRnZVwifSwgXG4gICAgICAgICAgdGhpcy5wcm9wcy5iYXRjaENvdW50XG4gICAgICAgICksIFwiwqBcIiwgXG4gICAgICAgIFJlYWN0LkRPTS5oNih7c3R5bGU6IHtkaXNwbGF5OidpbmxpbmUtYmxvY2snfX0sIFxuICAgICAgICAgIFwicHJvc3BlY3RzIGluIHRoZSBzYWxlcyBjeWNsZS5cIilcbiAgICAgIClcbiAgICApO1xuICB9XG59KTtcblxudmFyIEVkaXRUZW1wbGF0ZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogJ0VkaXRUZW1wbGF0ZScsXG4gIC8vIEVkaXQgTW9kZSAtIFRydWVcbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICBvcHRpb25zID0gW11cbiAgICBmb3IoaT0wO2k8IHRoaXMucHJvcHMudGVtcGxhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvcHRpb25zLnB1c2goIFJlYWN0LkRPTS5vcHRpb24obnVsbCwgdGhpcy5wcm9wcy50ZW1wbGF0ZXNbaV0ubmFtZSkpXG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICBSZWFjdC5ET00uZGl2KHtjbGFzc05hbWU6IFwiZm9sbG93dXAtcGxhY2VtZW50IGFycm93X2JveF8xIHRtcF8yXCJ9LCBcbiAgICAgICAgUmVhY3QuRE9NLmg2KHtzdHlsZToge3dpZHRoOjU1LGRpc3BsYXk6J2lubGluZS1ibG9jayd9LCBcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ0ZXh0LW11dGVkXCJ9LCBcbiAgICAgICAgICBcIkNob29zZSA6XCJcbiAgICAgICAgKSwgXG4gICAgICAgIFJlYWN0LkRPTS5zZWxlY3Qoe2NsYXNzTmFtZTogXCJmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiwgXG4gICAgICAgICAgICAgICAgaWQ6IFwiY2hvb3NlVGVtcGxhdGVGb3JGb2xsb3d1cFwiLCBcbiAgICAgICAgICAgICAgICBzdHlsZToge2Rpc3BsYXk6J2lubGluZS1ibG9jaycsd2lkdGg6MTI3LG1hcmdpblJpZ2h0OjV9fSwgXG4gICAgICAgICAgb3B0aW9uc1xuICAgICAgICApLCBcblxuICAgICAgICBSZWFjdC5ET00uYnV0dG9uKHtjbGFzc05hbWU6IFwid2luLWJ0biBidG4gYnRuLXN1Y2Nlc3MgYnRuLXhzXCIsIFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuc2F2ZUZvbGxvd3VwLCBcbiAgICAgICAgICAgICAgICBzdHlsZToge21hcmdpblJpZ2h0OjV9fSwgXG4gICAgICAgICAgUmVhY3QuRE9NLmkoe2NsYXNzTmFtZTogXCJmYSBmYS1jaGVja1wifSkpLCBcbiAgICAgICAgUmVhY3QuRE9NLmJ1dHRvbih7Y2xhc3NOYW1lOiBcIndpbi1idG4gYnRuIGJ0bi1kZWZhdWx0IGJ0bi14c1wiLCBcbiAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLnJlbW92ZUZvbGxvd3VwfSwgXG4gICAgICAgICAgUmVhY3QuRE9NLmkoe2NsYXNzTmFtZTogXCJmYSBmYS10cmFzaC1vXCJ9KSlcbiAgICAgIClcbiAgICApXG4gIH0sXG5cbiAgc2F2ZUZvbGxvd3VwOiBmdW5jdGlvbihlKSB7XG4gICAgLy9nZXQgdGVtcGxhdGUgZnJvbSBjdXJyZW50VGVtcGxhdGVcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBjaG9zZW5UZW1wbGF0ZSA9ICQoJyNjaG9vc2VUZW1wbGF0ZUZvckZvbGxvd3VwJykudmFsKClcbiAgICBjb25zb2xlLmxvZyhjaG9zZW5UZW1wbGF0ZSlcbiAgICBmb3IoaT0wO2k8IHRoaXMucHJvcHMudGVtcGxhdGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGlmKHRoaXMucHJvcHMudGVtcGxhdGVzW2ldLm5hbWUgPT0gY2hvc2VuVGVtcGxhdGUpe1xuICAgICAgICBjaG9zZW5UZW1wbGF0ZSA9IHRoaXMucHJvcHMudGVtcGxhdGVzW2ldXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGNob3NlblRlbXBsYXRlKVxuICAgIFxuICAgIHRoaXMucHJvcHMuc2F2ZUZvbGxvd3VwKHRoaXMucHJvcHMuZGF5Q291bnQsIGNob3NlblRlbXBsYXRlKVxuICB9LFxuXG4gIHJlbW92ZUZvbGxvd3VwOiBmdW5jdGlvbihkYXkpIHtcbiAgICB0aGlzLnByb3BzLnJlbW92ZUZvbGxvd3VwKHRoaXMucHJvcHMuZGF5Q291bnQpXG4gIH0sXG59KTtcblxuIl19
