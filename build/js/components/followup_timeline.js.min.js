(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */
var SendEmailModal = require('./send_email_modal.js.min.js')
var TimelineDayElement = require('./timeline_day_element.js.min.js')

module.exports = React.createClass({displayName: 'exports',
  // FollowupTimeline
  getInitialState: function() {
    initialFollowups = this.props.initialFollowups
    initialFollowups = (initialFollowups) ? initialFollowups : []
    batches = this.props.selectedCampaign.batches
    batches = (batches) ? batches : []
    return {
      followups: _.compact(initialFollowups),
      loading: false,
      currentTemplate:'',
      currentBatch: '',
      batches : batches
    }
  },

  componentDidMount: function() {
    thiss = this;
    $('.day').tooltip({
      placement: 'right',
      title:'+ Add a follow-up'
    })

    console.log(this.props.selectedCampaign)
     company = JSON.stringify(JSON.parse(localStorage.currentUser).company)
     currentCampaign = appConfig.pointer('Campaign', this.props.selectedCampaign.objectId)
     $.ajax({
       url:'https://api.parse.com/1/classes/Followup',
       type:'GET',
       headers: appConfig.headers,
       data: {
         where: JSON.stringify({
           campaign: currentCampaign,
           company: appConfig.company
         }),
         include:'template',
       },
       success: function(res) {
         console.log('followup timeline')
         console.log(res.results)
       },
       error: function(err) {
         console.log('error')
         console.log(err)
       }
     })
  },

  addFollowupSentToBatch: function(batch, followup) {
    batches = _.map(this.state.batches, function(_batch) {
                  if(_batch.objectId == batch.objectId) {
                    if(_batch.followups)
                      _batch.followups.push(followup)
                    else
                      _batch.followups = [followup]
                  }
                  return _batch
              })
    // Persist
  },
  
  render: function() {
    timelineElements = []
    followups = this.state.followups

    batches = _.map(this.state.batches, function(batch) {
      if(batch){
        now = moment().startOf('day').valueOf()
        batch.currentDay = moment(batch.started).diff(moment(now),  'days') * -1
        return batch
      }
    })
    batches = _.compact(batches)

    for(i=0;i< 31;i++){
      followup = _.findWhere(this.state.followups, {day: i})
      var elementType = (followup) ? true : false
      var currentTemplate = (followup) ? followup.template : false
      var addTemplateMode = (followup) ? followup.addTemplateMode : true
      campaign = this.props.selectedCampaign

      currentBatch = {}
      batch_started_today = false
      alreadySent = false
      batchCount = undefined
      if(i == 0) {
        batchCount = (batches) ? this.props.newProspects.length : this.props.prospects.length
      } else {
        batch = _.findWhere(batches, {currentDay: i})
        if(batch) {
          currentBatch = batch.objectId
          console.debug(batch.objectId)
          batchCount = "~"
          if(followup) {
            _batches = followup.batches
            alreadySent = _.findWhere(_batches, _.pick(batch,'objectId'))
          }
        }
      }

      timelineElements.push(React.DOM.div(null, TimelineDayElement({
                                    dayCount: i, 
                                    elementType: !elementType, 
                                    currentTemplate: currentTemplate, 
                                    batchCount: batchCount, 
                                    currentBatch: currentBatch, 
                                    alreadySent: alreadySent, 
                                    addTemplateMode: addTemplateMode, 
                                    templates: this.props.templates, 
                                    newProspects: this.props.newProspects, 
                                    addFollowup: this.addFollowup, 
                                    editFollowup: this.editFollowup, 
                                    saveFollowup: this.saveFollowup, 
                                    removeFollowup: this.removeFollowup, 
                                 addFollowupSentToBatch: this.addFollowupSentToBatch, 
                                    batches: this.props.selectedCampaign.batches, 
                                    prospectListCount: this.props.prospectListCount, 
                                    setCurrentBatch: this.setCurrentBatch, 
                                    setCurrentTemplate: this.setCurrentTemplate})
                                  ))

      if(i == 0 && _.findWhere(batches, {currentDay: 0})){
          currentBatch = _.findWhere(batches, {currentDay: 0}).objectId
          console.debug('0.5')
          console.debug(currentBatch)
          batchCount = "~"
          timelineElements.push(React.DOM.div(null, TimelineDayElement({
                                  dayCount: 0.5, 
                                  batchCount: batchCount, 
                                  currentBatch: currentBatch, 
                                  newProspects: this.props.newProspects, 
                                  elementType: true, 
                                  batches: this.props.selectedCampaign.batches, 
                                  prospectListCount: this.props.prospectListCount, 
                                  setCurrentBatch: this.setCurrentBatch})
                                ))
      }
    }
    return (
      React.DOM.div(null, 
        React.DOM.div({className: "timeline", 
             style: {height:'100%',backgroundColor:'rgb(90, 107, 119)', width:5,marginTop:-35}}, 
             timelineElements
        ), 
        SendEmailModal({prospects: this.props.prospects, 
                        selectedCampaign: this.props.selectedCampaign, 
                        newProspects: this.props.newProspects, 
                        addFollowupSentToBatch: this.addFollowupSentToBatch, 
                        currentBatch: this.state.currentBatch, 
                        currentTemplate: this.state.currentTemplate})
      )
    );
  },

  createFollowup: function() {
    //
  },         

  addFollowup: function(day) {
    //console.log('called template edit menu')
    followups = this.state.followups
    followups.push({addTemplateMode: true, day: day})
    this.setState({ followups: followups })
  },

  editFollowup: function(day) {
    // find template set editmode is false
    followups = _.map(this.state.followups, function(followup) {
      if(followup.day == day){ followup.addTemplateMode = true }
      return followup
    })
    this.setState({followups: followups})
  },

  saveFollowup: function(day, chosenTemplate) {
    new_followups = _.map(this.state.followups, function(followup) {
      if(followup.day == day){
        followup.addTemplateMode = false
        followup.template = chosenTemplate
      }
      return followup
    })
    this.setState({followups: new_followups})
    followup = _.findWhere(new_followups, {day: day})

      if(followup.objectId){
        url = "/"+followup.objectId; type="PUT"
        data = {template: appConfig.pointer('Template', chosenTemplate.objectId)}
      } else {
        url = ""; type="POST";

          data = {
            day: day,
            campaign : appConfig.pointer('Campaign', 
                                         this.props.selectedCampaign.objectId),
            template: appConfig.pointer('Template', chosenTemplate.objectId),
          }
      }

    thiss = this;
    $.ajax({
      url:'https://api.parse.com/1/classes/Followup'+url,
      type:type,
      data:JSON.stringify(data),
      headers:appConfig.headers,
      success: function(res) {
        new_followups = _.map(new_followups, function(followup) {
          if(followup.day == day) { followup.objectId = false }
          return followup
        })
        thiss.setState({followups: new_followups})

        console.log(res)
        $.ajax({
          url:'https://api.parse.com/1/classes/Campaign/'+thiss.props.selectedCampaign.objectId,
          type:'PUT',
          data:JSON.stringify({followups: {
            __op: 'AddUnique',
            objects:[appConfig.pointer('Followup', res.objectId)]
          }}),
          headers:appConfig.headers,
          success: function() { },
          error: function() { }
        })
      },
      error: function() { },
    })
  },

  removeFollowup: function(day) {
    followups = []
    for(i=0;i< this.state.followups.length;i++)
      if(this.state.followups[i].day != day)
        followups.push(this.state.followups[i])
      
    for(i=0;i< this.state.followups.length;i++)
      if(this.state.followups[i].day == day)
        break
    
    this.setState({followups: followups}) 
    id = this.state.followups[i]

    thiss = this;
    if(id) {
      id = id.objectId
      $.ajax({
        url:'https://api.parse.com/1/classes/Followup/'+id,
        headers:appConfig.headers,
        type:'DELETE',
        success: function(res) { console.log(res) }
      })

     console.log('REMOVE ARRAY')
      $.ajax({
        url:'https://api.parse.com/1/classes/Campaign/'+thiss.props.selectedCampaign.objectId,
        headers:appConfig.headers,
        type:'PUT',
        data: JSON.stringify({
          followups: {
            __op : 'Remove',
            objects: [appConfig.pointer('Followup', id)]
          }
        }),
        success: function(res){ console.log(res) },
        error: function() { }
      })
    }
  },

  setCurrentBatch: function(currentBatch) {
    this.setState({currentBatch: currentBatch})
  },

  setCurrentTemplate: function(template) {
    this.setState({currentTemplate: template })
  }
});



},{"./send_email_modal.js.min.js":2,"./timeline_day_element.js.min.js":3}],2:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      currentProspect: 0,
    }
  },

  sendEmails: function() {
    selectedCampaign = this.props.selectedCampaign
    campaign_id = selectedCampaign.objectId
    prospectlist_id = selectedCampaign.prospect_list.objectId
    template_id = this.props.currentTemplate.objectId
    
    $.ajax({
      url:'https://nameless-retreat-3525.herokuapp.com/send_email',
      //url:'http://127.0.0.1:5000/send_email',
      data: {
        template_id : template_id,
        campaign_id : campaign_id,
        prospectlist_id : prospectlist_id,
      },
      success: function(res) { console.log(res.results) },
      error: function(err) { console.log(err) }
    })

    /*
    */
    // Update Followup
    // Persist Followup
    // close modal
  },

  render: function() {
    prospect = this.props.prospects[this.state.currentProspect]
    prospect = (prospect) ? prospect : {'name':'','email':''}

    var thiss = this;
    console.debug('SEND EMAIL BATCH')
    console.debug(this.props.currentBatch)
    newBatch = _.isEqual(this.props.currentBatch, {})
    prospects = (newBatch) ? this.props.newProspects : this.props.prospects
    if(newBatch){
      prospects = _.map(this.props.newProspects, function(prospect) {
          return UserPlaceHolder({prospect: prospect})
      })
    } else {
      prospects = _.map(this.props.prospects, function(prospect) {
        if(_.findWhere(prospect.batches, {objectId: thiss.props.currentBatch}))
          return UserPlaceHolder({prospect: prospect})
      })
    }
    prospects = _.compact(prospects)
    console.debug(prospects)
    console.debug(prospects.length)
    prospectCount = prospects.length
    email = (prospect.email) ? prospect.email.toLowerCase() : ""
    return (
      React.DOM.div({className: "modal fade bs-sendEmail-modal-lg", tabIndex: "-1", 
           role: "dialog", 'aria-labelledby': "mySmallModalLabel", 'aria-hidden': "true", 
           id: "sendEmailModal", style: {top:'10px'}}, 
            React.DOM.div({className: "modal-dialog modal-lg"}, 
              React.DOM.div({className: "modal-content"}, 
                React.DOM.div({className: "modal-header"}, 
                  React.DOM.button({type: "button", className: "close", 'data-dismiss': "modal"}, React.DOM.span({'aria-hidden': "true"}, "×"), 
                    React.DOM.span({className: "sr-only"}, "Close")), 
        React.DOM.button({type: "button", 
                onClick: this.sendEmails, 
                style: {float:'right'}, 
                className: "btn btn-primary btn-sm"}, 
                React.DOM.i({className: "fa fa-paper-plane"}), "  Send Email"), 
        React.DOM.button({type: "button", style: {marginRight:10, float:'right'}, 
                className: "btn btn-default btn-sm", 'data-dismiss': "modal"}, "Close"), 
                  React.DOM.h4({className: "modal-title", id: "myModalLabel"}, 
                    React.DOM.i({className: "fa fa-envelope"}), "  Send Email" + ' ' +
                    "  ", 
                    React.DOM.small(null, "("+prospectCount+")")
                  )
                ), 
                React.DOM.div({className: "modal-body", style: {paddingTop:5}}, 
                  React.DOM.h4(null, "People"), 
                  
                  React.DOM.div({className: "prospect-container"}, 
                    prospects
                  ), 
                  React.DOM.br(null), 
                  React.DOM.h4({style: {display:'inline-block'}}, "Emails    ", 
                    React.DOM.small(null, (this.state.currentProspect+1)+' of '+prospectCount
                  )), 
                  "   ", 
                  React.DOM.a({href: "javascript:", 
              className: (this.state.currentProspect == 0 ) ? "btn disabled" : "btn", 
                    onClick: this.previousProspect}, React.DOM.i({className: "fa fa-arrow-left"})), 
                  React.DOM.a({href: "javascript:", 
            className: (this.state.currentProspect == 135 ) ? "btn disabled" : "btn", 
                    onClick: this.nextProspect}, React.DOM.i({className: "fa fa-arrow-right"})), 

                  React.DOM.div(null, 

React.DOM.ul({className: "list-group email-holder", style: {borderTop:'solid 1px #eee'}}, 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "To:  "), 
    prospect.name + " - " + email
  ), 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "Subject:  "), " ", this.props.currentTemplate.subject
  ), 
  React.DOM.li({className: "list-group-item body"})
)
  
                  )

                ), 

      React.DOM.div({className: "modal-footer", style: {display:'none'}}, 
        React.DOM.button({type: "button", 
                className: "btn btn-default", 'data-dismiss': "modal"}, "Close"), 
        React.DOM.button({type: "button", 
                className: "btn btn-primary"}, "Send Email")
      )
              )
            )
          )
    );
  },

  previousProspect: function() {
    this.setState({currentProspect: this.state.currentProspect-1 })
  },

  nextProspect: function() {
    this.setState({currentProspect: this.state.currentProspect+1 })
  },

  parseTemplate: function(templateBody) {
    first_name = prospect.name.split(' ')[0]
    //hiring_signal = prospect.signals

    signals = (prospect.signals) ? prospect.signals[0] : ""
    templateBody = Mustache.render(templateBody, {
      hiring_signal: signals,
      first_name: prospect.name.split(' ')[0]
    })

    console.log(templateBody)
      
    return templateBody
  },

  componentDidUpdate: function() {
    //console.log(this.props.currentTemplate)
    parsedTemplate = this.parseTemplate(this.props.currentTemplate.body)
    
    //$('.body').html(this.props.currentTemplate.body)
    $('.body').html(parsedTemplate)
  }
});

var UserPlaceHolder = React.createClass({displayName: 'UserPlaceHolder',
  render: function() {
    return (
        React.DOM.div({className: "btn-group", style: {marginRight:5,marginBottom:5}}, 
          React.DOM.div({className: "btn-group"}, 
            React.DOM.button({type: "button", 
                    className: "btn btn-success btn-sm"}, 
              React.DOM.i({className: "fa fa-user"}), "  ", 
              (this.props.prospect) ? this.props.prospect.name : ""
            )
          ), 
          React.DOM.button({type: "button", className: "btn btn-success btn-sm"}, 
            React.DOM.i({className: "fa fa-trash-o"})
          )
        )
    )
  }
});

},{}],3:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // TimelineDayElement
  // TODO
  // - add prospect list progression
  // - add scheduled followup
  //
  getInitialState: function() {
    // 
    return {
      followupCompleted: 0,
    }
  },

  addFollowup: function() {
    this.props.addFollowup(this.props.dayCount)
  },

  render: function() {
    if(this.props.addTemplateMode) {
      mode = EditTemplate({addFollowup: this.props.addFollowup, 
                           saveFollowup: this.props.saveFollowup, 
                           removeFollowup: this.props.removeFollowup, 
                           dayCount: this.props.dayCount, 
                           templates: this.props.templates})
    } else {
      mode = TemplateFollowup({currentTemplate: this.props.currentTemplate, 
                               editFollowup: this.props.editFollowup, 
                               dayCount: this.props.dayCount, 
                               currentBatch: this.props.currentBatch, 
                               hasBatch: typeof(this.props.batchCount) != "undefined", 
                               setCurrentBatch: this.props.setCurrentBatch, 
                               dayCount: this.props.dayCount, 
                               removeFollowup: this.props.removeFollowup, 
                               setCurrentTemplate: this.props.setCurrentTemplate})
    }
    if(this.props.alreadySent) {
      mode = FollowupCompleted({currentTemplate: this.props.currentTemplate})
    }

    mode = (this.props.elementType) ? "" : mode
    addFollowup = (this.props.elementType) ? this.addFollowup : ""
    if(typeof(this.props.batchCount) != "undefined")
      batchStage = BatchStage({currentBatch: this.props.currentBatch, 
                               newProspects: this.props.newProspects, 
                               prospectListCount: this.props.prospectListCount, 
                               batchCount: this.props.batchCount, 
                               hasScheduledEmail: mode != "", 
                               dayCount: this.props.dayCount})
    else
      batchStage = ""

    dayCount = (this.props.dayCount != 0.5) ? "D"+this.props.dayCount : ""

    return (
      React.DOM.div(null, 
        React.DOM.div({onClick: addFollowup, className: "day", 'data-trigger': "manual"}, 
          dayCount
        ), 
        mode, batchStage
      )
    )
  },

  setCurrentTemplate: function(template) {
    this.props.setCurrentTemplate(template)
  }
});

var FollowupCompleted = React.createClass({displayName: 'FollowupCompleted',
  render: function() {
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:130,display:'inline-block'}}, 
          React.DOM.i({className: "fa fa-file-text-o"}), "  ", 
          (this.props.currentTemplate) ? this.props.currentTemplate.name : ""
        ), 
        React.DOM.button({className: "win-btn btn btn-success btn-xs disabled", 
                'data-target': ".bs-sendEmail-modal-lg", 
                onClick: this.setCurrentTemplate, 
                'data-toggle': "modal"}, 
          React.DOM.i({className: "fa fa-check"}), " Sent"), " ", 
        React.DOM.button({onClick: this.editFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-pencil"})), " ", 
        React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-trash-o"}))
      )
                                         )
  }
})

var TemplateFollowup = React.createClass({displayName: 'TemplateFollowup',
  // EditMode False

  setCurrentTemplate: function() {
    this.props.setCurrentTemplate(this.props.currentTemplate)
    // setCurrentBatch
    this.props.setCurrentBatch(this.props.currentBatch)
    $('.bs-sendEmail-modal-lg').modal()
  },

  waitForBatch: function() {
    alertify.log("You must wait for a batch!");
  },

  render: function() {
    trash = (this.props.dayCount == 0) ?  React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-trash-o"})) : React.DOM.button({onClick: this.removeFollowup, className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-trash-o"})) 
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:130,display:'inline-block'}}, 
          React.DOM.i({className: "fa fa-file-text-o"}), "  ", 
          (this.props.currentTemplate) ? this.props.currentTemplate.name : ""
        ), 
        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
        onClick: (this.props.hasBatch) ? this.setCurrentTemplate : this.waitForBatch, 
                'data-toggle': "modal"}, 
          React.DOM.i({className: "fa fa-paper-plane"}), " Send"), " ", 
        React.DOM.button({onClick: this.editFollowup, 
                className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-pencil"})), " ", 
        trash
      )
    );
  },

  editFollowup: function(e) { 
    e.preventDefault()
    console.log(this.props.dayCount)
    this.props.editFollowup(this.props.dayCount)
  },

  removeFollowup: function() {
    console.log('remove')
    this.props.removeFollowup(this.props.dayCount)
  }
});

var BatchStage = React.createClass({displayName: 'BatchStage',
  // Different Stages of People Added to Prospect List
  getInitialState: function() {
    // 
    return {
      initialBatchCount: this.props.batchCount
    }
  },

  componentDidMount: function() {
    // state
    //console.debug('INSIDE BATCH '+this.props.dayCount)
    console.debug(this.props.currentBatch)
    _batches = appConfig.pointer('ProspectBatch', this.props.currentBatch)
    if(this.props.batchCount == "~") {
      // Why doesnt this work 
      var thissss = this;
      console.debug('INSIDE BATCH '+thiss.props.dayCount)
      console.debug(_batches)
      $.ajax({
        url:'https://api.parse.com/1/classes/Prospect',
        batches: _batches,
        data: {
          where: JSON.stringify({
            batches: _batches
          }),
          count: true,
        },
        headers: appConfig.headers,
        success: function(res) { 
          //console.debug('SUCCESS GET COUNT ' + res.count)
          //console.debug(res.results) 
          thissss.setState({initialBatchCount: res.count})
        },
        error: function(err) { 
          thissss.setState({initialBatchCount: 0 })
        }
      })
    }
  },

  componentWillReceiveProps: function(nextProps) {
    if(this.props.dayCount == 0)
      this.setState({ initialBatchCount: nextProps.batchCount })
  },


  render: function() {
    if(this.props.hasScheduledEmail)
      batchStageStyle = {top:-42, left:6}
    else
      batchStageStyle = {}

    if(this.props.dayCount == 0.5)
      batchStageStyle.left = 7

    //console.log('BATCH STAGE')
    //console.log(this.props)
    //console.debug(this.props.currentBatch)                                                           

    return (
      React.DOM.div({className: "followup-placement arrow_box tmp", style: batchStageStyle}, 
        React.DOM.span({className: "label label-primary"}, 
          React.DOM.i({className: "fa fa-user"}), " ", 
          this.state.initialBatchCount
        ), " ", 
        React.DOM.h6({style: {display:'inline-block'}}, 
          "prospects in the sales cycle.")
      )
    );
  }
});

var EditTemplate = React.createClass({displayName: 'EditTemplate',
  // Edit Mode - True
  render: function() {
    options = []
    for(i=0;i< this.props.templates.length; i++) {
      options.push( React.DOM.option(null, this.props.templates[i].name))
    }
    trash = (this.props.dayCount == 0) ?  React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-trash-o"})) : React.DOM.button({onClick: this.removeFollowup, className: "win-btn btn btn-default btn-xs"}, " ", React.DOM.i({className: "fa fa-trash-o"})) 
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:55,display:'inline-block'}, 
            className: "text-muted"}, 
          "Choose :"
        ), 
        React.DOM.select({className: "form-control input-sm", 
                id: "chooseTemplateForFollowup", 
                style: {display:'inline-block',width:127,marginRight:5}}, 
          options
        ), 

        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
                onClick: this.saveFollowup, 
                style: {marginRight:5}}, 
          React.DOM.i({className: "fa fa-check"})), 
        trash
      )
    )
  },

  saveFollowup: function(e) {
    //get template from currentTemplate
    e.preventDefault()
    chosenTemplate = $('#chooseTemplateForFollowup').val()
    console.log(chosenTemplate)
    for(i=0;i< this.props.templates.length; i++){
      if(this.props.templates[i].name == chosenTemplate){
        chosenTemplate = this.props.templates[i]
        break
      }
    }
    console.log(chosenTemplate)
    
    this.props.saveFollowup(this.props.dayCount, chosenTemplate)
  },

  removeFollowup: function(day) {
    this.props.removeFollowup(this.props.dayCount)
  },
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
