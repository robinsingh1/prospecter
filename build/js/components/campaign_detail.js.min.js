(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */
var TemplatesMenu = require('./templates_menu.js.min.js');
var EditTemplateView = require('./edit_template.js.min.js');
var CreateTemplateView = require('./create_template.js.min.js');
var FollowupTimeline = require('./followup_timeline.js.min.js');

module.exports = React.createClass({displayName: 'exports',
  // Campaign Detail
  getInitialState: function() {
    return {
      selectedTemplate: 0,
      templateDetailMode: false,
      editMode: false,
      followupDay: 0,
      templates:[],
      currentTemplate:'',
      prospectListCount:'~',
      prospects:[],
    }
  },

  componentDidMount: function() {
     thissss = this;
     company = JSON.stringify(JSON.parse(localStorage.currentUser).company)
     qry = 'where={"company":'+company+'}'
    $.ajax({
      url:'https://api.parse.com/1/classes/Template',
      headers: appConfig.headers,
      data: qry,
      success: function(res) { thissss.setState({templates: res.results}) },
      error: function(err) { console.log('error') }
    });

    currentList = JSON.stringify({
      '__type'    : 'Pointer', 
      'className' : 'ProspectList',
      'objectId'  : this.props.selectedCampaign.prospect_list.objectId, 
    })
    qry = 'where={"lists":'+currentList+'}&limit=1000&count=1'
    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospect',
      headers: appConfig.headers,
      data: qry,
      success: function (res) {
        thissss.setState({
          prospects: res.results,
          prospectListCount: res.count 
        })
      },
      error: function(err) { }
    })
  },

  returnToOverview: function() {
    this.props.toggleScreen('Campaigns')
  },

  render: function() {
    //console.log('campaign detail')
    thiss = this;
    return (
      React.DOM.div({className: "container", 
           style: {width:'100%',height:'100%',paddingLeft:0,paddingRight:0}}, 
        React.DOM.div({style: {marginBottom:30}, id: "campaign-top-detail"}, 
        React.DOM.h5({style: {marginTop:20,marginLeft:20}}, 
          React.DOM.a({href: "javascript:", onClick: this.returnToOverview}, "Campaigns "), 
          React.DOM.small(null, 
            React.DOM.i({style: {marginLeft:10, marginRight:10}, 
               className: "fa fa-chevron-right"})
          ), 
          this.props.selectedCampaign.name
        ), 
        React.DOM.h6({style: {marginLeft:20,display:'inline-block',marginRight:15}}, 
          React.DOM.span({className: "text-muted"}, "Prospect List:"), "  ", 
          (this.props.selectedCampaign.prospect_list.signal_list) ? React.DOM.span(null, React.DOM.i({className: "fa fa-wifi"}), " ") : "", 
          this.props.selectedCampaign.prospect_list.name
        ), 
        React.DOM.span({className: "badge"}, this.state.prospectListCount), 

        React.DOM.h6({style: {marginLeft:20,display:'inline-block',marginRight:15}}, 
          "Batches :"
        ), 
        React.DOM.span({className: "badge"}, "2"), 
        React.DOM.a({href: "javascript:", 
           style: {float: 'right', marginTop: -35, marginRight: 30, display:'none'}, 
           className: "btn btn-success btn-sm"}, 
          React.DOM.i({className: "fa fa-envelope"}), " Send!"
        )
        ), 
          React.DOM.div({className: "col-md-8 panel panel-default", 
               style: {height:'443px',paddingLeft:305,paddingTop:50,overflow:'auto',borderRight:0,borderRadius:0}}, 
               FollowupTimeline({
                  templates: this.state.templates, 
                  prospects: this.state.prospects, 
                  currentCampaign: this.props.selectedCampaign, 
                  toggleTemplateEditMenu: this.toggleTemplateEditMenu, 
                  initialFollowups: this.props.selectedCampaign.followups})
          ), 
          React.DOM.div({className: "col-md-4", 
               style: {paddingLeft:0,paddingRight:0,height:443}}, 
            TemplatesMenu({
              templates: this.state.templates, 
              toggleTemplateEditMenu: this.toggleTemplateEditMenu})
          ), 

          (this.state.templateDetailMode) ? EditTemplateView({
            editMode: this.state.editMode, 
            initialTemplateValues: this.state.currentTemplate, 
            saveTemplate: this.saveTemplate, 
            prospect: this.state.prospects[0], 
            toggleTemplateEditMenu: this.toggleTemplateEditMenu, 
            followupDay: this.state.followupDay}) : ""
      )
    );
  },

  saveTemplate: function(template, newTemplate) {
    templates = this.state.templates
    for(i=0;i< this.state.templates.length; i++)
      if(this.state.templates[i].name == template.name)
        break
    
    console.log(template)
    if(newTemplate){
      template.subject = template.subject
      template.name = template.name
      template.body = template.body
      templates.push(template)

      $.ajax({
        url:'https://api.parse.com/1/classes/Template',
        headers:appConfig.headers,
        type:'POST',
        data:JSON.stringify({
          name : template.name,
          subject: template.subject,
          body: template.body,
          user:{
            __type: 'Pointer',
            className:'_User',
            objectId:JSON.parse(localStorage.currentUser).objectId,
          },
          company:JSON.parse(localStorage.currentUser).company,
        }),
        success: function(res) {
          console.log(res)
        },
        error: function() {
        }
      })
    } else {
      templates[i].subject = template.subject
      templates[i].body = template.body

      $.ajax({
        url:'https://api.parse.com/1/classes/Template/'+templates[i].objectId,
        type:'PUT',
        headers:appConfig.headers,
        data:JSON.stringify({
          name : template.name,
          subject: template.subject,
          body: template.body,
        }),
        success: function(res) {
          console.log(res)
        },
        error: function() {
        }
      })
    }

    this.setState({templates: templates })

  },

  toggleTemplateEditMenu: function(currentTemplate, editMode) {
    editMode = (editMode) ? true : false
    this.setState({
      currentTemplate: currentTemplate,
      templateDetailMode: !this.state.templateDetailMode,
    })
  }
});

},{"./create_template.js.min.js":2,"./edit_template.js.min.js":3,"./followup_timeline.js.min.js":4,"./templates_menu.js.min.js":6}],2:[function(require,module,exports){
/** @jsx react.dom */

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      
    }
  },

  componentDidMount: function() {
    $('.template-body').html(this.state.templateBody)
  },

  clickedOverlay: function() {
    console.log('clicked overlay')
    this.props.toggleTemplateEditMenu()
  },

  changeMode: function() {
    // Update template html on toggle
    console.log('EDIT MODE')
    console.log(this.state.editMode)
    parse_headers = appConfig.parseHeaders
    if(this.state.editMode){
      $('.summer').destroy();
      this.props.saveTemplate({
        name: this.state.name,
        templateBody: $('.summer').code(),
        templateSubject: $('.subject').val(),
      })
      this.setState({
        templateBody: $('.summer').code(),
        templateSubject: $('.subject').val(),
        editMode: !this.state.editMode,
      })
      $.ajax({
        url:'https://api.parse.com/1/classes/Templates/'+this.props.initialTemplateValues.objectId,
        type:'PUT',
        headers:parse_headers,
        data:JSON.stringify({body: $('.summer').code(),subject: $('.subject').val()}),
        success: function(res) {
          console.log(res)
        },
        error: function(err) {
          console.log(err)
        }
      });
    } else {
      this.setState({ editMode: !this.state.editMode })
    }
  },

  componentDidUpdate: function() {
    /* thiss = this; */

    console.log('OTHER')
    if(this.state.editMode){
      console.log('CALLED')
      // Replace Subject 
      $('.subject').val(this.state.templateSubject)

      $('.summer').summernote({
        height: 200,
        toolbar: [
          ['style', ['bold', 'italic', 'underline', 'clear']],
          ['font', ['strikethrough']],
          ['fontsize', ['fontsize']],
          ['color', ['color']],
          ['para', ['ul', 'ol', 'paragraph']],
          ['height', ['height']],
        ]
      })

      // Initialize Editor with html
      $('.summer').code(this.state.templateBody)
    }
  },


  render: function() {
    subjectPlace = (this.state.editMode) ? react.dom.input({style: {display:'inline',width:480}, className: "form-control subject"}) : this.state.templateSubject

    if(this.state.editMode){
       toggleButton = react.dom.a({href: "javascript:", 
             onClick: this.changeMode, 
             className: "btn btn-success btn-xs", 
             style: {display:'block',float:'right',marginTop:5}}, 
            react.dom.i({className: "fa fa-save"}), "   Save Template")
    } else {
       toggleButton = react.dom.a({href: "javascript:", 
             onClick: this.changeMode, 
             className: "btn btn-primary btn-xs", 
             style: {display:'block',float:'right',marginTop:5}}, 
            react.dom.i({className: "fa fa-pencil-square"}), "   Edit Template")
    }

    return (
      react.dom.div(null, 
      react.dom.div({onClick: this.clickedOverlay, id: "editTemplateOverlay"}), 
      react.dom.div({id: "editTemplateView", 
           className: "panel panel-info", 
           style: {display:'block'}}, 
           react.dom.div({className: "panel-heading", style: {height:50}}, 
             react.dom.h6({style: {float:'left'}}, 
               react.dom.i({className: "fa fa-file-text-o"}), 
               "  " + this.props.initialTemplateValues.name
             ), 
          toggleButton
        ), 
        react.dom.div({className: "panel-body"}, 
          react.dom.div({className: "editTemplateTitle"}, 
            react.dom.span(null, "Subject: "), 
            subjectPlace
          ), 
         react.dom.br(null), 
         react.dom.div({className: "templateDetails"}, 
           react.dom.h6({style: {marginBottom:'0'}, className: "text-muted"}, 
             "Created by Mark on Jul. 21, 2014"
           ), 
           react.dom.h6({style: {marginTop:'0'}, className: "text-muted"}, 
             "last updated 7 days ago"
           )
         ), 
        react.dom.br(null), 
        react.dom.div({className: "panel panel-default"}, 
          react.dom.div({className: "panel-body summer template-body"}
          )
        )
    )
)
)
    );
  }
});

},{}],3:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      name: this.props.initialTemplateValues.name,
      body: this.props.initialTemplateValues.body,
      subject: this.props.initialTemplateValues.subject,
      editMode: this.props.initialTemplateValues.editMode
    }
  },

  componentDidMount: function() {
    console.log('did mount')
    $('.template-body').html(this.state.body)
    if(this.state.editMode) {
      $('.summer').summernote({
        height: 200,
        toolbar: [
          ['style', ['bold', 'italic', 'underline', 'clear']],
          ['font', ['strikethrough']],
          ['fontsize', ['fontsize']],
          ['color', ['color']],
          ['para', ['ul', 'ol', 'paragraph']],
          ['height', ['height']],
        ]
      })
    }

    /*
    var example = {
        "glossary": {
            "title": "example glossary",
            "GlossDiv": {
                "title": "S",
                "GlossList": {
                    "GlossEntry": {
                        "ID": "SGML",
                        "SortAs": "SGML",
                        "GlossTerm": "Standard Generalized Markup Language",
                        "Acronym": "SGML",
                        "Abbrev": "ISO 8879:1986",
                        "GlossDef": {
                            "para": "A meta-markup language, used to create markup languages such as DocBook.",
                            "GlossSeeAlso": ["GML", "XML"]
                        },
                        "GlossSee": "markup"
                    }
                }
            },
        "glossary": {
            "title": "example glossary",
            "GlossDiv": {
                "title": "S",
                "GlossList": {
                    "GlossEntry": {
                        "ID": "SGML",
                        "SortAs": "SGML",
                        "GlossTerm": "Standard Generalized Markup Language",
                        "Acronym": "SGML",
                        "Abbrev": "ISO 8879:1986",
                        "GlossDef": {
                            "para": "A meta-markup language, used to create markup languages such as DocBook.",
                            "GlossSeeAlso": ["GML", "XML"]
                        },
                        "GlossSee": "markup"
                    }
                }
            }
        }
        },
    };
    */
    renderjson.set_show_to_level('all')
    prospect = _.pick(this.props.prospect, 
      'company_name', 'name', 'pos'
    )
    prospect.first_name = prospect.name.split(' ')[0]
    prospect.last_name = _.last(prospect.name.split(' '))
    prospect = _.omit(prospect, 'name')

    document.getElementById("editTemplate").appendChild(renderjson(prospect));
    $('#editTemplateOverlay').html()
    thiss = this;
    $('.renderjson').click(function() {
      thiss.props.toggleTemplateEditMenu()
    })

    $('.renderjson').css({
      'position': 'absolute',
      'z-index': '1000000000',
      'background-color':'rgba(0,0,0,0)',
      'border':'0',
      'color':'white',
      'margin-top':'-100px',
      'height': '542px',
      'overflow':'auto',
      'width':'380px'
    })

    $('.key').css({
      'cursor':'pointer'
    })

    $('.timeline').css({
      '-webkit-filter': 'blur(10px)',
    })
    $('#campaign-top-detail').css({
      '-webkit-filter': 'blur(10px)',
    })
  },
  componentWillUnmount:function() {
    $('.timeline').css({
      '-webkit-filter': '',
    })
    $('#campaign-top-detail').css({
      '-webkit-filter': '',
    })
  },

  clickedOverlay: function() {
    console.log('clicked overlay')
    this.props.toggleTemplateEditMenu()
  },

  changeMode: function() {
    // Update template html on toggle
    parse_headers = appConfig.parseHeaders
    if(this.state.editMode){
      $('.summer').destroy();
      $('.timeline').css({
        '-webkit-filter': 'blur(20px)',
      })

      console.log('look at this')
      console.log(name)
      name = (this.props.initialTemplateValues.newTemplate) ? $('#template-name').val() : this.state.name
      this.props.saveTemplate({
        name: name,
        body: $('.summer').code(),
        subject: $('.subject').val(),
      }, this.props.initialTemplateValues.newTemplate)

      this.setState({
        name: $('#template-name').val(),
        body: $('.summer').code(),
        subject: $('.subject').val(),
        editMode: !this.state.editMode,
      })

      objId = this.props.initialTemplateValues.objectId
      $.ajax({
        url:'https://api.parse.com/1/classes/Templates/'+objId,
        type:'PUT',
        headers:parse_headers,
        data:JSON.stringify({body: $('.summer').code(),
                             subject: $('.subject').val()}),
        success: function(res) {
          console.log(res)
        },
        error: function(err) {
          console.log(err)
        }
      });
    } else {
      this.setState({ editMode: !this.state.editMode })
      $('.timeline').css({
        '-webkit-filter': 'blur(20px)',
      })
    }
  },

  componentWillUpdate: function(newProps) {
    console.log('THE NEW PROPS')
    console.log(newProps)
  },

  componentDidUpdate: function() {
    /* thiss = this; */
    console.log('OTHER')
    if(this.state.editMode){
      console.log('CALLED')
      // Replace Subject 
      $('.subject').val(this.state.subject)
      $('#template-name').val(this.state.name)

      $('.summer').summernote({
        height: 200,
        toolbar: [
          ['style', ['bold', 'italic', 'underline', 'clear']],
          ['font', ['strikethrough']],
          ['fontsize', ['fontsize']],
          ['color', ['color']],
          ['para', ['ul', 'ol', 'paragraph']],
          ['height', ['height']],
        ]
      })

      // Initialize Editor with html
      $('.summer').code(this.state.body)
    }
  },


  render: function() {
    subjectPlace = (this.state.editMode) ? React.DOM.input({style: {display:'inline',width:480}, className: "form-control subject"}) : this.state.subject

    if(this.state.editMode){
       toggleButton = React.DOM.a({href: "javascript:", 
             onClick: this.changeMode, 
             className: "btn btn-success btn-xs", 
             style: {display:'block',float:'right',marginTop:5}}, 
            React.DOM.i({className: "fa fa-save"}), "   Save Template")

       if(this.props.initialTemplateValues.newTemplate){
         the_name = React.DOM.input({className: "form-control", 
                           id: "template-name", 
                           style: {float:'left',width:200}})
       }
    } else {
       toggleButton = React.DOM.a({href: "javascript:", 
             onClick: this.changeMode, 
             className: "btn btn-primary btn-xs", 
             style: {display:'block',float:'right',marginTop:5}}, 
            React.DOM.i({className: "fa fa-pencil-square"}), "   Edit Template")

       the_name = React.DOM.h6({style: {float:'left'}}, 
                   React.DOM.i({className: "fa fa-file-text-o"}), " ", 
                   this.state.name
                  )
    }

    return (
      React.DOM.div({id: "editTemplate"}, 
      React.DOM.div({onClick: this.clickedOverlay, id: "editTemplateOverlay"}), 
      React.DOM.div({id: "editTemplateView", 
           className: "panel panel-default", 
           style: {display:'block'}}, 
           React.DOM.div({className: "panel-heading", style: {height:50}}, 
             the_name, 
          toggleButton
        ), 
        React.DOM.div({className: "panel-body"}, 
          React.DOM.div({className: "editTemplateTitle"}, 
            React.DOM.span(null, "Subject: "), 
            subjectPlace
          ), 
         React.DOM.br(null), 
         React.DOM.div({className: "templateDetails"}, 
           React.DOM.h6({style: {marginBottom:'0'}, className: "text-muted"}, 
             "Created by Mark on Jul. 21, 2014"
           ), 
           React.DOM.h6({style: {marginTop:'0'}, className: "text-muted"}, 
             "last updated 7 days ago"
           )
         ), 
        React.DOM.br(null), 
        React.DOM.div({className: "panel panel-default"}, 
          React.DOM.div({className: "panel-body summer template-body"}
          )
        )
    )
)
)
    );
  }
});

},{}],4:[function(require,module,exports){
/** @jsx React.DOM */
var SendEmailModal = require('./send_email_modal.js.min.js')
var TimelineDayElement = require('./timeline_day_element.js.min.js')

module.exports = React.createClass({displayName: 'exports',
  // FollowupTimeline
  getInitialState: function() {
    initialFollowups = this.props.initialFollowups
    initialFollowups = (initialFollowups) ? initialFollowups : []

    return {
      followups: initialFollowups,
      loading: false,
      currentTemplate:''
    }
  },

  componentDidMount: function() {
    thiss = this;
    $('.day').tooltip({
      placement: 'right',
      title:'+ Add a follow-up'
    })
    // Followups that belong to campaign
     company = JSON.stringify(JSON.parse(localStorage.currentUser).company)
     currentCampaign = {
       '__type': 'Pointer',
       'className':'Campaign',
       'objectId':this.props.currentCampaign.objectId
     }
     currentCampaign = JSON.stringify(currentCampaign)
     //qry = 'where={"company":'+company+',"campaign":'+currentCampaign+'}&include=template'
     qry = 'where={"campaign":'+currentCampaign+'}&include=template'
     //qry = 'where={"campaign":'+currentCampaign+'}'
     $.ajax({
       url:'https://api.parse.com/1/classes/Followup',
       type:'GET',
       headers: appConfig.headers,
       data: qry,
       success: function(res) {
         console.log('followup timeline')
         console.log(res.results)
       },
       error: function(err) {
         console.log('error')
         console.log(err)
       }
     })
  },
  
  render: function() {
    batches =  _.countBy(this.props.prospects, 
                      function(prospect) { return prospect.last_contacted })

    timelineElements = []
    followups = (this.state.followups) ? this.state.followups : []
    console.log(followups)
    for(i=0;i< 31;i++){
      batchCount = (batches[i]) ? batches[i] : 0
      
      addTemplateMode = false; 
      currentTemplate = false;
      elementType = false
      for(ii=0;ii< followups.length; ii++){
        // TODO - Replace with underscore method
        //console.log('FOLLOWUPS ERROR')
        //console.log(followups)
        elementType = i == followups[ii].day
        if(elementType) {
          addTemplateMode = (followups[ii].addTemplateMode) ? true : false
          currentTemplate = followups[ii].template
          break
        }
      }

      timelineElements.push(TimelineDayElement({
                              dayCount: i, 
                              templates: this.props.templates, 
                              currentTemplate: currentTemplate, 
                              batchCount: batchCount, 
                              addTemplateMode: addTemplateMode, 
                              elementType: !elementType, 
                              addFollowup: this.addFollowup, 
                              editFollowup: this.editFollowup, 
                              saveFollowup: this.saveFollowup, 
                              removeFollowup: this.removeFollowup, 
                              setCurrentTemplate: this.setCurrentTemplate}))
    }
    return (
      React.DOM.div(null, 
        React.DOM.div({className: "timeline", 
             style: {height:'100%',backgroundColor:'rgb(90, 107, 119)',
                     width:5,marginTop:-35}}, 
             timelineElements
        ), 
        SendEmailModal({prospects: this.props.prospects, 
                        currentTemplate: this.state.currentTemplate})
      )
    );
  },

  createFollowup: function() {
    //
  },         

  addFollowup: function(day) {
    //console.log('called template edit menu')
    followups = this.state.followups
    followups.push({addTemplateMode: true, day: day})
    this.setState({
      followups: followups
    })
  },

  editFollowup: function(day) {
    // find template set editmode is false
    for(i=0;i< this.state.followups.length; i++){
      if(this.state.followups[i].day == day){
        break
      }
    }

    followups = this.state.followups
    followups[i].addTemplateMode = true
    this.setState({followups: followups})
  },

  saveFollowup: function(day, chosenTemplate) {
    new_followups = this.state.followups
    new_followups[day].addTemplateMode = false
    new_followups[day].template = chosenTemplate

    this.setState({followups: new_followups})

    if(new_followups[day].objectId){
      url = "/"+new_followups[i].objectId; type="PUT"

      data = {template:{
        __type:'Pointer',
        className:'Template',
        objectId: chosenTemplate.objectId
      }}
    } else {
      url = ""; type="POST";

      data = {
        day: day,
        campaign: {
          __type: 'Pointer',
          className:'Campaign',
          objectId: this.props.currentCampaign.objectId
        },
        template: {
          __type: 'Pointer',
          className:'Template',
          objectId:chosenTemplate.objectId,
        }
      }
    }

    thiss = this;
    $.ajax({
      url:'https://api.parse.com/1/classes/Followup',
      type:type,
      data:JSON.stringify(data),
      headers:appConfig.headers,
      success: function(res) {
        
        new_followups[day].objectId = res.objectId
        thiss.setState({followups: new_followups})

        console.log(res)
        $.ajax({
          url:'https://api.parse.com/1/classes/Campaign/'+thiss.props.currentCampaign.objectId,
          type:'PUT',
          data:JSON.stringify({followups: {
            __op: 'AddUnique',
            objects:[{
              __type:'Pointer', 
              className:'Followup',
              objectId:res.objectId
            }]
          }}),
          headers:appConfig.headers,
          success: function() {
          },
          error: function() {
          }
        })
      },
      error: function() {

      },
    })
  },

  removeFollowup: function(day) {
    followups = []
    for(i=0;i< this.state.followups.length;i++)
      if(this.state.followups[i].day != day)
        followups.push(this.state.followups[i])
      
    for(i=0;i< this.state.followups.length;i++)
      if(this.state.followups[i].day == day)
        break
    
    this.setState({followups: followups}) 
    id = this.state.followups[i]

    thiss = this;
    if(id) {
      id = id.objectId
      $.ajax({
        url:'https://api.parse.com/1/classes/Followup/'+id,
        headers:appConfig.headers,
        type:'DELETE',
        success: function(res) {
          console.log(res)
        }
      })

     console.log('REMOVE ARRAY')
      $.ajax({
        url:'https://api.parse.com/1/classes/Campaign/'+thiss.props.currentCampaign.objectId,
        headers:appConfig.headers,
        type:'PUT',
        data: JSON.stringify({
          followups: {
            __op : 'Remove',
            objects: [{
              __type: 'Pointer',
              className: 'Followup',
              objectId: id
            }]
          }
        }),
        success: function(res){
          console.log(res)
        },
        error: function() {
        }
      })
    }
  },

  setCurrentTemplate: function(template) {
    this.setState({currentTemplate: template })
  }
});



},{"./send_email_modal.js.min.js":5,"./timeline_day_element.js.min.js":7}],5:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      currentProspect: 0,
    }
  },
  //SendEmailModal
  render: function() {
    //console.log(this.props.currentTemplate)
    prospect = this.props.prospects[this.state.currentProspect]
    prospect = (prospect) ? prospect : {'name':'','email':''}
    //console.log(prospect)
    prospects = []
    for(i=0; i< this.props.prospects.length; i++){
      //console.log(this.props.prospects[i])
      prospects.push(UserPlaceHolder({prospect: this.props.prospects[i]}))
    }
    email = (prospect.email) ? prospect.email.toLowerCase() : ""
    return (
          React.DOM.div({className: "modal fade bs-sendEmail-modal-lg", tabIndex: "-1", role: "dialog", 'aria-labelledby': "mySmallModalLabel", 'aria-hidden': "true", id: "sendEmailModal", style: {top:'10px'}}, 
            React.DOM.div({className: "modal-dialog modal-lg"}, 
              React.DOM.div({className: "modal-content"}, 
                React.DOM.div({className: "modal-header"}, 
                  React.DOM.button({type: "button", className: "close", 'data-dismiss': "modal"}, React.DOM.span({'aria-hidden': "true"}, "×"), 
                    React.DOM.span({className: "sr-only"}, "Close")), 
        React.DOM.button({type: "button", 
                style: {float:'right'}, 
                className: "btn btn-primary"}, "Send Email"), 
        React.DOM.button({type: "button", style: {marginRight:10, float:'right'}, 
                className: "btn btn-default", 'data-dismiss': "modal"}, "Close"), 
                  React.DOM.h4({className: "modal-title", id: "myModalLabel"}, 
                    React.DOM.i({className: "fa fa-envelope"}), "  Send Email" + ' ' +
                    "  ", 
                    React.DOM.small(null, "("+this.props.prospects.length+")")
                  )
                ), 
                React.DOM.div({className: "modal-body", style: {paddingTop:5}}, 
                  React.DOM.h4(null, "People"), 
                  
                  React.DOM.div({className: ""}, 
                    prospects
                  ), 
                  React.DOM.br(null), 
                  React.DOM.h4({style: {display:'inline-block'}}, "Emails    ", 
                    React.DOM.small(null, '1 of '+this.props.prospects.length)), 
                  "   ", 
                  React.DOM.a({href: "javascript:"}, React.DOM.i({className: "fa fa-arrow-left"})), 
                  "   ", 
                  React.DOM.a({href: "javascript:"}, React.DOM.i({className: "fa fa-arrow-right"})), 

                  React.DOM.div(null, 

React.DOM.ul({className: "list-group email-holder"}, 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "To:  "), 
    prospect.name + " - " + email
  ), 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "Subject:  "), " ", this.props.currentTemplate.subject
  ), 
  React.DOM.li({className: "list-group-item body"})
)
  
                  )

                ), 

      React.DOM.div({className: "modal-footer", style: {display:'none'}}, 
        React.DOM.button({type: "button", 
                className: "btn btn-default", 'data-dismiss': "modal"}, "Close"), 
        React.DOM.button({type: "button", 
                className: "btn btn-primary"}, "Send Email")
      )
              )
            )
          )
    );
  },

  parseTemplate: function(templateBody) {
    first_name = prospect.name.split(' ')[0]
    //hiring_signal = prospect.signals

    signals = (prospect.signals) ? prospect.signals[0] : ""
    templateBody = Mustache.render(templateBody, {
      hiring_signal: signals,
      first_name: prospect.name.split(' ')[0]
    })

    console.log(templateBody)
      
    return templateBody
  },

  componentDidUpdate: function() {
    //console.log(this.props.currentTemplate)
    parsedTemplate = this.parseTemplate(this.props.currentTemplate.body)
    
    //$('.body').html(this.props.currentTemplate.body)
    $('.body').html(parsedTemplate)
  }
});

var UserPlaceHolder = React.createClass({displayName: 'UserPlaceHolder',
  render: function() {
    return (
        React.DOM.div({className: "btn-group", style: {marginRight:5,marginBottom:5}}, 
          React.DOM.div({className: "btn-group"}, 
            React.DOM.button({type: "button", 
                    className: "btn btn-success btn-sm"}, 
                    
              (this.props.prospect) ? this.props.prospect.name : "", 
              "  ", React.DOM.i({className: "fa fa-user"})
            )
          ), 
          React.DOM.button({type: "button", className: "btn btn-success btn-sm"}, 
            React.DOM.i({className: "fa fa-trash-o"})
          )
        )
    )
  }
});

},{}],6:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  //TemplatesMenu
  toggleTemplateEditMenu: function(currentTemplate) {
    this.props.toggleTemplateEditMenu(currentTemplate)
  },

  createTemplate: function() {
    this.props.toggleTemplateEditMenu({
      name: '',
      body:'',
      subject:'',
      editMode:true,
      newTemplate: true
    }, true)
  },

  render: function() {
    //console.log(this.props.templates)
    templates = []
    for(i=0;i< this.props.templates.length; i++) {
      templates.push(
        TemplateListItem({
          toggleTemplateEditMenu: this.toggleTemplateEditMenu, 
          template: this.props.templates[i]})
      )
    }

    return (
      React.DOM.div({className: "", style: {padding:'0', borderRight:'2px solid rgba(0,0,0,0)',height:'100%',textAlign:'center'}}, 
        React.DOM.div({className: "panel panel-default", 
             style: {borderRight:0,borderRadius:0,height:'100%', overflow:'auto'}}, 
          React.DOM.div({className: "panel-heading", style: {height:40}}, 
            React.DOM.span({style: {float:'left',fontSize:14,fontWeight:'bold'}}, 
              React.DOM.i({className: "fa fa-file-text-o"}), 
              React.DOM.span({style: {marginLeft:5}}, "Templates")
            ), 
            React.DOM.a({href: "javascript:", 
              className: "btn btn-success btn-xs", 
              onClick: this.createTemplate, 
                style: {float:'right'}}, 
              React.DOM.i({className: "fa fa-plus"}), 
              React.DOM.span({style: {marginLeft:5}}, "Create Template")
            )
          ), 
          React.DOM.ul({className: "list-group", 
              style: {textAlign:'left'}}, 
            templates
          )
        )
      )
    )
  }
});

var TemplateListItem = React.createClass({displayName: 'TemplateListItem',
  toggleTemplateEditMenu: function() {
    console.log(this.props.template)
    template = this.props.template
    template.editMode = false
    this.props.toggleTemplateEditMenu(template)
  },

  render: function() {
    return (
      React.DOM.div(null, 
        React.DOM.a({href: "javascript:", 
          style: {borderBottom: '1px solid rgb(221, 221, 221)',paddingTop:5,paddingBottom:0}, 
           onClick: this.toggleTemplateEditMenu, 
           className: "list-group-item"}, 
           React.DOM.span({className: "label label-default"}, 
             this.props.template.name
           ), 
           React.DOM.h6(null, "Subject:", React.DOM.span({className: "text text-muted"}, 
             " " + this.props.template.subject
           ))
         )
      )
    );
  }
});

},{}],7:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // TimelineDayElement
  // TODO
  // - add prospect list progression
  // - add scheduled followup
  //

  addFollowup: function() {
    this.props.addFollowup(this.props.dayCount)
  },

  render: function() {
    batchCount = this.props.batchCount
    batchStage = (batchCount) ? BatchStage({batchCount: this.props.batchCount}) : ""

    if(this.props.addTemplateMode) {
      mode = EditTemplate({addFollowup: this.props.addFollowup, 
                           saveFollowup: this.props.saveFollowup, 
                           removeFollowup: this.props.removeFollowup, 
                           dayCount: this.props.dayCount, 
                           templates: this.props.templates})
    } else {
      mode = TemplateFollowup({currentTemplate: this.props.currentTemplate, 
                               editFollowup: this.props.editFollowup, 
                               dayCount: this.props.dayCount, 
                               removeFollowup: this.props.removeFollowup, 
                               setCurrentTemplate: this.props.setCurrentTemplate})
    }
    mode = (this.props.elementType) ? "" : mode
    addFollowup = (this.props.elementType) ? this.addFollowup : ""

    return (
      React.DOM.div(null, 
        React.DOM.div({onClick: addFollowup, className: "day", 'data-trigger': "manual"}, 
          "D"+this.props.dayCount
        ), 
        batchStage, mode
      )
    )
  },

  setCurrentTemplate: function(template) {
    this.props.setCurrentTemplate(template)
  }
});

var TemplateFollowup = React.createClass({displayName: 'TemplateFollowup',
  // EditMode False

  setCurrentTemplate: function() {
    this.props.setCurrentTemplate(this.props.currentTemplate)
  },

  render: function() {
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:130,display:'inline-block'}}, 
          React.DOM.i({className: "fa fa-file-text-o"}), "  ", 
          (this.props.currentTemplate) ? this.props.currentTemplate.name : ""
        ), 
        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
                'data-target': ".bs-sendEmail-modal-lg", 
                onClick: this.setCurrentTemplate, 
                'data-toggle': "modal"}, 
          React.DOM.i({className: "fa fa-paper-plane"}), " Send"), " ", 
        React.DOM.button({onClick: this.editFollowup, 
                className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-pencil"})), " ", 
        React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-trash-o"}))
      )
    );
  },

  editFollowup: function(e) { 
    e.preventDefault()
    console.log(this.props.dayCount)
    this.props.editFollowup(this.props.dayCount)
  },

  removeFollowup: function() {
    console.log('remove')
    this.props.removeFollowup(this.props.dayCount)
  }
});

var BatchStage = React.createClass({displayName: 'BatchStage',
  // Different Stages of People Added to Prospect List
  render: function() {
    return (
      React.DOM.div({className: "followup-placement arrow_box tmp"}, 
        React.DOM.span({className: "badge"}, 
          this.props.batchCount
        ), " ", 
        React.DOM.h6({style: {display:'inline-block'}}, 
          "prospects in the sales cycle.")
      )
    );
  }
});

var EditTemplate = React.createClass({displayName: 'EditTemplate',
  // Edit Mode - True
  render: function() {
    options = []
    for(i=0;i< this.props.templates.length; i++) {
      options.push( React.DOM.option(null, this.props.templates[i].name))
    }
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:55,display:'inline-block'}, 
            className: "text-muted"}, 
          "Choose :"
        ), 
        React.DOM.select({className: "form-control input-sm", 
                id: "chooseTemplateForFollowup", 
                style: {display:'inline-block',width:127,marginRight:5}}, 
          options
        ), 

        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
                onClick: this.saveFollowup, 
                style: {marginRight:5}}, 
          React.DOM.i({className: "fa fa-check"})), 
        React.DOM.button({className: "win-btn btn btn-default btn-xs", 
                onClick: this.removeFollowup}, 
          React.DOM.i({className: "fa fa-trash-o"}))
      )
    )
  },

  saveFollowup: function(e) {
    //get template from currentTemplate
    e.preventDefault()
    chosenTemplate = $('#chooseTemplateForFollowup').val()
    console.log(chosenTemplate)
    for(i=0;i< this.props.templates.length; i++){
      if(this.props.templates[i].name == chosenTemplate){
        chosenTemplate = this.props.templates[i]
        break
      }
    }
    console.log(chosenTemplate)
    
    this.props.saveFollowup(this.props.dayCount, chosenTemplate)
  },

  removeFollowup: function(day) {
    this.props.removeFollowup(this.props.dayCount)
  },
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
