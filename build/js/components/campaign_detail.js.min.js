(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // FollowupFeed
  getInitialState: function() {
    return {
      activities: []
    }
  },

  componentDidMount: function() {
    var thiss = this;
    $.ajax({
      url: 'https://api.parse.com/1/classes/EmailEvent',
      data: {include: 'prospect,sent_email', order:'-createdAt', limit:1000},
      headers: appConfig.headers,
      success: function(res) { 
        console.log(res.results)
        thiss.setState({activities: res.results}) 
      },
      error: function() {}
    })
  },

  render: function() {
    activities = _.map(this.state.activities, function(activity) {
      return EmailActivities({activity: activity})
    })

    return (
      React.DOM.div({style: {overflow:'auto',height:417}}, 
        React.DOM.table({className: "table", style: {marginBottom:0}}, 
          React.DOM.thead(null, 
            React.DOM.th(null), 
            React.DOM.th(null, "Sent "), 
            React.DOM.th(null, "Prospect "), 
            React.DOM.th(null, "Email "), 
            React.DOM.th(null, "Events "), 
            React.DOM.th({style: {textAlign:'center'}}, "Action Buttons"), 
            React.DOM.th(null, "Social")
          ), 
          React.DOM.tbody(null, 
            activities
          )
        )
      )
    )
  }
})

var Event = React.createClass({displayName: 'Event',
  render: function() {
    event = this.props.event
    if(event == "delivered"){
      iconType = "fa fa-paper-plane"; eventName = "Delivered";
    }else if(event == "failed") {
      iconType = "fa fa-exclamation-circle"; eventName="Failed"
    }else if(event == "opened"){
      iconType = "fa fa-eye"; eventName="Opened"
    }else if(event == "replied"){
      iconType = "fa fa-mail-reply";  eventName = "Replied"
    }else if(event == "visited"){
      iconType = "fa fa-home";  eventName="Visited"
    }

    return (
      React.DOM.ul({className: "list-group email-events", style: {marginBottom:0}}, 
        React.DOM.li({className: "list-group-item list-group-item-info", style: {paddingTop:16, height:49,textAlign:'center'}}, 
          React.DOM.i({className: iconType}), " ", React.DOM.span({style: {fontWeight:'bold'}}, eventName), " "
        ), 
        React.DOM.li({className: "list-group-item list-group-item-info", style: {display:'none'}}, 
          React.DOM.i({className: "fa fa-home"}), " ", React.DOM.span({style: {fontWeight:'bold'}}, "Visited"), " ", 
          React.DOM.a({href: "javascript:"}, "customerohq.com/resources"), "  "
        ), 
        React.DOM.li({className: "list-group-item list-group-item-info", style: {display:'none'}}, 
          React.DOM.i({className: "fa fa-external-link-square"}), " ", 
          React.DOM.span(null, "2:19 pm"), " ", 
          React.DOM.span({style: {fontWeight:'bold'}}, "clicked "), 
          React.DOM.a({href: "javascript:"}, "customerohq.com")
        )
      )
    )
  }
})

var EmailActivities = React.createClass({displayName: 'EmailActivities',
  render: function() {
    activity = this.props.activity
    prospect = (activity.prospect) ? activity.prospect : {}
    return (
      React.DOM.tr(null, 
          React.DOM.td(null), 
          React.DOM.td(null, 
            React.DOM.h6(null, 
              React.DOM.i({className: "fa fa-clock"}), " ", 
              moment(activity.createdAt).fromNow()
            )
          ), 
          React.DOM.td(null, React.DOM.h6(null, prospect.name)), 
          React.DOM.td(null, React.DOM.h6(null, activity.sent_email.subject)), 
          React.DOM.td({style: {padding:0, fontSize:12}}, 
            Event({event: activity.event_type})
          ), 
          React.DOM.td({style: {textAlign:'center'}}, 
            React.DOM.div({style: {display:'none'}}, 
            React.DOM.a({href: "javascript:", className: "btn btn-success btn-xs", style: {width:70,fontWeight:'bold',marginBottom:2}}, "Email"), React.DOM.br(null), 
            React.DOM.a({href: "javascript:", className: "btn btn-success btn-xs", style: {width:70,fontWeight:'bold',marginBottom:2}}, React.DOM.i({className: "fa fa-cloud-upload"}), " CRM"), React.DOM.br(null), 
            React.DOM.a({href: "javascript:", className: "btn btn-success btn-xs", style: {width:70,fontWeight:'bold',marginBottom:2}}, "Call")
          )
          ), 
          React.DOM.td(null, 
            "lol"
          )
      )
    )
  }
})

},{}]},{},[1])


},{}],2:[function(require,module,exports){
/** @jsx React.DOM */
var TemplatesMenu = require('./templates_menu.js.min.js');
var EditTemplateView = require('./edit_template.js.min.js');
var CreateTemplateView = require('./create_template.js.min.js');
var Timeline = require('./followup_timeline.js.min.js');
var CampaignActivityView = require('./campaign_activity_view.js.min.js')
var CampaignFollowupFeed = require('./campaign_followup_feed.js.min.js')
var CampaignSentEmail = require('./campaign_sent_email.js.min.js')
var CampaignReport = require('./campaign_report.js.min.js')

module.exports = React.createClass({displayName: 'exports',
  // Campaign Detail
  getInitialState: function() {
    return {
      selectedTemplate: 0,
      templateDetailMode: false,
      editMode: false,
      followupDay: 0,
      templates:[],
      currentTemplate:'',
      prospectListCount:'~',
      prospects:[],
      currentScreen: 'timeline',
      newProspects: [],
    }
  },

  changeScreen: function(e) {
    this.setState({currentScreen: $(e.target).text().toLowerCase()})
  },

  componentDidMount: function() {
    thissss = this;
    company = JSON.stringify(JSON.parse(localStorage.currentUser).company)
    qry = 'where={"company":'+company+'}'

    $.ajax({
      url:'https://api.parse.com/1/classes/Template',
      headers: appConfig.headers,
      data: qry,
      success: function(res) { thissss.setState({templates: res.results}) },
      error: function(err) { console.log('error') }
    });

    currentList = JSON.stringify({
      '__type'    : 'Pointer', 
      'className' : 'ProspectList',
      'objectId'  : this.props.selectedCampaign.prospect_list.objectId, 
    })

    qry = 'where={"lists":'+currentList+'}&limit=1000&count=1'
    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospect',
      headers: appConfig.headers,
      data: qry,
      success: function (res) {
        // TODO - why is this being done
        console.log('RESULTS')
        console.log(res)
        console.log(res.results)
        thissss.setState({
          prospects: res.results,
          prospectListCount: res.count 
        })

        if(res.count > 1000){
          for(i=0;i< Math.ceil(res.count/1000); i++) {
            qry = 'where={"lists":'+currentList+'}&limit=1000&count=1'
            $.ajax({
              url: 'https://api.parse.com/1/classes/Prospect',
              headers: appConfig.headers,
              data: qry,
              success: function (res) {
                prospects = thissss.state.prospects
                thissss.setState({prospects:  prospects.concat(res.results)})
              },
              error: function(err) {}
            })
          }
        }
      },
      error: function(err) { }
    })

    var thiss = this;
    selectedCampaign = this.props.selectedCampaign
    console.debug(this.props.selectedCampaign)
    console.debug('Selected Campaign Batches')
    console.debug(this.props.selectedCampaign.batches)
    batches = this.props.selectedCampaign.batches
    if(_.isEqual(batches, [])){ 
      batch_query = { $in: [false, null] }
    } else {
      qry = _.map(batches, function(batch) {
        return appConfig.pointer('ProspectBatch', batch.objectId)
      })
      batch_query = { $nin: qry }
    }
    prospect_list = thiss.props.selectedCampaign.prospect_list.objectId
    $.ajax({
      url:'https://api.parse.com/1/classes/Prospect',
      headers: appConfig.headers,
      selectedCampaign: thiss.props.selectedCampaign,
      data: {
        where: JSON.stringify({
            batches: batch_query,
            lists: appConfig.pointer('ProspectList', prospect_list)
        })
      },
      success: function(res) { 
        console.debug('BATCHES QRY')
        console.debug(res.results) 
        thiss.setState({newProspects: res.results})
      },
      error: function(err) { 
        console.debug('BATCHES QRY ERROR')
        console.debug(this.selectedCampaign)
        console.debug(err.responseText) 
      }
    })
  },

  returnToOverview: function() {
    this.props.toggleScreen('Campaigns')
  },

  render: function() {
    //console.log('campaign detail')
    console.log(this.state.currentScreen)
    console.log(this.state.currentScreen.indexOf("sent email"))
    tab_1 = "campaign-tab-link"
    tab_2 = "campaign-tab-link"
    tab_3 = "campaign-tab-link"
    tab_4 = "campaign-tab-link"
    tab_5 = "campaign-tab-link"
    if(this.state.currentScreen == "timeline"){
      //console.debug('SELECTED CAMPAIGN')
      //console.debug(this.props.selectedCampaign)
      lolscreen = FollowupTimeline({
                  templates: this.state.templates, 
                  prospects: this.state.prospects, 
                  selectedCampaign: this.props.selectedCampaign, 
                  prospectListCount: this.state.prospectListCount, 
                  newProspects: this.state.newProspects, 
                  toggleTemplateEditMenu: this.toggleTemplateEditMenu, 
                  initialFollowups: this.props.selectedCampaign.followups})
      tab_1 = "active-campaign-tab campaign tab-link"
    } else if(this.state.currentScreen == "recent activity") {
      lolscreen = CampaignActivityView(null)
      tab_2 = "active-campaign-tab campaign tab-link"
    } else if(this.state.currentScreen == "scheduled followups") {
      lolscreen = CampaignFollowupFeed({
                    batches: this.props.selectedCampaign.batches, 
                    followups: this.props.selectedCampaign.followups})
      tab_3 = "active-campaign-tab campaign tab-link"
    } else if(this.state.currentScreen == "sent mail") {
      lolscreen = CampaignSentEmail({
                      selectedCampaign: this.props.selectedCampaign})
      tab_4 = "active-campaign-tab campaign tab-link"
    } else if(this.state.currentScreen == "analytics") {
      lolscreen = CampaignReport(null)
      tab_5 = "active-campaign-tab campaign tab-link"
    } else{
      console.log('LOL')
      lolscreen = FollowupTimeline({
                  templates: this.state.templates, 
                  prospects: this.state.prospects, 
                  selectedCampaign: this.props.selectedCampaign, 
                  prospectListCount: this.state.prospectListCount, 
                  newProspects: this.state.newProspects, 
                  toggleTemplateEditMenu: this.toggleTemplateEditMenu, 
                  templates: this.state.templates, 
                  initialFollowups: this.props.selectedCampaign.followups})
    }
    //activeTab = "active-campaign-tab campaign tab-link"
      

    list_type = this.props.selectedCampaign.prospect_list.list_type
    if(list_type == "mining_job")
      list_type = React.DOM.span(null, React.DOM.i({className: "fa fa-cloud-download"}), " ")
    else if(list_type == "signal_list")
      list_type = React.DOM.span(null, React.DOM.i({className: "fa fa-wifi"}), " ")
    else
      list_type = React.DOM.span(null, React.DOM.i({className: "fa fa-list-alt"}), " ")

    batches = this.props.selectedCampaign.batches
    batches = (batches) ? batches : []
    console.log('BATCHES')
    console.log(batches)
    return (
      React.DOM.div({className: "container", 
           style: {width:'100%',height:'100%',paddingLeft:0,paddingRight:0}}, 
        React.DOM.div({style: {marginBottom:15}, id: "campaign-top-detail"}, 
        React.DOM.h5({style: {marginTop:20,marginLeft:20}}, 
          React.DOM.a({href: "javascript:", onClick: this.returnToOverview}, "Campaigns "), 
          React.DOM.small(null, 
            React.DOM.i({style: {marginLeft:10, marginRight:10}, 
               className: "fa fa-chevron-right"})
          ), 
          this.props.selectedCampaign.name
        ), 
        React.DOM.h6({style: {marginLeft:20,display:'inline-block',marginRight:15,marginBottom:0,fontWeight:'bold',fontSize:10}}, 
          React.DOM.span({className: "text-muted"}, "PROSPECT LIST:"), "  "
        ), 
          React.DOM.span({className: "label label-success"}, 
          list_type, 
          this.props.selectedCampaign.prospect_list.name, 
          "     ", 
        React.DOM.i({className: "fa fa-user"}), " ", this.state.prospectListCount
        ), 
        React.DOM.br(null), 
        React.DOM.h6({style: {marginLeft:20,display:'inline-block',marginRight:50,marginTop:0,fontWeight:'bold',fontSize:10}, 
            className: "text-muted"}, 
          "BATCHES:"
        ), 
        React.DOM.span({className: "label label-primary"}, 
          React.DOM.i({className: "fa fa-sitemap"}), " ", 
          (_.isEqual(batches, [])) ? 1 : batches.length
        ), 
        
        React.DOM.div({style: {border:'1px solid #ddd',borderRadius:5,float:'right',marginTop:-23,marginRight:100}}, 
            React.DOM.div({className: "bg-warning", style: {display:'inline-block',padding:10,fontWeight:'bold',cursor:'pointer'}}, 
              React.DOM.span({className: "text-warning"}, 
                React.DOM.i({className: "fa fa-paper-plane"}), " 100%"
              )
            ), 
            React.DOM.div({className: "bg-success", style: {display:'inline-block',padding:10,fontWeight:'bold',cursor:'pointer'}}, 
              React.DOM.span({className: "text-success"}, 
                React.DOM.i({className: "fa fa-eye"}), " 100%"
              )
            ), 
            React.DOM.div({className: "bg-danger", style: {display:'inline-block',padding:10,fontWeight:'bold',cursor:'pointer'}}, 
              React.DOM.span({className: "text-danger"}, 
                React.DOM.i({className: "fa fa-exclamation-circle"}), " 100%"
              )
            )
        ), 
        
        React.DOM.a({href: "javascript:", 
           style: {float: 'right', marginTop: -35, marginRight: 30, display:'none'}, 
           className: "btn btn-success btn-sm"}, 
          React.DOM.i({className: "fa fa-envelope"}), " Send!"
        )
        
        ), 
              React.DOM.ul({className: "nav nav-tabs campaign-tabs", role: "tablist", style: {paddingRight:0}}, 
                React.DOM.li({className: "campaign-tab"}, " ", React.DOM.a({onClick: this.changeScreen, href: "javascript:", className: tab_1}, "TIMELINE")), 
                React.DOM.li({className: "campaign-tab"}, React.DOM.a({onClick: this.changeScreen, href: "javascript:", className: tab_2}, "RECENT ACTIVITY")), 
                React.DOM.li({className: "campaign-tab"}, 
                  React.DOM.a({onClick: this.changeScreen, href: "javascript:", className: tab_3, style: {fontSize:12}}, 
                    "SCHEDULED FOLLOWUPS")), 
                React.DOM.li({className: "campaign-tab"}, React.DOM.a({onClick: this.changeScreen, href: "javascript:", className: tab_4}, "SENT MAIL")), 
                React.DOM.li({className: "campaign-tab"}, React.DOM.a({onClick: this.changeScreen, href: "javascript:", className: tab_5}, "ANALYTICS"))
              ), 
            lolscreen, 

          (this.state.templateDetailMode) ? EditTemplateView({
            editMode: this.state.editMode, 
            initialTemplateValues: this.state.currentTemplate, 
            saveTemplate: this.saveTemplate, 
            prospect: this.state.prospects[0], 
            toggleTemplateEditMenu: this.toggleTemplateEditMenu, 
            followupDay: this.state.followupDay}) : ""
      )
    );
  },

  saveTemplate: function(template, newTemplate) {
    templates = this.state.templates
    for(i=0;i< this.state.templates.length; i++)
      if(this.state.templates[i].name == template.name)
        break
    
    console.log(template)
    if(newTemplate){
      template.subject = template.subject
      template.name = template.name
      template.body = template.body
      templates.push(template)

      $.ajax({
        url:'https://api.parse.com/1/classes/Template',
        headers:appConfig.headers,
        type:'POST',
        data:JSON.stringify({
          name : template.name,
          subject: template.subject,
          body: template.body,
          user:{
            __type: 'Pointer',
            className:'_User',
            objectId:JSON.parse(localStorage.currentUser).objectId,
          },
          company:JSON.parse(localStorage.currentUser).company,
        }),
        success: function(res) {
          console.log(res)
        },
        error: function() {
        }
      })
    } else {
      templates[i].subject = template.subject
      templates[i].body = template.body

      $.ajax({
        url:'https://api.parse.com/1/classes/Template/'+templates[i].objectId,
        type:'PUT',
        headers:appConfig.headers,
        data:JSON.stringify({
          name : template.name,
          subject: template.subject,
          body: template.body,
        }),
        success: function(res) {
          console.log(res)
        },
        error: function() {
        }
      })
    }

    this.setState({templates: templates })

  },

  toggleTemplateEditMenu: function(currentTemplate, editMode) {
    editMode = (editMode) ? true : false
    this.setState({
      currentTemplate: currentTemplate,
      templateDetailMode: !this.state.templateDetailMode,
    })
  }
});

var FollowupTimeline = React.createClass({displayName: 'FollowupTimeline',
  render: function() {
    return (
        React.DOM.div(null, 
          React.DOM.div({className: "col-md-8 panel panel-default", 
               style: {height:436,paddingLeft:305,paddingTop:50,overflow:'auto',borderRight:0,borderRadius:0, borderTop:0}}, 
                Timeline({
                  templates: this.props.templates, 
                  prospects: this.props.prospects, 
                  selectedCampaign: this.props.selectedCampaign, 
                  prospectListCount: this.props.prospectListCount, 
                  newProspects: this.props.newProspects, 
                  toggleTemplateEditMenu: this.props.toggleTemplateEditMenu, 
                  initialFollowups: this.props.initialFollowups})
          ), 
          React.DOM.div({className: "col-md-4", 
               style: {paddingLeft:0,paddingRight:0,height:436}}, 
            TemplatesMenu({
              templates: this.props.templates, 
              toggleTemplateEditMenu: this.props.toggleTemplateEditMenu})
          )
        )

    )
  }
})

},{"./campaign_activity_view.js.min.js":1,"./campaign_followup_feed.js.min.js":3,"./campaign_report.js.min.js":4,"./campaign_sent_email.js.min.js":5,"./create_template.js.min.js":6,"./edit_template.js.min.js":7,"./followup_timeline.js.min.js":8,"./templates_menu.js.min.js":10}],3:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // FollowupFeed
  getInitialState: function() {
    return {
      followups: []
    }
  },

  componentDidMount: function() {
        // for each batch find followups remaining
        // sort followups by ascending followup day
        //
    // Batch Start Date
    // Current Batch Date
  },

  render: function() {
    var thiss = this;
    followups = _.map(this.props.batches, function(batch) {
      now = moment().startOf('day').valueOf()/1000
      batch.currentDay = moment(batch.started).diff(moment(now),  'days') * -1
      return _.map(thiss.props.followups, function(followup) {
        followup.batch = batch
        if(followup.day >= batch.currentDay)
          return followup
      })
    })
    followups = _.sortBy(followups, function(followup){ return followup.day })

    console.debug(followups)

    activities = _.map(followups[0], function(followup) {
      return Followups({followup: followup, batch: followup.batch})
    })
    console.debug(activities)

    return (
      React.DOM.div({style: {overflow:'auto',height:436}}, 
        React.DOM.table({className: "table", style: {marginBottom:0}}, 
          React.DOM.thead(null, 
            React.DOM.th(null), 
            React.DOM.th(null, "Scheduled for "), 
            React.DOM.th(null, "Outreach Stage "), 
            React.DOM.th(null, "Prospect List"), 
            React.DOM.th(null, "Template "), 
            React.DOM.th({style: {textAlign:'center'}}, "Action Buttons")
          ), 
          React.DOM.tbody(null, 
            activities
          )
        )
      )
    )
  }
})

var Followups = React.createClass({displayName: 'Followups',
  render: function() {
    // this.props.batch
    // this.props.followup
    return (
      React.DOM.tr(null, 
          React.DOM.td(null), 
          React.DOM.td(null, 
            React.DOM.h6(null, 
              React.DOM.i({className: "fa fa-clock"}), " " + ' ' +
              "29 minutes ago"
            )
          ), 
          React.DOM.td(null, 
            "second"
          ), 
          React.DOM.td(null, 
            React.DOM.h6({style: {cursor:'pointer'}}, 
            React.DOM.i({className: "fa fa-list-alt"}), "  " + ' ' +
            "Boston VP Sales - Retail"
            )
          ), 
          React.DOM.td(null, 
            React.DOM.h6({style: {cursor:'pointer'}}, 
            React.DOM.i({className: "fa fa-file-text-o"}), "  " + ' ' +
            "Followup #2 - Provide Value ", React.DOM.br(null), 
            React.DOM.span({className: "text-muted"}, " Subject: Just wanted to followup on the last email "), React.DOM.br(null), 
            React.DOM.span({className: "text-muted"}, " Body: Just wanted to followup on the last email ")

            )
          ), 

          React.DOM.td({style: {textAlign:'center'}}, 
            React.DOM.a({href: "javascript:", className: "btn btn-success btn-xs", style: {width:170,fontWeight:'bold',marginBottom:2}}, "Send Now"), React.DOM.br(null), 
            React.DOM.a({href: "javascript:", className: "btn btn-success btn-xs", style: {width:170,fontWeight:'bold',marginBottom:2}}, "Remind me in 1 hour"), React.DOM.br(null)
          )
      )
    )
  }
})

},{}],4:[function(require,module,exports){
/** @jsx React.DOM */

lol = 

module.exports = React.createClass({displayName: 'exports',
  // Campaign Report
  getInitialState: function() {
    return {
    }
  },

  componentDidMount: function() { 
    testData = this.testData()
    var industryChart   = dc.pieChart("#industry-chart"),
        spendHistChart  = dc.barChart("#chart-hist-spend"),
        spenderRowChart = dc.rowChart("#chart-row-spenders");

    // set crossfilter
    var ndx = crossfilter(spendData),
        yearDim  = ndx.dimension(function(d) {return +d.Year;}),
        spendDim = ndx.dimension(function(d) {return Math.floor(d.Spent/10);}),
        nameDim  = ndx.dimension(function(d) {return d.Name;}),
        spendPerYear = yearDim.group().reduceSum(function(d) {return +d.Spent;}),
        spendPerName = nameDim.group().reduceSum(function(d) {return +d.Spent;}),
        spendHist    = spendDim.group().reduceCount();

    industryChart
        .width(200).height(200)
        .dimension(yearDim)
        .group(spendPerYear)
        .innerRadius(50);

    //
    // Batch Analytics - Bubble Chart
    // Batch Block Charts
    // Pie Chart - Industry
    // Revenue - PC
    // Company Size - PC
    // Opens / Replies / Link Clicks / Bounces - Bar Chart
    // Titles - PC
    // Time / Date Email Sent - Line Chart
    // Date Prospected - BC
    //
  },
  
  render: function() {
    return (
      React.DOM.div(null, 
        "Report View", 
        React.DOM.div({id: "industry-chart"})
      )
    )
  },

  testData: function() { 
    return [{"website": "http://www.tencate.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director Sales & Marketing Aerospace", "__type": "Object", "updatedAt": "2014-10-10T13:29:22.516Z", "createdAt": "2014-10-07T15:20:18.481Z", "city": "Coventry, United Kingdom\\u00a0", "archived": true, "loading": false, "objectId": "ftyKCGmR9H", "company_name": "Tencate", "mailgun_id": "<20141010140218.58883.75040@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "u8SetCQOJP"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "P0KmFG92dK"}], "email": "n.tiffin@tencate.com", "prospect_created_at": "2014-10-07T15:20:18.481Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "1001-5000 employees", "name": "Nick Tiffin", "industry": "Textiles", "linkedin_url": "uk.linkedin.com/pub/nick-tiffin/5/434/256", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}, {"website": "http://www.pearson.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director, Sales Performance Management", "__type": "Object", "updatedAt": "2014-10-10T13:29:22.780Z", "createdAt": "2014-10-07T15:20:17.873Z", "city": "Phoenix, Arizona Area\\u00a0", "archived": true, "loading": false, "objectId": "LPiE0CcEsR", "company_name": "Pearson plc", "mailgun_id": "<20141010140219.50015.20571@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "Q57kwN1LQT"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "53K0lWY7hv"}], "email": "jason.linkedin@pearson.com", "prospect_created_at": "2014-10-07T15:20:17.873Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "10,001+ employees", "name": "Jason Upah", "industry": "Education Management", "linkedin_url": "www.linkedin.com/pub/jason-upah/7/233/940", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}, {"website": "http://www.rmwmusic.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director of Sales and Marketing", "__type": "Object", "updatedAt": "2014-10-10T13:29:23.049Z", "createdAt": "2014-10-07T15:20:16.735Z", "city": "Toronto, Ontario, Canada\\u00a0", "archived": true, "loading": false, "opened": true, "objectId": "COSpyXgsD2", "company_name": "RMW Music", "mailgun_id": "<20141010140219.50019.67418@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "3OEKtIxIAp"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "xvGbUYpo43"}], "email": "no_email", "prospect_created_at": "2014-10-07T15:20:16.735Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "11-50 employees", "name": "Laura Nikolic", "industry": "Music", "linkedin_url": "ca.linkedin.com/pub/laura-nikolic/50/450/771", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}, {"website": "http://www.saudiacargo.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director Global Sales Support", "__type": "Object", "updatedAt": "2014-10-10T13:29:23.327Z", "createdAt": "2014-10-07T15:20:16.127Z", "city": "Saudi Arabia\\u00a0", "archived": true, "loading": false, "opened": true, "objectId": "Ke06g6kSk5", "company_name": "Saudi Airlines Cargo Company", "mailgun_id": "<20141010140220.58887.52484@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "o33JavhSpy"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "l3vy2TxF73"}], "email": "no_email", "prospect_created_at": "2014-10-07T15:20:16.127Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "1001-5000 employees", "name": "Rainer Mueller", "industry": "Airlines/Aviation", "linkedin_url": "sa.linkedin.com/pub/rainer-mueller/5/a48/428", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}, {"website": "http://www.shadowzprotection.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director", "__type": "Object", "updatedAt": "2014-10-10T13:29:23.598Z", "createdAt": "2014-10-07T15:20:15.147Z", "city": "New Delhi Area, India\\u00a0", "archived": true, "loading": false, "opened": true, "objectId": "f44YU2Yrm7", "company_name": "M/S Golden Bricks Constructions Pvt. Ltd.", "mailgun_id": "<20141010140220.19960.3157@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "6B4MDqWqtw"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "e9sMFL1QWx"}], "email": "no_email", "prospect_created_at": "2014-10-07T15:20:15.147Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "201-500 employees", "name": "Vivek Narang", "industry": "Security and Investigations", "linkedin_url": "in.linkedin.com/pub/vivek-narang/20/b67/39", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}, {"website": "http://www.shangri-la.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director of Sales and Marketing", "__type": "Object", "updatedAt": "2014-10-10T13:29:23.880Z", "createdAt": "2014-10-07T15:20:13.197Z", "city": "Brisbane, Australia\\u00a0", "archived": true, "loading": false, "objectId": "TSSDEZ3lUA", "company_name": "Shangri-La Hotels and Resorts", "mailgun_id": "<20141010140221.39548.29627@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "PIDGJPqraI"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "mG4U69xDcg"}], "email": "andy.mccutcheon@shangri-la.com", "prospect_created_at": "2014-10-07T15:20:13.197Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "10,001+ employees", "name": "Andy McCutcheon", "industry": "Hospitality", "linkedin_url": "au.linkedin.com/pub/andy-mccutcheon/1a/665/650", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}, {"website": "http://www.tencate.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director Sales & Marketing Aerospace", "__type": "Object", "updatedAt": "2014-10-10T13:29:22.516Z", "createdAt": "2014-10-07T15:20:18.481Z", "city": "Coventry, United Kingdom\\u00a0", "archived": true, "loading": false, "objectId": "ftyKCGmR9H", "company_name": "Tencate", "mailgun_id": "<20141010140813.19956.20454@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "u8SetCQOJP"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "P0KmFG92dK"}], "email": "n.tiffin@tencate.com", "prospect_created_at": "2014-10-07T15:20:18.481Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "1001-5000 employees", "name": "Nick Tiffin", "industry": "Textiles", "linkedin_url": "uk.linkedin.com/pub/nick-tiffin/5/434/256", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}, {"website": "http://www.pearson.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director, Sales Performance Management", "__type": "Object", "updatedAt": "2014-10-10T13:29:22.780Z", "createdAt": "2014-10-07T15:20:17.873Z", "city": "Phoenix, Arizona Area\\u00a0", "archived": true, "loading": false, "objectId": "LPiE0CcEsR", "company_name": "Pearson plc", "mailgun_id": "<20141010140813.58881.85733@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "Q57kwN1LQT"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "53K0lWY7hv"}], "email": "jason.linkedin@pearson.com", "prospect_created_at": "2014-10-07T15:20:17.873Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "10,001+ employees", "name": "Jason Upah", "industry": "Education Management", "linkedin_url": "www.linkedin.com/pub/jason-upah/7/233/940", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}, {"website": "http://www.rmwmusic.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director of Sales and Marketing", "__type": "Object", "updatedAt": "2014-10-10T13:29:23.049Z", "createdAt": "2014-10-07T15:20:16.735Z", "city": "Toronto, Ontario, Canada\\u00a0", "archived": true, "loading": false, "opened": true, "objectId": "COSpyXgsD2", "company_name": "RMW Music", "mailgun_id": "<20141010140814.19938.90169@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "3OEKtIxIAp"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "xvGbUYpo43"}], "email": "no_email", "prospect_created_at": "2014-10-07T15:20:16.735Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "11-50 employees", "name": "Laura Nikolic", "industry": "Music", "linkedin_url": "ca.linkedin.com/pub/laura-nikolic/50/450/771", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}, {"website": "http://www.saudiacargo.com", "campaign": {"className": "Campaign", "__type": "Pointer", "objectId": "nmElU7zcBf"}, "pos": "\\u00a0Director Global Sales Support", "__type": "Object", "updatedAt": "2014-10-10T13:29:23.327Z", "createdAt": "2014-10-07T15:20:16.127Z", "city": "Saudi Arabia\\u00a0", "archived": true, "loading": false, "opened": true, "objectId": "Ke06g6kSk5", "company_name": "Saudi Airlines Cargo Company", "mailgun_id": "<20141010140814.77386.74943@customerohq.com>", "email_guesses": [{"className": "EmailGuess", "__type": "Pointer", "objectId": "o33JavhSpy"}, {"className": "EmailGuess", "__type": "Pointer", "objectId": "l3vy2TxF73"}], "email": "no_email", "prospect_created_at": "2014-10-07T15:20:16.127Z", "company": {"className": "Company", "__type": "Pointer", "objectId": "fqHWp5NsFx"}, "lists": [{"className": "ProspectList", "__type": "Pointer", "objectId": "izLbVulyr6"}], "user": {"className": "User", "__type": "Pointer", "objectId": "xWESiw5Smd"}, "company_size": "1001-5000 employees", "name": "Rainer Mueller", "industry": "Airlines/Aviation", "linkedin_url": "sa.linkedin.com/pub/rainer-mueller/5/a48/428", "batch": {"className": "ProspectBatch", "__type": "Pointer", "objectId": "YPaTGbD56a"}, "className": "Prospect", "queued": true}]
  },

});

},{}],5:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // Sent Mail
  getInitialState: function() {
    return {
      sentEmails: []
    }
  },

  componentDidMount: function() {
    thiss = this;
    qry = {
      include: 'campaign,prospect,prospect.email_guesses.pattern',
      order:'-createdAt',
      campaign: {
        __type: 'Pointer',
        className:'Campaign',
        objectId: this.props.selectedCampaign.objectId,
      }
    }
    $.ajax({
      url: 'https://api.parse.com/1/classes/SentEmail',
      data: qry,
      headers: appConfig.headers,
      success: function(res) { thiss.setState({sentEmails: res.results}) },
      error: function() {}
    })
  },

  render: function() {
    sentEmails = []
    for(i=0;i< this.state.sentEmails.length; i++) 
      sentEmails.push(SentEmailRow({sentEmail: this.state.sentEmails[i]}))

    return (
      React.DOM.div({style: {overflow:'auto',height:417}}, 
        React.DOM.table({className: "table table-striped", style: {marginBottom:0}}, 
          React.DOM.thead(null, 
            React.DOM.th(null), 
            React.DOM.th(null, "Prospect Name"), 
            React.DOM.th(null, "Prospect Email"), 
            React.DOM.th(null, "Template"), 
            React.DOM.th({style: {width:290}}, "Status")
          ), 
          React.DOM.tbody(null, 
            sentEmails
          )
        )
      )
    );
  }
});

var SentEmailRow = React.createClass({displayName: 'SentEmailRow',
  render: function() {
    sentEmail = this.props.sentEmail
    //console.log(sentEmail)

    email = sentEmail.email
    /*
    if(email == "no_email"){
      first = sentEmail.prospect.name.split(' ')[0]
      last = _.last(sentEmail.prospect.name.split(' '))

      pattern = _.findWhere(sentEmail.prospect.email_guesses, {'tried':false})
      data = {first: first, last: last, fi: first[0], li: last[0]}
      email = Mustache.render(pattern.pattern.pattern, data).toLowerCase()
    }
    */

    replied = "label label-default"
    opened = "label label-default"
    delivered = "label label-default"
    queued = "label label-default"

    if(sentEmail.replied) 
      replied = "label label-success"
    if(sentEmail.opened) 
      opened = "label label-success"
    if(sentEmail.delivered) 
      delivered = "label label-success"
    if(sentEmail.queued) 
      queued = "label label-success"

    return (
      React.DOM.tr(null, 
        React.DOM.td({style: {width:100}}, React.DOM.h6(null, 
            React.DOM.i({className: "fa fa-clock"}), 
            moment(sentEmail.createdAt).fromNow())), 
        React.DOM.td({style: {width:200}}, 
          React.DOM.h6({style: {fontSize:14,fontWeight:'bold',marginBottom:0}}, 
            sentEmail.prospect.name), 
          React.DOM.h6({style: {fontStyle:'italic',marginTop:4,marginBottom:0}}, 
            sentEmail.prospect.pos.trim()), 
          React.DOM.h6({style: {marginTop:4,fontWeight:'bold'}}, 
            React.DOM.i({className: "fa fa-building"}), " ", 
            sentEmail.prospect.company_name)
        ), 
        React.DOM.td({style: {width:200}}, React.DOM.h6(null, email)), 
        React.DOM.td(null, 
          React.DOM.h6(null, 
            React.DOM.i({className: "fa fa-file-text-o"}), " " + ' ' +
            "Template"
          )
        ), 
        React.DOM.td({style: {paddingTop:13}}, 
          React.DOM.span({className: queued}, "Queued"), 
          React.DOM.i({className: "fa fa-chevron-circle-right text-muted", 
             style: {paddingLeft:5,paddingRight:5}}), 
          React.DOM.span({className: delivered}, "Delivered"), 
          React.DOM.i({className: "fa fa-chevron-circle-right text-muted", 
             style: {paddingLeft:5,paddingRight:5}}), 
          React.DOM.span({className: opened}, "Opened"), 
          React.DOM.i({className: "fa fa-chevron-circle-right text-muted", 
             style: {paddingLeft:5,paddingRight:5}}), 
          React.DOM.span({className: replied}, "Replied")
        )
      )
    )
  }
})

},{}],6:[function(require,module,exports){
/** @jsx react.dom */

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      
    }
  },

  componentDidMount: function() {
    $('.template-body').html(this.state.templateBody)
  },

  clickedOverlay: function() {
    console.log('clicked overlay')
    this.props.toggleTemplateEditMenu()
  },

  changeMode: function() {
    // Update template html on toggle
    console.log('EDIT MODE')
    console.log(this.state.editMode)
    parse_headers = appConfig.parseHeaders
    if(this.state.editMode){
      $('.summer').destroy();
      this.props.saveTemplate({
        name: this.state.name,
        templateBody: $('.summer').code(),
        templateSubject: $('.subject').val(),
      })
      this.setState({
        templateBody: $('.summer').code(),
        templateSubject: $('.subject').val(),
        editMode: !this.state.editMode,
      })
      $.ajax({
        url:'https://api.parse.com/1/classes/Templates/'+this.props.initialTemplateValues.objectId,
        type:'PUT',
        headers:parse_headers,
        data:JSON.stringify({body: $('.summer').code(),subject: $('.subject').val()}),
        success: function(res) {
          console.log(res)
        },
        error: function(err) {
          console.log(err)
        }
      });
    } else {
      this.setState({ editMode: !this.state.editMode })
    }
  },

  componentDidUpdate: function() {
    /* thiss = this; */

    console.log('OTHER')
    if(this.state.editMode){
      console.log('CALLED')
      // Replace Subject 
      $('.subject').val(this.state.templateSubject)

      $('.summer').summernote({
        height: 200,
        toolbar: [
          ['style', ['bold', 'italic', 'underline', 'clear']],
          ['font', ['strikethrough']],
          ['fontsize', ['fontsize']],
          ['color', ['color']],
          ['para', ['ul', 'ol', 'paragraph']],
          ['height', ['height']],
        ]
      })

      // Initialize Editor with html
      $('.summer').code(this.state.templateBody)
    }
  },


  render: function() {
    subjectPlace = (this.state.editMode) ? react.dom.input({style: {display:'inline',width:480}, className: "form-control subject"}) : this.state.templateSubject

    if(this.state.editMode){
       toggleButton = react.dom.a({href: "javascript:", 
             onClick: this.changeMode, 
             className: "btn btn-success btn-xs", 
             style: {display:'block',float:'right',marginTop:5}}, 
            react.dom.i({className: "fa fa-save"}), "   Save Template")
    } else {
       toggleButton = react.dom.a({href: "javascript:", 
             onClick: this.changeMode, 
             className: "btn btn-primary btn-xs", 
             style: {display:'block',float:'right',marginTop:5}}, 
            react.dom.i({className: "fa fa-pencil-square"}), "   Edit Template")
    }

    return (
      react.dom.div(null, 
      react.dom.div({onClick: this.clickedOverlay, id: "editTemplateOverlay"}), 
      react.dom.div({id: "editTemplateView", 
           className: "panel panel-info", 
           style: {display:'block'}}, 
           react.dom.div({className: "panel-heading", style: {height:50}}, 
             react.dom.h6({style: {float:'left'}}, 
               react.dom.i({className: "fa fa-file-text-o"}), 
               "  " + this.props.initialTemplateValues.name
             ), 
          toggleButton
        ), 
        react.dom.div({className: "panel-body"}, 
          react.dom.div({className: "editTemplateTitle"}, 
            react.dom.span(null, "Subject: "), 
            subjectPlace
          ), 
         react.dom.br(null), 
         react.dom.div({className: "templateDetails"}, 
           react.dom.h6({style: {marginBottom:'0'}, className: "text-muted"}, 
             "Created by Mark on Jul. 21, 2014"
           ), 
           react.dom.h6({style: {marginTop:'0'}, className: "text-muted"}, 
             "last updated 7 days ago"
           )
         ), 
        react.dom.br(null), 
        react.dom.div({className: "panel panel-default"}, 
          react.dom.div({className: "panel-body summer template-body"}
          )
        )
    )
)
)
    );
  }
});

},{}],7:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      name: this.props.initialTemplateValues.name,
      body: this.props.initialTemplateValues.body,
      subject: this.props.initialTemplateValues.subject,
      editMode: this.props.initialTemplateValues.editMode
    }
  },

  componentDidMount: function() {
    console.log('did mount')
    $('.template-body').html(this.state.body)
    if(this.state.editMode) {
      $('.summer').summernote({
        height: 200,
        toolbar: [
          ['style', ['bold', 'italic', 'underline', 'clear']],
          ['font', ['strikethrough']],
          ['fontsize', ['fontsize']],
          ['color', ['color']],
          ['para', ['ul', 'ol', 'paragraph']],
          ['height', ['height']],
        ]
      })
    }

    renderjson.set_show_to_level('all')
    prospect = _.pick(this.props.prospect, 
      'company_name', 'name', 'pos'
    )
    prospect.first_name = prospect.name.split(' ')[0]
    prospect.last_name = _.last(prospect.name.split(' '))
    prospect = _.omit(prospect, 'name')

    document.getElementById("editTemplate").appendChild(renderjson(prospect));
    $('#editTemplateOverlay').html()
    thiss = this;
    $('.renderjson').click(function() {
      thiss.props.toggleTemplateEditMenu()
    })

    $('.renderjson').css({
      'position': 'absolute',
      'z-index': '1000000000',
      'background-color':'rgba(0,0,0,0)',
      'border':'0',
      'color':'white',
      'margin-top':'0px',
      'height': '542px',
      'overflow':'auto',
      'width':'380px'
    })

    $('.key').css({
      'cursor':'pointer'
    })

    $('.timeline').css({
      '-webkit-filter': 'blur(10px)',
    })
    $('#campaign-top-detail').css({
      '-webkit-filter': 'blur(10px)',
    })
  },
  componentWillUnmount:function() {
    $('.timeline').css({
      '-webkit-filter': '',
    })
    $('#campaign-top-detail').css({
      '-webkit-filter': '',
    })
  },

  clickedOverlay: function() {
    console.log('clicked overlay')
    this.props.toggleTemplateEditMenu()
  },

  changeMode: function() {
    // Update template html on toggle
    parse_headers = appConfig.parseHeaders
    if(this.state.editMode){
      $('.summer').destroy();
      $('.timeline').css({
        '-webkit-filter': 'blur(20px)',
      })

      console.log('look at this')
      console.log(name)
      name = (this.props.initialTemplateValues.newTemplate) ? $('#template-name').val() : this.state.name
      this.props.saveTemplate({
        name: name,
        body: $('.summer').code(),
        subject: $('.subject').val(),
      }, this.props.initialTemplateValues.newTemplate)

      this.setState({
        name: $('#template-name').val(),
        body: $('.summer').code(),
        subject: $('.subject').val(),
        editMode: !this.state.editMode,
      })

      objId = this.props.initialTemplateValues.objectId
      $.ajax({
        url:'https://api.parse.com/1/classes/Templates/'+objId,
        type:'PUT',
        headers:parse_headers,
        data:JSON.stringify({body: $('.summer').code(),
                             subject: $('.subject').val()}),
        success: function(res) {
          console.log(res)
        },
        error: function(err) {
          console.log(err)
        }
      });
    } else {
      this.setState({ editMode: !this.state.editMode })
      $('.timeline').css({
        '-webkit-filter': 'blur(20px)',
      })
    }
  },

  componentWillUpdate: function(newProps) {
    console.log('THE NEW PROPS')
    console.log(newProps)
  },

  componentDidUpdate: function() {
    /* thiss = this; */
    console.log('OTHER')
    if(this.state.editMode){
      console.log('CALLED')
      // Replace Subject 
      $('.subject').val(this.state.subject)
      $('#template-name').val(this.state.name)

      $('.summer').summernote({
        height: 200,
        toolbar: [
          ['style', ['bold', 'italic', 'underline', 'clear']],
          ['font', ['strikethrough']],
          ['fontsize', ['fontsize']],
          ['color', ['color']],
          ['para', ['ul', 'ol', 'paragraph']],
          ['height', ['height']],
        ]
      })

      // Initialize Editor with html
      $('.summer').code(this.state.body)
    }
  },


  render: function() {
    subjectPlace = (this.state.editMode) ? React.DOM.input({style: {display:'inline',width:480}, className: "form-control subject"}) : this.state.subject

    if(this.state.editMode){
       toggleButton = React.DOM.a({href: "javascript:", 
             onClick: this.changeMode, 
             className: "btn btn-success btn-xs", 
             style: {display:'block',float:'right',marginTop:5}}, 
            React.DOM.i({className: "fa fa-save"}), "   Save Template")

       if(this.props.initialTemplateValues.newTemplate){
         the_name = React.DOM.input({className: "form-control", 
                           id: "template-name", 
                           style: {float:'left',width:200}})
       }
    } else {
       toggleButton = React.DOM.a({href: "javascript:", 
             onClick: this.changeMode, 
             className: "btn btn-primary btn-xs", 
             style: {display:'block',float:'right',marginTop:5}}, 
            React.DOM.i({className: "fa fa-pencil-square"}), "   Edit Template")

       the_name = React.DOM.h6({style: {float:'left'}}, 
                   React.DOM.i({className: "fa fa-file-text-o"}), " ", 
                   this.state.name
                  )
    }

    return (
      React.DOM.div({id: "editTemplate"}, 
        React.DOM.h5({className: "example-template-title"}, "Example Template Values"), 
        React.DOM.div({className: "example-template-title", 
             style: {marginLeft:215, marginTop:8}}, 
          React.DOM.a({href: "javascript:", 
            className: "btn btn-default btn-xs"}, 
            React.DOM.i({className: "fa fa-chevron-left"})), 
          React.DOM.a({href: "javascript:", 
            style: {marginLeft:5}, 
            className: "btn btn-default btn-xs"}, 
            React.DOM.i({className: "fa fa-chevron-right"}))
        ), 
        React.DOM.div({onClick: this.clickedOverlay, id: "editTemplateOverlay"}), 
          React.DOM.div({id: "editTemplateView", 
               className: "panel panel-default", 
               style: {display:'block'}}, 
               React.DOM.div({className: "panel-heading", style: {height:50}}, 
                 the_name, 
              React.DOM.a({href: "javascript:", 
                className: "btn btn-default btn-xs", 
                style: {float:'right',marginLeft:5,marginTop:5}}, 
                React.DOM.i({className: "fa fa-trash"})
              ), 
              toggleButton
            ), 
            React.DOM.div({className: "panel-body"}, 
              React.DOM.div({className: "editTemplateTitle"}, 
                React.DOM.span(null, "Subject: "), 
                subjectPlace
              ), 
             React.DOM.br(null), 
             React.DOM.div({className: "templateDetails"}, 
               React.DOM.h6({style: {marginBottom:'0'}, className: "text-muted"}, 
                 "Created by Mark on Jul. 21, 2014"
               ), 
               React.DOM.h6({style: {marginTop:'0'}, className: "text-muted"}, 
                 "last updated 7 days ago"
               )
             ), 
            React.DOM.br(null), 
            React.DOM.div({className: "panel panel-default"}, 
              React.DOM.div({className: "panel-body summer template-body"}
              )
            )
        )
      )
    )
    );
  }
});

},{}],8:[function(require,module,exports){
/** @jsx React.DOM */
var SendEmailModal = require('./send_email_modal.js.min.js')
var TimelineDayElement = require('./timeline_day_element.js.min.js')

module.exports = React.createClass({displayName: 'exports',
  // FollowupTimeline
  getInitialState: function() {
    initialFollowups = this.props.initialFollowups
    initialFollowups = (initialFollowups) ? initialFollowups : []
    batches = this.props.selectedCampaign.batches
    batches = (batches) ? batches : []
    return {
      followups: _.compact(initialFollowups),
      loading: false,
      currentTemplate:'',
      currentBatch: '',
      batches : batches
    }
  },

  componentDidMount: function() {
    thiss = this;
    $('.day').tooltip({
      placement: 'right',
      title:'+ Add a follow-up'
    })

    console.log(this.props.selectedCampaign)
     company = JSON.stringify(JSON.parse(localStorage.currentUser).company)
     currentCampaign = appConfig.pointer('Campaign', this.props.selectedCampaign.objectId)
     $.ajax({
       url:'https://api.parse.com/1/classes/Followup',
       type:'GET',
       headers: appConfig.headers,
       data: {
         where: JSON.stringify({
           campaign: currentCampaign,
           company: appConfig.company
         }),
         include:'template',
       },
       success: function(res) {
         console.log('followup timeline')
         console.log(res.results)
       },
       error: function(err) {
         console.log('error')
         console.log(err)
       }
     })
  },

  addFollowupSentToBatch: function(batch, followup) {
    batches = _.map(this.state.batches, function(_batch) {
                  if(_batch.objectId == batch.objectId) {
                    if(_batch.followups)
                      _batch.followups.push(followup)
                    else
                      _batch.followups = [followup]
                  }
                  return _batch
              })
    // Persist
  },
  
  render: function() {
    timelineElements = []
    followups = this.state.followups

    batches = _.map(this.state.batches, function(batch) {
      if(batch){
        now = moment().startOf('day').valueOf()
        batch.currentDay = moment(batch.started).diff(moment(now),  'days') * -1
        return batch
      }
    })
    batches = _.compact(batches)

    for(i=0;i< 31;i++){
      followup = _.findWhere(this.state.followups, {day: i})
      var elementType = (followup) ? true : false
      var currentTemplate = (followup) ? followup.template : false
      var addTemplateMode = (followup) ? followup.addTemplateMode : true
      campaign = this.props.selectedCampaign

      currentBatch = {}
      batch_started_today = false
      alreadySent = false
      batchCount = undefined
      if(i == 0) {
        batchCount = (batches) ? this.props.newProspects.length : this.props.prospects.length
      } else {
        batch = _.findWhere(batches, {currentDay: i})
        if(batch) {
          currentBatch = batch.objectId
          console.debug(batch.objectId)
          batchCount = "~"
          if(followup) {
            _batches = followup.batches
            alreadySent = _.findWhere(_batches, _.pick(batch,'objectId'))
          }
        }
      }

      timelineElements.push(React.DOM.div(null, TimelineDayElement({
                                    dayCount: i, 
                                    elementType: !elementType, 
                                    currentTemplate: currentTemplate, 
                                    batchCount: batchCount, 
                                    currentBatch: currentBatch, 
                                    alreadySent: alreadySent, 
                                    addTemplateMode: addTemplateMode, 
                                    templates: this.props.templates, 
                                    newProspects: this.props.newProspects, 
                                    addFollowup: this.addFollowup, 
                                    editFollowup: this.editFollowup, 
                                    saveFollowup: this.saveFollowup, 
                                    removeFollowup: this.removeFollowup, 
                                 addFollowupSentToBatch: this.addFollowupSentToBatch, 
                                    batches: this.props.selectedCampaign.batches, 
                                    prospectListCount: this.props.prospectListCount, 
                                    setCurrentBatch: this.setCurrentBatch, 
                                    setCurrentTemplate: this.setCurrentTemplate})
                                  ))

      if(i == 0 && _.findWhere(batches, {currentDay: 0})){
          currentBatch = _.findWhere(batches, {currentDay: 0}).objectId
          console.debug('0.5')
          console.debug(currentBatch)
          batchCount = "~"
          timelineElements.push(React.DOM.div(null, TimelineDayElement({
                                  dayCount: 0.5, 
                                  batchCount: batchCount, 
                                  currentBatch: currentBatch, 
                                  newProspects: this.props.newProspects, 
                                  elementType: true, 
                                  batches: this.props.selectedCampaign.batches, 
                                  prospectListCount: this.props.prospectListCount, 
                                  setCurrentBatch: this.setCurrentBatch})
                                ))
      }
    }
    return (
      React.DOM.div(null, 
        React.DOM.div({className: "timeline", 
             style: {height:'100%',backgroundColor:'rgb(90, 107, 119)', width:5,marginTop:-35}}, 
             timelineElements
        ), 
        SendEmailModal({prospects: this.props.prospects, 
                        selectedCampaign: this.props.selectedCampaign, 
                        newProspects: this.props.newProspects, 
                        addFollowupSentToBatch: this.addFollowupSentToBatch, 
                        currentBatch: this.state.currentBatch, 
                        currentTemplate: this.state.currentTemplate})
      )
    );
  },

  createFollowup: function() {
    //
  },         

  addFollowup: function(day) {
    //console.log('called template edit menu')
    followups = this.state.followups
    followups.push({addTemplateMode: true, day: day})
    this.setState({ followups: followups })
  },

  editFollowup: function(day) {
    // find template set editmode is false
    followups = _.map(this.state.followups, function(followup) {
      if(followup.day == day){ followup.addTemplateMode = true }
      return followup
    })
    this.setState({followups: followups})
  },

  saveFollowup: function(day, chosenTemplate) {
    new_followups = _.map(this.state.followups, function(followup) {
      if(followup.day == day){
        followup.addTemplateMode = false
        followup.template = chosenTemplate
      }
      return followup
    })
    this.setState({followups: new_followups})
    followup = _.findWhere(new_followups, {day: day})

      if(followup.objectId){
        url = "/"+followup.objectId; type="PUT"
        data = {template: appConfig.pointer('Template', chosenTemplate.objectId)}
      } else {
        url = ""; type="POST";

          data = {
            day: day,
            campaign : appConfig.pointer('Campaign', 
                                         this.props.selectedCampaign.objectId),
            template: appConfig.pointer('Template', chosenTemplate.objectId),
          }
      }

    thiss = this;
    $.ajax({
      url:'https://api.parse.com/1/classes/Followup'+url,
      type:type,
      data:JSON.stringify(data),
      headers:appConfig.headers,
      success: function(res) {
        new_followups = _.map(new_followups, function(followup) {
          if(followup.day == day) { followup.objectId = false }
          return followup
        })
        thiss.setState({followups: new_followups})

        console.log(res)
        $.ajax({
          url:'https://api.parse.com/1/classes/Campaign/'+thiss.props.selectedCampaign.objectId,
          type:'PUT',
          data:JSON.stringify({followups: {
            __op: 'AddUnique',
            objects:[appConfig.pointer('Followup', res.objectId)]
          }}),
          headers:appConfig.headers,
          success: function() { },
          error: function() { }
        })
      },
      error: function() { },
    })
  },

  removeFollowup: function(day) {
    followups = []
    for(i=0;i< this.state.followups.length;i++)
      if(this.state.followups[i].day != day)
        followups.push(this.state.followups[i])
      
    for(i=0;i< this.state.followups.length;i++)
      if(this.state.followups[i].day == day)
        break
    
    this.setState({followups: followups}) 
    id = this.state.followups[i]

    thiss = this;
    if(id) {
      id = id.objectId
      $.ajax({
        url:'https://api.parse.com/1/classes/Followup/'+id,
        headers:appConfig.headers,
        type:'DELETE',
        success: function(res) { console.log(res) }
      })

     console.log('REMOVE ARRAY')
      $.ajax({
        url:'https://api.parse.com/1/classes/Campaign/'+thiss.props.selectedCampaign.objectId,
        headers:appConfig.headers,
        type:'PUT',
        data: JSON.stringify({
          followups: {
            __op : 'Remove',
            objects: [appConfig.pointer('Followup', id)]
          }
        }),
        success: function(res){ console.log(res) },
        error: function() { }
      })
    }
  },

  setCurrentBatch: function(currentBatch) {
    this.setState({currentBatch: currentBatch})
  },

  setCurrentTemplate: function(template) {
    this.setState({currentTemplate: template })
  }
});



},{"./send_email_modal.js.min.js":9,"./timeline_day_element.js.min.js":11}],9:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      currentProspect: 0,
    }
  },

  sendEmails: function() {
    selectedCampaign = this.props.selectedCampaign
    campaign_id = selectedCampaign.objectId
    prospectlist_id = selectedCampaign.prospect_list.objectId
    template_id = this.props.currentTemplate.objectId
    
    $.ajax({
      url:'https://nameless-retreat-3525.herokuapp.com/send_email',
      //url:'http://127.0.0.1:5000/send_email',
      data: {
        template_id : template_id,
        campaign_id : campaign_id,
        prospectlist_id : prospectlist_id,
      },
      success: function(res) { console.log(res.results) },
      error: function(err) { console.log(err) }
    })

    /*
    */
    // Update Followup
    // Persist Followup
    // close modal
  },

  render: function() {
    prospect = this.props.prospects[this.state.currentProspect]
    prospect = (prospect) ? prospect : {'name':'','email':''}

    var thiss = this;
    console.debug('SEND EMAIL BATCH')
    console.debug(this.props.currentBatch)
    newBatch = _.isEqual(this.props.currentBatch, {})
    prospects = (newBatch) ? this.props.newProspects : this.props.prospects
    if(newBatch){
      prospects = _.map(this.props.newProspects, function(prospect) {
          return UserPlaceHolder({prospect: prospect})
      })
    } else {
      prospects = _.map(this.props.prospects, function(prospect) {
        if(_.findWhere(prospect.batches, {objectId: thiss.props.currentBatch}))
          return UserPlaceHolder({prospect: prospect})
      })
    }
    prospects = _.compact(prospects)
    console.debug(prospects)
    console.debug(prospects.length)
    prospectCount = prospects.length
    email = (prospect.email) ? prospect.email.toLowerCase() : ""
    return (
      React.DOM.div({className: "modal fade bs-sendEmail-modal-lg", tabIndex: "-1", 
           role: "dialog", 'aria-labelledby': "mySmallModalLabel", 'aria-hidden': "true", 
           id: "sendEmailModal", style: {top:'10px'}}, 
            React.DOM.div({className: "modal-dialog modal-lg"}, 
              React.DOM.div({className: "modal-content"}, 
                React.DOM.div({className: "modal-header"}, 
                  React.DOM.button({type: "button", className: "close", 'data-dismiss': "modal"}, React.DOM.span({'aria-hidden': "true"}, "×"), 
                    React.DOM.span({className: "sr-only"}, "Close")), 
        React.DOM.button({type: "button", 
                onClick: this.sendEmails, 
                style: {float:'right'}, 
                className: "btn btn-primary btn-sm"}, 
                React.DOM.i({className: "fa fa-paper-plane"}), "  Send Email"), 
        React.DOM.button({type: "button", style: {marginRight:10, float:'right'}, 
                className: "btn btn-default btn-sm", 'data-dismiss': "modal"}, "Close"), 
                  React.DOM.h4({className: "modal-title", id: "myModalLabel"}, 
                    React.DOM.i({className: "fa fa-envelope"}), "  Send Email" + ' ' +
                    "  ", 
                    React.DOM.small(null, "("+prospectCount+")")
                  )
                ), 
                React.DOM.div({className: "modal-body", style: {paddingTop:5}}, 
                  React.DOM.h4(null, "People"), 
                  
                  React.DOM.div({className: "prospect-container"}, 
                    prospects
                  ), 
                  React.DOM.br(null), 
                  React.DOM.h4({style: {display:'inline-block'}}, "Emails    ", 
                    React.DOM.small(null, (this.state.currentProspect+1)+' of '+prospectCount
                  )), 
                  "   ", 
                  React.DOM.a({href: "javascript:", 
              className: (this.state.currentProspect == 0 ) ? "btn disabled" : "btn", 
                    onClick: this.previousProspect}, React.DOM.i({className: "fa fa-arrow-left"})), 
                  React.DOM.a({href: "javascript:", 
            className: (this.state.currentProspect == 135 ) ? "btn disabled" : "btn", 
                    onClick: this.nextProspect}, React.DOM.i({className: "fa fa-arrow-right"})), 

                  React.DOM.div(null, 

React.DOM.ul({className: "list-group email-holder", style: {borderTop:'solid 1px #eee'}}, 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "To:  "), 
    prospect.name + " - " + email
  ), 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "Subject:  "), " ", this.props.currentTemplate.subject
  ), 
  React.DOM.li({className: "list-group-item body"})
)
  
                  )

                ), 

      React.DOM.div({className: "modal-footer", style: {display:'none'}}, 
        React.DOM.button({type: "button", 
                className: "btn btn-default", 'data-dismiss': "modal"}, "Close"), 
        React.DOM.button({type: "button", 
                className: "btn btn-primary"}, "Send Email")
      )
              )
            )
          )
    );
  },

  previousProspect: function() {
    this.setState({currentProspect: this.state.currentProspect-1 })
  },

  nextProspect: function() {
    this.setState({currentProspect: this.state.currentProspect+1 })
  },

  parseTemplate: function(templateBody) {
    first_name = prospect.name.split(' ')[0]
    //hiring_signal = prospect.signals

    signals = (prospect.signals) ? prospect.signals[0] : ""
    templateBody = Mustache.render(templateBody, {
      hiring_signal: signals,
      first_name: prospect.name.split(' ')[0]
    })

    console.log(templateBody)
      
    return templateBody
  },

  componentDidUpdate: function() {
    //console.log(this.props.currentTemplate)
    parsedTemplate = this.parseTemplate(this.props.currentTemplate.body)
    
    //$('.body').html(this.props.currentTemplate.body)
    $('.body').html(parsedTemplate)
  }
});

var UserPlaceHolder = React.createClass({displayName: 'UserPlaceHolder',
  render: function() {
    return (
        React.DOM.div({className: "btn-group", style: {marginRight:5,marginBottom:5}}, 
          React.DOM.div({className: "btn-group"}, 
            React.DOM.button({type: "button", 
                    className: "btn btn-success btn-sm"}, 
              React.DOM.i({className: "fa fa-user"}), "  ", 
              (this.props.prospect) ? this.props.prospect.name : ""
            )
          ), 
          React.DOM.button({type: "button", className: "btn btn-success btn-sm"}, 
            React.DOM.i({className: "fa fa-trash-o"})
          )
        )
    )
  }
});

},{}],10:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  //TemplatesMenu
  toggleTemplateEditMenu: function(currentTemplate) {
    this.props.toggleTemplateEditMenu(currentTemplate)
  },

  createTemplate: function() {
    this.props.toggleTemplateEditMenu({
      name: '',
      body:'',
      subject:'',
      editMode:true,
      newTemplate: true
    }, true)
  },

  render: function() {
    //console.log(this.props.templates)
    templates = []
    for(i=0;i< this.props.templates.length; i++) {
      templates.push(
        TemplateListItem({
          toggleTemplateEditMenu: this.toggleTemplateEditMenu, 
          template: this.props.templates[i]})
      )
    }

    return (
      React.DOM.div({className: "", style: {padding:'0', height:'100%',textAlign:'center'}}, 
        React.DOM.div({className: "panel panel-default", 
             style: {borderRight:0,borderRadius:0,height:'100%', overflow:'auto'}}, 
          React.DOM.div({className: "panel-heading", style: {height:40}}, 
            React.DOM.span({style: {float:'left',fontSize:14,fontWeight:'bold'}}, 
              React.DOM.i({className: "fa fa-file-text-o"}), 
              React.DOM.span({style: {marginLeft:5}}, "Templates")
            ), 
            React.DOM.a({href: "javascript:", 
              className: "btn btn-success btn-xs", 
              onClick: this.createTemplate, 
                style: {float:'right'}}, 
              React.DOM.i({className: "fa fa-plus"}), 
              React.DOM.span({style: {marginLeft:5}}, "Create Template")
            )
          ), 
          React.DOM.ul({className: "list-group", 
              style: {textAlign:'left'}}, 
            templates
          )
        )
      )
    )
  }
});

var TemplateListItem = React.createClass({displayName: 'TemplateListItem',
  toggleTemplateEditMenu: function() {
    console.log(this.props.template)
    template = this.props.template
    template.editMode = false
    this.props.toggleTemplateEditMenu(template)
  },

  render: function() {
    return (
      React.DOM.div(null, 
        React.DOM.a({href: "javascript:", 
          style: {borderBottom: '1px solid rgb(221, 221, 221)',paddingTop:5,paddingBottom:0}, 
           onClick: this.toggleTemplateEditMenu, 
           className: "list-group-item"}, 
           React.DOM.span({className: "label label-default"}, 
             this.props.template.name
           ), 
           React.DOM.h6(null, "Subject:", React.DOM.span({className: "text text-muted"}, 
             " " + this.props.template.subject
           ))
         )
      )
    );
  }
});

},{}],11:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // TimelineDayElement
  // TODO
  // - add prospect list progression
  // - add scheduled followup
  //
  getInitialState: function() {
    // 
    return {
      followupCompleted: 0,
    }
  },

  addFollowup: function() {
    this.props.addFollowup(this.props.dayCount)
  },

  render: function() {
    if(this.props.addTemplateMode) {
      mode = EditTemplate({addFollowup: this.props.addFollowup, 
                           saveFollowup: this.props.saveFollowup, 
                           removeFollowup: this.props.removeFollowup, 
                           dayCount: this.props.dayCount, 
                           templates: this.props.templates})
    } else {
      mode = TemplateFollowup({currentTemplate: this.props.currentTemplate, 
                               editFollowup: this.props.editFollowup, 
                               dayCount: this.props.dayCount, 
                               currentBatch: this.props.currentBatch, 
                               hasBatch: typeof(this.props.batchCount) != "undefined", 
                               setCurrentBatch: this.props.setCurrentBatch, 
                               dayCount: this.props.dayCount, 
                               removeFollowup: this.props.removeFollowup, 
                               setCurrentTemplate: this.props.setCurrentTemplate})
    }
    if(this.props.alreadySent) {
      mode = FollowupCompleted({currentTemplate: this.props.currentTemplate})
    }

    mode = (this.props.elementType) ? "" : mode
    addFollowup = (this.props.elementType) ? this.addFollowup : ""
    if(typeof(this.props.batchCount) != "undefined")
      batchStage = BatchStage({currentBatch: this.props.currentBatch, 
                               newProspects: this.props.newProspects, 
                               prospectListCount: this.props.prospectListCount, 
                               batchCount: this.props.batchCount, 
                               hasScheduledEmail: mode != "", 
                               dayCount: this.props.dayCount})
    else
      batchStage = ""

    dayCount = (this.props.dayCount != 0.5) ? "D"+this.props.dayCount : ""

    return (
      React.DOM.div(null, 
        React.DOM.div({onClick: addFollowup, className: "day", 'data-trigger': "manual"}, 
          dayCount
        ), 
        mode, batchStage
      )
    )
  },

  setCurrentTemplate: function(template) {
    this.props.setCurrentTemplate(template)
  }
});

var FollowupCompleted = React.createClass({displayName: 'FollowupCompleted',
  render: function() {
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:130,display:'inline-block'}}, 
          React.DOM.i({className: "fa fa-file-text-o"}), "  ", 
          (this.props.currentTemplate) ? this.props.currentTemplate.name : ""
        ), 
        React.DOM.button({className: "win-btn btn btn-success btn-xs disabled", 
                'data-target': ".bs-sendEmail-modal-lg", 
                onClick: this.setCurrentTemplate, 
                'data-toggle': "modal"}, 
          React.DOM.i({className: "fa fa-check"}), " Sent"), " ", 
        React.DOM.button({onClick: this.editFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-pencil"})), " ", 
        React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-trash-o"}))
      )
                                         )
  }
})

var TemplateFollowup = React.createClass({displayName: 'TemplateFollowup',
  // EditMode False

  setCurrentTemplate: function() {
    this.props.setCurrentTemplate(this.props.currentTemplate)
    // setCurrentBatch
    this.props.setCurrentBatch(this.props.currentBatch)
    $('.bs-sendEmail-modal-lg').modal()
  },

  waitForBatch: function() {
    alertify.log("You must wait for a batch!");
  },

  render: function() {
    trash = (this.props.dayCount == 0) ?  React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-trash-o"})) : React.DOM.button({onClick: this.removeFollowup, className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-trash-o"})) 
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:130,display:'inline-block'}}, 
          React.DOM.i({className: "fa fa-file-text-o"}), "  ", 
          (this.props.currentTemplate) ? this.props.currentTemplate.name : ""
        ), 
        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
        onClick: (this.props.hasBatch) ? this.setCurrentTemplate : this.waitForBatch, 
                'data-toggle': "modal"}, 
          React.DOM.i({className: "fa fa-paper-plane"}), " Send"), " ", 
        React.DOM.button({onClick: this.editFollowup, 
                className: "win-btn btn btn-default btn-xs"}, 
          React.DOM.i({className: "fa fa-pencil"})), " ", 
        trash
      )
    );
  },

  editFollowup: function(e) { 
    e.preventDefault()
    console.log(this.props.dayCount)
    this.props.editFollowup(this.props.dayCount)
  },

  removeFollowup: function() {
    console.log('remove')
    this.props.removeFollowup(this.props.dayCount)
  }
});

var BatchStage = React.createClass({displayName: 'BatchStage',
  // Different Stages of People Added to Prospect List
  getInitialState: function() {
    // 
    return {
      initialBatchCount: this.props.batchCount
    }
  },

  componentDidMount: function() {
    // state
    //console.debug('INSIDE BATCH '+this.props.dayCount)
    console.debug(this.props.currentBatch)
    _batches = appConfig.pointer('ProspectBatch', this.props.currentBatch)
    if(this.props.batchCount == "~") {
      // Why doesnt this work 
      var thissss = this;
      console.debug('INSIDE BATCH '+thiss.props.dayCount)
      console.debug(_batches)
      $.ajax({
        url:'https://api.parse.com/1/classes/Prospect',
        batches: _batches,
        data: {
          where: JSON.stringify({
            batches: _batches
          }),
          count: true,
        },
        headers: appConfig.headers,
        success: function(res) { 
          //console.debug('SUCCESS GET COUNT ' + res.count)
          //console.debug(res.results) 
          thissss.setState({initialBatchCount: res.count})
        },
        error: function(err) { 
          thissss.setState({initialBatchCount: 0 })
        }
      })
    }
  },

  componentWillReceiveProps: function(nextProps) {
    if(this.props.dayCount == 0)
      this.setState({ initialBatchCount: nextProps.batchCount })
  },


  render: function() {
    if(this.props.hasScheduledEmail)
      batchStageStyle = {top:-42, left:6}
    else
      batchStageStyle = {}

    if(this.props.dayCount == 0.5)
      batchStageStyle.left = 7

    //console.log('BATCH STAGE')
    //console.log(this.props)
    //console.debug(this.props.currentBatch)                                                           

    return (
      React.DOM.div({className: "followup-placement arrow_box tmp", style: batchStageStyle}, 
        React.DOM.span({className: "label label-primary"}, 
          React.DOM.i({className: "fa fa-user"}), " ", 
          this.state.initialBatchCount
        ), " ", 
        React.DOM.h6({style: {display:'inline-block'}}, 
          "prospects in the sales cycle.")
      )
    );
  }
});

var EditTemplate = React.createClass({displayName: 'EditTemplate',
  // Edit Mode - True
  render: function() {
    options = []
    for(i=0;i< this.props.templates.length; i++) {
      options.push( React.DOM.option(null, this.props.templates[i].name))
    }
    trash = (this.props.dayCount == 0) ?  React.DOM.button({onClick: this.removeFollowup, 
                className: "win-btn btn btn-default btn-xs disabled"}, 
          React.DOM.i({className: "fa fa-trash-o"})) : React.DOM.button({onClick: this.removeFollowup, className: "win-btn btn btn-default btn-xs"}, " ", React.DOM.i({className: "fa fa-trash-o"})) 
    return (
      React.DOM.div({className: "followup-placement arrow_box_1 tmp_2"}, 
        React.DOM.h6({style: {width:55,display:'inline-block'}, 
            className: "text-muted"}, 
          "Choose :"
        ), 
        React.DOM.select({className: "form-control input-sm", 
                id: "chooseTemplateForFollowup", 
                style: {display:'inline-block',width:127,marginRight:5}}, 
          options
        ), 

        React.DOM.button({className: "win-btn btn btn-success btn-xs", 
                onClick: this.saveFollowup, 
                style: {marginRight:5}}, 
          React.DOM.i({className: "fa fa-check"})), 
        trash
      )
    )
  },

  saveFollowup: function(e) {
    //get template from currentTemplate
    e.preventDefault()
    chosenTemplate = $('#chooseTemplateForFollowup').val()
    console.log(chosenTemplate)
    for(i=0;i< this.props.templates.length; i++){
      if(this.props.templates[i].name == chosenTemplate){
        chosenTemplate = this.props.templates[i]
        break
      }
    }
    console.log(chosenTemplate)
    
    this.props.saveFollowup(this.props.dayCount, chosenTemplate)
  },

  removeFollowup: function(day) {
    this.props.removeFollowup(this.props.dayCount)
  },
});


},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
