(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // Campaigns
  getInitialState: function() {
    return {
      selectedScreen: 'Overview',
    }
  },

  changeSelectedCampaign: function(campaign) {
    //this.props.toggleScreen('CampaignDetail')
    this.props.changeSelectedCampaign('CampaignDetail', campaign)
  },

  render: function() {
    campaigns = []
    console.log(this.props)
    for(i=0;i< this.props.campaigns.length; i++){ 
      campaigns.push(CampaignRow({
                        toggleScreen: this.toggleScreen, 
                        deleteCampaign: this.props.deleteCampaign, 
                        changeSelectedCampaign: this.changeSelectedCampaign, 
                        campaign: this.props.campaigns[i]}) )
    }
    return (
      React.DOM.div({style: {overflow:'auto',height:550}}, 
        React.DOM.table({className: "table table-striped"}, 
          React.DOM.thead(null, 
            React.DOM.th(null), 
            React.DOM.th(null, "Campaign Name"), 
            React.DOM.th(null, "Prospect List"), 
            React.DOM.th(null, "Size"), 
            React.DOM.th({style: {textAlign:'center'}}, "Delivered"), 
            React.DOM.th({style: {textAlign:'center'}}, "Opened"), 
            React.DOM.th({style: {textAlign:'center',display:'none'}}, "Replied"), 
            React.DOM.th({style: {textAlign:'center',display:'none'}}, "Link Clicks"), 
            React.DOM.th({style: {textAlign:'center'}}, "Bounced"), 
            React.DOM.th({style: {width:150,textAlign:'center'}}, " ")
          ), 
          React.DOM.tbody(null, 
            campaigns
          )
        )
      )
    );
  },
});

var CampaignRow = React.createClass({displayName: 'CampaignRow',
  getInitialState: function() {
    return {
      delivered: '~',
      opened: '~',
      bounced: '~',
      prospectListCount: '~'
    }
  },

  DeleteCampaign: function(e) {
    var thiss = this;
    console.log('DELETE CAMPAIGN')
    e.stopPropagation()
    swal({   
      title: "Are you sure?",   
      text: "You will not be able to recover this Campaign!",
      type: "warning",   
      showCancelButton: true,   
      confirmButtonColor: "#DD6B55",   
      confirmButtonText: "Yes, delete it!",   
      closeOnConfirm: false }, 
      function(){   
        swal("Deleted!", "Your campaign has been deleted.", "success"); 
        console.log('deleted')
        thiss.props.deleteCampaign(thiss.props.campaign.objectId)
      });
  },

  toggleScreen: function() {
    //this.props.toggleScreen()
    this.props.changeSelectedCampaign(this.props.campaign)
  },

  componentDidMount: function() {
    var thiss = this;
    list = this.props.campaign.prospect_list
    list = (list) ? list.objectId : ""
    qry = {
      where: JSON.stringify({lists: appConfig.pointer('ProspectList',list)}),
      count: true
    }
    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospect',
      headers: appConfig.headers,
      data: qry,
      success: function(res) { thiss.setState({prospectListCount: res.count})},
      error: function(err) { console.log(err.responseText) }
    })
    campaignId = this.props.campaign.objectId
    qry = {
      where: JSON.stringify({campaign: appConfig.pointer('Campaign', campaignId)}),
      limit: 1000,
      count: true
    }
    $.ajax({
      url:'https://api.parse.com/1/classes/SentEmail',
      data: qry,
      headers: appConfig.headers,
      success: function(res) { thiss.setState({delivered: res.count})},
      error: function(err) { console.log(err.responseText) }
    })
    qry_1 = {
      where: JSON.stringify({
        campaign: appConfig.pointer('Campaign', campaignId),
        opened: {"$gte": 0} 
      }),
      count: true
    }
    $.ajax({
      url:'https://api.parse.com/1/classes/SentEmail',
      data: qry_1,
      headers: appConfig.headers,
      success: function(res) { thiss.setState({opened : res.count}) },
      error: function(err) { console.log(err.responseText) }
    })
    qry_2 = {
      where: JSON.stringify({
        campaign: appConfig.pointer('Campaign', campaignId),
        failed: {"$gte": 0} 
      }),
      count: true
    }
    $.ajax({
      url:'https://api.parse.com/1/classes/SentEmail',
      data: qry_2,
      headers: appConfig.headers,
      success: function(res) { thiss.setState({bounced : res.count}) },
      error: function(err) { console.log(err.responseText) }
    })
  },

  render: function() {
    prospect_list = (this.props.campaign.prospect_list) ? this.props.campaign.prospect_list : {list_type:"", name:""}
    if(prospect_list.list_type == "signal_list")
        iconType = React.DOM.i({className: "fa fa-wifi", style: {marginRight:5}})
    else if(prospect_list.list_type == "mining_job")
        iconType = React.DOM.i({className: "fa fa-cloud-download", style: {marginRight:5}})
    else 
        iconType =""
    return (
      React.DOM.tr({style: {cursor:'pointer'}, onClick: this.toggleScreen}, 
        React.DOM.td(null), 
        React.DOM.td(null, " ", React.DOM.h6(null, 
            this.props.campaign.name
        ), " "), 
        React.DOM.td(null, " ", React.DOM.h6(null, 
            iconType, 
            prospect_list.name
        ), " "), 
        React.DOM.td(null, 
          React.DOM.div({className: "label label-primary"}, 
            React.DOM.i({className: "fa fa-user"}), "  ", 
            this.state.prospectListCount
          )
        ), 
        React.DOM.td({style: {textAlign:'center',padding:12}}, 
          React.DOM.span({className: "badge", style: {backgroundColor:'#f0ad4e',width:50}}, 
            React.DOM.i({className: "fa fa-paper-plane", style: {float:'left'}}), "  ", 
            this.state.delivered
          )
        ), 
        React.DOM.td({style: {textAlign:'center',padding:12}}, 
          React.DOM.span({className: "label label-success"}, 
            React.DOM.i({className: "fa fa-eye"}), "   ", this.state.opened, " ")
        ), 
        React.DOM.td({style: {textAlign:'center',padding:12,display:'none'}}, 
          React.DOM.span({className: "label label-primary"}, 
            React.DOM.i({className: "fa fa-mail-reply"}), "  ", 
            this.state.bounced)
        ), 
        React.DOM.td({style: {textAlign:'center',padding:12,display:'none'}}, 
          React.DOM.span({className: "label label-info"}, 
            React.DOM.i({className: "fa fa-external-link-square"}), "  " + ' ' +
            "18%")
        ), 
        React.DOM.td({style: {textAlign:'center',padding:12}}, 
          React.DOM.span({className: "label label-default"}, 
            React.DOM.i({className: "fa fa-exclamation-circle"}), "  ", 
            this.state.bounced)
        ), 
        React.DOM.td({style: {textAlign:'center',paddingTop:12}}, 
          React.DOM.a({href: "javascript:", className: "btn btn-primary btn-xs", 
            style: {backgroundImage: 'linear-gradient(180deg, #0096ff 0%, #005dff 100%) !important;',display:'none'}}, 
            React.DOM.i({className: "fa fa-copy", style: {fontWeight:'bold'}}), "  Clone"), 

          React.DOM.a({href: "javascript:", 
             className: "btn-default", 
             onClick: this.DeleteCampaign, 
             style: {marginLeft:5}}, " ", React.DOM.i({className: "fa fa-trash-o"}))
        ), 
        React.DOM.td({style: {textAlign:'center',padding:12,display:'none'}}, 
          React.DOM.h4({style: {margin:0}}, 
            React.DOM.span({className: "label label-success"}, "Ready")
          )
        )
      )
    )
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
