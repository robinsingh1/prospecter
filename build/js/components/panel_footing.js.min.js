(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // Panel Footing
  paginatePrevious: function() {
    thiss = this;

    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospects?skip='+(thiss.props.currentPage-2)*thiss.props.prospectsPerPage,
      type:'GET',
      headers: parse_headers,
      data: 'where={"company":'+company+'}&count=1',
      success: function(res){
        //thiss.setState({prospects: res.results})
        //thiss.setState({currentPage: this.props.currentPage - 1})
        thiss.props.paginate(res.results, thiss.props.currentPage - 1)
      },
      error: function(res){
        console.log(res)
      }
    });
  },

  paginate: function(direction) {
    prospectsPerPage = this.props.prospectsPerPage
    if(direction=='previous')
      skip = (this.props.currentPage - 2)*prospectsPerPage
    else if(direction=="forward")
      skip = this.props.currentPage*prospectsPerPage

    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospect?skip='+skip,
      type:'GET',
      headers: parse_headers,
      data: 'where={"company":'+company+'}&count=1',
      success: function(res){
        //thiss.setState({prospects: res.results})
        //thiss.setState({currentPage: this.props.currentPage + 1})
        this.props.paginate(res.results, this.props.currentPage + 1)
      },
      error: function(res){
        console.log(res)
      }
    });
  },

  paginateForward: function() {
    thiss = this;
    $.ajax({
      url: 'https://api.parse.com/1/classes/Prospects?skip='+thiss.props.currentPage*thiss.props.prospectsPerPage,
      type:'GET',
      headers: parse_headers,
      data: 'where={"company":'+company+'}&count=1',
      success: function(res){
        //thiss.setState({prospects: res.results})
        //thiss.setState({currentPage: thiss.props.currentPage + 1})
        console.log("success")
        thiss.props.paginate(res.results, thiss.props.currentPage + 1)
      },
      error: function(res){
        console.log(res)
      }
    });
  },

  render: function() {
    // Should be handled by Panle Footing
    previous = (this.props.currentPage - 1) ? '' : 'disabled'
    forward = (this.props.currentPage == this.props.pages) ? 'disabled' : ''

    lowerLimit = (this.props.currentPage-1)*this.props.prospectsPerPage
    upperLimit = this.props.currentPage*this.props.prospectsPerPage

    lowerLimit = (lowerLimit) ? lowerLimit : 1
    upperLimit = (upperLimit > this.props.count) ? this.props.count : upperLimit

    return (
      React.DOM.div({className: "panel-footing", 
           id: "navbar", 
           style: {height:'35px',padding:'0px', paddingTop:'7px'}}, 
          React.DOM.span({style: {float:'right',marginRight:'20px'}}, 
            React.DOM.a({href: "javascript:", 
               style: {marginRight:'5px'}, 
               onClick: this.paginatePrevious, 
               className: "blue-gradient btn btn-primary btn-xs "+previous}, 
            React.DOM.i({className: "fa fa-fast-backward"})
          ), 
          React.DOM.a({href: "javascript:", 
             onClick: this.paginatePrevious, 
             className: "blue-gradient btn btn-primary btn-xs "+previous}, 
            React.DOM.i({className: "fa fa-chevron-left"})
          ), 
          React.DOM.span({style: {marginLeft:5, marginRight:5}}, 
            lowerLimit+' - '+upperLimit+' of '+this.props.count
          ), 
          React.DOM.a({href: "javascript:", 
             onClick: this.paginateForward, 
             className: "blue-gradient btn btn-primary btn-xs "+forward}, 
            React.DOM.i({className: "fa fa-chevron-right"})
          ), 
          React.DOM.a({href: "javascript:", 
             style: {marginLeft:'5px'}, 
             onClick: this.paginateForward, 
             className: "blue-gradient btn btn-primary btn-xs "+forward}, 
            React.DOM.i({className: "fa fa-fast-forward"}))
          )
        )
    );
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yb2Jpbi9Qcm9qZWN0cy9wcm9zcGVjdGVyL3Byb3NwZWN0ZXItcGFyc2UvZGV2L25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy9yb2Jpbi9Qcm9qZWN0cy9wcm9zcGVjdGVyL3Byb3NwZWN0ZXItcGFyc2UvZGV2L2J1aWxkL2pzL2NvbXBvbmVudHMvcGFuZWxfZm9vdGluZy5qcy5taW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLyoqIEBqc3ggUmVhY3QuRE9NICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe2Rpc3BsYXlOYW1lOiAnZXhwb3J0cycsXG4gIC8vIFBhbmVsIEZvb3RpbmdcbiAgcGFnaW5hdGVQcmV2aW91czogZnVuY3Rpb24oKSB7XG4gICAgdGhpc3MgPSB0aGlzO1xuXG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogJ2h0dHBzOi8vYXBpLnBhcnNlLmNvbS8xL2NsYXNzZXMvUHJvc3BlY3RzP3NraXA9JysodGhpc3MucHJvcHMuY3VycmVudFBhZ2UtMikqdGhpc3MucHJvcHMucHJvc3BlY3RzUGVyUGFnZSxcbiAgICAgIHR5cGU6J0dFVCcsXG4gICAgICBoZWFkZXJzOiBwYXJzZV9oZWFkZXJzLFxuICAgICAgZGF0YTogJ3doZXJlPXtcImNvbXBhbnlcIjonK2NvbXBhbnkrJ30mY291bnQ9MScsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpe1xuICAgICAgICAvL3RoaXNzLnNldFN0YXRlKHtwcm9zcGVjdHM6IHJlcy5yZXN1bHRzfSlcbiAgICAgICAgLy90aGlzcy5zZXRTdGF0ZSh7Y3VycmVudFBhZ2U6IHRoaXMucHJvcHMuY3VycmVudFBhZ2UgLSAxfSlcbiAgICAgICAgdGhpc3MucHJvcHMucGFnaW5hdGUocmVzLnJlc3VsdHMsIHRoaXNzLnByb3BzLmN1cnJlbnRQYWdlIC0gMSlcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIHBhZ2luYXRlOiBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICBwcm9zcGVjdHNQZXJQYWdlID0gdGhpcy5wcm9wcy5wcm9zcGVjdHNQZXJQYWdlXG4gICAgaWYoZGlyZWN0aW9uPT0ncHJldmlvdXMnKVxuICAgICAgc2tpcCA9ICh0aGlzLnByb3BzLmN1cnJlbnRQYWdlIC0gMikqcHJvc3BlY3RzUGVyUGFnZVxuICAgIGVsc2UgaWYoZGlyZWN0aW9uPT1cImZvcndhcmRcIilcbiAgICAgIHNraXAgPSB0aGlzLnByb3BzLmN1cnJlbnRQYWdlKnByb3NwZWN0c1BlclBhZ2VcblxuICAgICQuYWpheCh7XG4gICAgICB1cmw6ICdodHRwczovL2FwaS5wYXJzZS5jb20vMS9jbGFzc2VzL1Byb3NwZWN0P3NraXA9Jytza2lwLFxuICAgICAgdHlwZTonR0VUJyxcbiAgICAgIGhlYWRlcnM6IHBhcnNlX2hlYWRlcnMsXG4gICAgICBkYXRhOiAnd2hlcmU9e1wiY29tcGFueVwiOicrY29tcGFueSsnfSZjb3VudD0xJyxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlcyl7XG4gICAgICAgIC8vdGhpc3Muc2V0U3RhdGUoe3Byb3NwZWN0czogcmVzLnJlc3VsdHN9KVxuICAgICAgICAvL3RoaXNzLnNldFN0YXRlKHtjdXJyZW50UGFnZTogdGhpcy5wcm9wcy5jdXJyZW50UGFnZSArIDF9KVxuICAgICAgICB0aGlzLnByb3BzLnBhZ2luYXRlKHJlcy5yZXN1bHRzLCB0aGlzLnByb3BzLmN1cnJlbnRQYWdlICsgMSlcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24ocmVzKXtcbiAgICAgICAgY29uc29sZS5sb2cocmVzKVxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIHBhZ2luYXRlRm9yd2FyZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpc3MgPSB0aGlzO1xuICAgICQuYWpheCh7XG4gICAgICB1cmw6ICdodHRwczovL2FwaS5wYXJzZS5jb20vMS9jbGFzc2VzL1Byb3NwZWN0cz9za2lwPScrdGhpc3MucHJvcHMuY3VycmVudFBhZ2UqdGhpc3MucHJvcHMucHJvc3BlY3RzUGVyUGFnZSxcbiAgICAgIHR5cGU6J0dFVCcsXG4gICAgICBoZWFkZXJzOiBwYXJzZV9oZWFkZXJzLFxuICAgICAgZGF0YTogJ3doZXJlPXtcImNvbXBhbnlcIjonK2NvbXBhbnkrJ30mY291bnQ9MScsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpe1xuICAgICAgICAvL3RoaXNzLnNldFN0YXRlKHtwcm9zcGVjdHM6IHJlcy5yZXN1bHRzfSlcbiAgICAgICAgLy90aGlzcy5zZXRTdGF0ZSh7Y3VycmVudFBhZ2U6IHRoaXNzLnByb3BzLmN1cnJlbnRQYWdlICsgMX0pXG4gICAgICAgIGNvbnNvbGUubG9nKFwic3VjY2Vzc1wiKVxuICAgICAgICB0aGlzcy5wcm9wcy5wYWdpbmF0ZShyZXMucmVzdWx0cywgdGhpc3MucHJvcHMuY3VycmVudFBhZ2UgKyAxKVxuICAgICAgfSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbihyZXMpe1xuICAgICAgICBjb25zb2xlLmxvZyhyZXMpXG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAvLyBTaG91bGQgYmUgaGFuZGxlZCBieSBQYW5sZSBGb290aW5nXG4gICAgcHJldmlvdXMgPSAodGhpcy5wcm9wcy5jdXJyZW50UGFnZSAtIDEpID8gJycgOiAnZGlzYWJsZWQnXG4gICAgZm9yd2FyZCA9ICh0aGlzLnByb3BzLmN1cnJlbnRQYWdlID09IHRoaXMucHJvcHMucGFnZXMpID8gJ2Rpc2FibGVkJyA6ICcnXG5cbiAgICBsb3dlckxpbWl0ID0gKHRoaXMucHJvcHMuY3VycmVudFBhZ2UtMSkqdGhpcy5wcm9wcy5wcm9zcGVjdHNQZXJQYWdlXG4gICAgdXBwZXJMaW1pdCA9IHRoaXMucHJvcHMuY3VycmVudFBhZ2UqdGhpcy5wcm9wcy5wcm9zcGVjdHNQZXJQYWdlXG5cbiAgICBsb3dlckxpbWl0ID0gKGxvd2VyTGltaXQpID8gbG93ZXJMaW1pdCA6IDFcbiAgICB1cHBlckxpbWl0ID0gKHVwcGVyTGltaXQgPiB0aGlzLnByb3BzLmNvdW50KSA/IHRoaXMucHJvcHMuY291bnQgOiB1cHBlckxpbWl0XG5cbiAgICByZXR1cm4gKFxuICAgICAgUmVhY3QuRE9NLmRpdih7Y2xhc3NOYW1lOiBcInBhbmVsLWZvb3RpbmdcIiwgXG4gICAgICAgICAgIGlkOiBcIm5hdmJhclwiLCBcbiAgICAgICAgICAgc3R5bGU6IHtoZWlnaHQ6JzM1cHgnLHBhZGRpbmc6JzBweCcsIHBhZGRpbmdUb3A6JzdweCd9fSwgXG4gICAgICAgICAgUmVhY3QuRE9NLnNwYW4oe3N0eWxlOiB7ZmxvYXQ6J3JpZ2h0JyxtYXJnaW5SaWdodDonMjBweCd9fSwgXG4gICAgICAgICAgICBSZWFjdC5ET00uYSh7aHJlZjogXCJqYXZhc2NyaXB0OlwiLCBcbiAgICAgICAgICAgICAgIHN0eWxlOiB7bWFyZ2luUmlnaHQ6JzVweCd9LCBcbiAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMucGFnaW5hdGVQcmV2aW91cywgXG4gICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiYmx1ZS1ncmFkaWVudCBidG4gYnRuLXByaW1hcnkgYnRuLXhzIFwiK3ByZXZpb3VzfSwgXG4gICAgICAgICAgICBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLWZhc3QtYmFja3dhcmRcIn0pXG4gICAgICAgICAgKSwgXG4gICAgICAgICAgUmVhY3QuRE9NLmEoe2hyZWY6IFwiamF2YXNjcmlwdDpcIiwgXG4gICAgICAgICAgICAgb25DbGljazogdGhpcy5wYWdpbmF0ZVByZXZpb3VzLCBcbiAgICAgICAgICAgICBjbGFzc05hbWU6IFwiYmx1ZS1ncmFkaWVudCBidG4gYnRuLXByaW1hcnkgYnRuLXhzIFwiK3ByZXZpb3VzfSwgXG4gICAgICAgICAgICBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLWNoZXZyb24tbGVmdFwifSlcbiAgICAgICAgICApLCBcbiAgICAgICAgICBSZWFjdC5ET00uc3Bhbih7c3R5bGU6IHttYXJnaW5MZWZ0OjUsIG1hcmdpblJpZ2h0OjV9fSwgXG4gICAgICAgICAgICBsb3dlckxpbWl0KycgLSAnK3VwcGVyTGltaXQrJyBvZiAnK3RoaXMucHJvcHMuY291bnRcbiAgICAgICAgICApLCBcbiAgICAgICAgICBSZWFjdC5ET00uYSh7aHJlZjogXCJqYXZhc2NyaXB0OlwiLCBcbiAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLnBhZ2luYXRlRm9yd2FyZCwgXG4gICAgICAgICAgICAgY2xhc3NOYW1lOiBcImJsdWUtZ3JhZGllbnQgYnRuIGJ0bi1wcmltYXJ5IGJ0bi14cyBcIitmb3J3YXJkfSwgXG4gICAgICAgICAgICBSZWFjdC5ET00uaSh7Y2xhc3NOYW1lOiBcImZhIGZhLWNoZXZyb24tcmlnaHRcIn0pXG4gICAgICAgICAgKSwgXG4gICAgICAgICAgUmVhY3QuRE9NLmEoe2hyZWY6IFwiamF2YXNjcmlwdDpcIiwgXG4gICAgICAgICAgICAgc3R5bGU6IHttYXJnaW5MZWZ0Oic1cHgnfSwgXG4gICAgICAgICAgICAgb25DbGljazogdGhpcy5wYWdpbmF0ZUZvcndhcmQsIFxuICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJibHVlLWdyYWRpZW50IGJ0biBidG4tcHJpbWFyeSBidG4teHMgXCIrZm9yd2FyZH0sIFxuICAgICAgICAgICAgUmVhY3QuRE9NLmkoe2NsYXNzTmFtZTogXCJmYSBmYS1mYXN0LWZvcndhcmRcIn0pKVxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICk7XG4gIH1cbn0pO1xuIl19
