/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  // SignalCalendar
  getInitialState: function() {
    return {
      reports : []
    }
  },

  getSignalReport: function() {
    var _this = this;
    qry = {
      where : JSON.stringify({profile:{
          __type:'Pointer',
          className:'ProspectProfile',
          objectId:this.props.currentProfile.objectId
      }}),
      order:'-createdAt',
      limit:10
    }

    Parse.get('SignalReport', qry).done(function(res) {
      console.log(res)
      _this.setState({reports: res.results})
    })
  },

  componentDidMount: function() {
    this.getSignalReport()
  },

  componentDidUpdate: function() {
    //this.getSignalReport()
  },

  render: function() {
    reports = []
    for(i=0;i< this.props.reports.length; i++) {
      if(this.props.reports[i]) {
          reports.push(SignalReportRow({setCurrentReport: this.setCurrentReport, 
                                    prospectSignalReport: this.prospectSignalReport, 
                                        setCurrentView: this.setCurrentView, 
                                        report: this.props.reports[i]}))
      }
    }

    return (
      React.DOM.div({className: "container", style: {paddingLeft:0,
                                         paddingRight:0,width:'100%'}}, 
        React.DOM.div({style: {height:44,borderBottom:'solid 1px rgb(221, 221, 221)'}}, 
          React.DOM.h4({onClick: this.returnToCalendarView, 
              style: {fontWeight:200, float:'left',cursor:'pointer',marginTop:7,
                      paddingLeft:20,paddingTop:5, display:'inline-block'}}, 
                React.DOM.i({className: "fa fa-calendar", style: {marginRight:5}}), 
                this.props.currentProfile.name
          )
        ), 
        React.DOM.div({className: "col-md-12", style: {paddingLeft:0,paddingRight:0,
                                           height:456,overflow:'auto'}}, 
          React.DOM.div({style: {overflow:'auto'}}, 
            React.DOM.table({className: "table table-striped", style: {marginBottom:0}}, 
              React.DOM.thead(null, 
                React.DOM.th(null), 
                React.DOM.th({style: {textAlign:'center'}}, 
                  React.DOM.i({className: "fa fa-clock-o"}), " Last Ran"
                ), 
                React.DOM.th({style: {textAlign:'center', display:'none'}}, "Posted Job Listing"), 
                React.DOM.th(null, "Company Signals"), 
                React.DOM.th({style: {display:'block'}}, "Prospect Signals"), 
                React.DOM.th({style: {width:150,textAlign:'center'}})
              ), 
              React.DOM.tbody({className: "reports"}, 
                reports
              )
            )
          )
        )
      )
    );
  },

  setCurrentReport: function(newReport) {
    this.props.setCurrentReport(newReport)
  },

  prospectSignalReport: function(signalReport) {
    this.props.prospectSignalReport(this.props.currentProfile, signalReport)
  },
});

var SignalReportRow = React.createClass({displayName: 'SignalReportRow',
  getInitialState: function() {
    return {
      companyCount: '~',
      peopleCount: '~'
    }
  },

  rowClick: function() {
    if(this.props.report.done)
      this.props.setCurrentReport(this.props.report)
    else
      alertify.log("This mining job is still in progress. You'll be notified when it's completed")
  },

  prospectSignalReport: function(e) {
    this.props.prospectSignalReport(this.props.report)
    e.stopPropagation()
  },

  componentDidMount: function() { 
    console.log('calendar')
    report = appConfig.pointer('SignalReport', this.props.report.objectId)
    qry = {
      where:JSON.stringify({ report: report }),
      count: 1
    }
    var thiss = this;
    $.ajax({
      url:'https://api.parse.com/1/classes/PeopleSignal',
      data: qry,
      headers: appConfig.headers,
      success: function(res) { thiss.setState({peopleCount: res.count})},
      error: function(err) { console.log(err.responseText) },
    })

    $.ajax({
      url:'https://api.parse.com/1/classes/CompanySignal',
      data: qry,
      headers: appConfig.headers,
      success: function(res) { thiss.setState({companyCount: res.count})},
      error: function(err) { console.log(err.responseText) },
    })
  },

  render: function() {
    prospected = this.props.report.prospected
    if(!this.props.report.mining_job)
      icon = React.DOM.i({className: "fa fa-wifi"})
    else
      icon = React.DOM.i({className: "fa fa-cloud-download", style: {color:'#555'}})

    loading = (!this.props.report.done) ? React.DOM.div({className: "profile-loading", style: {marginLeft:30}}, 
          React.DOM.div({className: "double-bounce1", style: {backgroundColor:'#5cb85c'}}), 
          React.DOM.div({className: "double-bounce2", style: {backgroundColor:'#5cb85c'}})
          ) : React.DOM.a({href: "javascript:", 
                    onClick: this.prospectSignalReport, 
             style: {fontWeight:'bold',marginTop:5}, 
     className: (prospected) ? "btn btn-xs btn-success disabled green-gradient" : "btn btn-xs btn-success green-gradient"}, 
             (prospected) ? 'Prospected' : 'Prospect All'
          )
    // Make an Alert when somebody clicks on in progress signal report
    return (
      React.DOM.tr({onClick: this.rowClick, style: {cursor:'pointer'}}, 
        React.DOM.td({style: {textAlign:'right',paddingTop:15}}, 
          icon
        ), 
        React.DOM.td({style: {textAlign:'center'}}, 
          React.DOM.h6(null, 
            moment(this.props.report.createdAt).calendar()
          )
        ), 
        React.DOM.td({style: {textAlign:'center',display:'none'}}, 
          React.DOM.h6(null, 
          'lol'
          )
        ), 
        React.DOM.td(null, 
          React.DOM.span({className: "label label-success"}, 
             this.state.companyCount
              //this.props.report.company_count
            
          ), 
          React.DOM.h6({style: {display:'inline-block'}}, 
            "  Companies found."
          )
        ), 
        React.DOM.td({style: {display:'block'}}, 
          React.DOM.span({className: "label label-success"}, 
            
              this.state.peopleCount
              //this.props.report.people_count
            
          ), 
          React.DOM.h6({style: {display:'inline-block'}}, 
            "  People found."
          )
        ), 
        React.DOM.td({style: (this.props.report.done) ? {} : {paddingTop:17}}, 
          loading
        )
      )
    )
  }
});
