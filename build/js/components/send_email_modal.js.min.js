(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @jsx React.DOM */

module.exports = React.createClass({displayName: 'exports',
  getInitialState: function() {
    return {
      currentProspect: 0,
    }
  },

  sendEmails: function() {
    selectedCampaign = this.props.selectedCampaign
    campaign_id = selectedCampaign.objectId
    prospectlist_id = selectedCampaign.prospect_list.objectId
    template_id = this.props.currentTemplate.objectId
    
    $.ajax({
      //url:'https://nameless-retreat-3525.herokuapp.com/send_email',
      url:'http://127.0.0.1:5000/v1/campaign/email',
      data: {
        template : template_id,
        campaign : campaign_id,
        //batch: batch_id
      },
      success: function(res) { console.log(res.results) },
      error: function(err) { console.log(err) }
    })

    /* */
    // Update Followup
    // Persist Followup
    // close modal
  },

  render: function() {
    prospect = this.props.prospects[this.state.currentProspect]
    prospect = (prospect) ? prospect : {'name':'','email':''}

    var thiss = this;
    console.debug('SEND EMAIL BATCH')
    console.debug(this.props.currentBatch)
    newBatch = _.isEqual(this.props.currentBatch, {})
    prospects = (newBatch) ? this.props.newProspects : this.props.prospects
    if(newBatch){
      prospects = _.map(this.props.newProspects, function(prospect) {
          return UserPlaceHolder({prospect: prospect})
      })
    } else {
      prospects = _.map(this.props.prospects, function(prospect) {
        if(_.findWhere(prospect.batches, {objectId: thiss.props.currentBatch}))
          return UserPlaceHolder({prospect: prospect})
      })
    }
    prospects = _.compact(prospects)
    console.debug(prospects)
    console.debug(prospects.length)
    prospectCount = prospects.length
    email = (prospect.email) ? prospect.email : ""
    if(email == "no_email" || email == "") {
      console.log('GUESSING')
      if(prospect.email_guesses) {
        console.log('GUESSING EMAIL')
        guess = _.findWhere(prospect.email_guesses, {tried: false})
        name = _.title(prospect.name.trim())

        vars = {
          first: _.first(name.split(' ')).replace(/\W/g, ''),
          last: _.last(name.split(' ')).replace(/\W/g, ''),
          fi: _.first(name.split(' '))[0].replace(/\W/g, ''),
          li: _.last(name.split(' '))[0].replace(/\W/g, '')
        }
        if(guess){
          console.log(guess.pattern.pattern)
          email = Mustache.render(guess.pattern.pattern, vars)
          email = email+"@"+prospect.domain
        }
      } else {
        console.log('NO GUESSES FOUND')
      }
    }
    email = email.toLowerCase()
    email = email
    return (
      React.DOM.div({className: "modal fade bs-sendEmail-modal-lg", tabIndex: "-1", 
           role: "dialog", 'aria-labelledby': "mySmallModalLabel", 'aria-hidden': "true", 
           id: "sendEmailModal", style: {top:'10px'}}, 
            React.DOM.div({className: "modal-dialog modal-lg"}, 
              React.DOM.div({className: "modal-content"}, 
                React.DOM.div({className: "modal-header"}, 
                  React.DOM.button({type: "button", className: "close", 'data-dismiss': "modal"}, React.DOM.span({'aria-hidden': "true"}, "×"), 
                    React.DOM.span({className: "sr-only"}, "Close")), 
        React.DOM.button({type: "button", 
                onClick: this.sendEmails, 
                style: {float:'right'}, 
                className: "btn btn-primary btn-sm"}, 
                React.DOM.i({className: "fa fa-paper-plane"}), "  Send Email"), 
        React.DOM.button({type: "button", style: {marginRight:10, float:'right'}, 
                className: "btn btn-default btn-sm", 'data-dismiss': "modal"}, "Close"), 
                  React.DOM.h4({className: "modal-title", id: "myModalLabel"}, 
                    React.DOM.i({className: "fa fa-envelope"}), "  Send Email" + ' ' +
                    "  ", 
                    React.DOM.small(null, "("+prospectCount+")")
                  )
                ), 
                React.DOM.div({className: "modal-body", style: {paddingTop:5}}, 
                  React.DOM.h4(null, "People"), 
                  
                  React.DOM.div({className: "prospect-container"}, 
                    prospects
                  ), 
                  React.DOM.br(null), 
                  React.DOM.h4({style: {display:'inline-block'}}, "Emails    ", 
                  React.DOM.a({href: "javascript:", 
              className: (this.state.currentProspect == 0 ) ? "badge btn disabled" : "badge btn", 
                    onClick: this.previousProspect}, React.DOM.i({className: "fa fa-arrow-left"})), "  ", 
                    React.DOM.small(null, (this.state.currentProspect+1)+' of '+prospectCount
                  )), 
                  "   ", 
                  React.DOM.a({href: "javascript:", 
            className: (this.state.currentProspect ==  this.props.prospects.length-1) ? "btn disabled badge" : "btn badge", 
                    onClick: this.nextProspect}, React.DOM.i({className: "fa fa-arrow-right"})), 

                  React.DOM.div(null, 

React.DOM.ul({className: "list-group email-holder", style: {borderTop:'solid 1px #eee'}}, 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "To:  "), 
    
    React.DOM.span({className: "label label-primary"}, email)
  ), 
  React.DOM.li({className: "list-group-item"}, 
    React.DOM.h5({style: {display:'inline-block',marginTop:0,marginBottom:0}}, "Subject:  "), " ", React.DOM.span({className: "label label-primary"}, this.props.currentTemplate.subject)
  ), 
  React.DOM.li({className: "list-group-item body"})
)
  
                  )

                ), 

      React.DOM.div({className: "modal-footer", style: {display:'none'}}, 
        React.DOM.button({type: "button", 
                className: "btn btn-default", 'data-dismiss': "modal"}, "Close"), 
        React.DOM.button({type: "button", 
                className: "btn btn-primary"}, "Send Email")
      )
              )
            )
          )
    );
  },

  previousProspect: function() {
    this.setState({currentProspect: this.state.currentProspect-1 })
  },

  nextProspect: function() {
    this.setState({currentProspect: this.state.currentProspect+1 })
  },

  parseTemplate: function(templateBody) {
    first_name = prospect.name.split(' ')[0]
    //hiring_signal = prospect.signals

    signals = (prospect.signals) ? prospect.signals[0] : ""
    templateBody = Mustache.render(templateBody, {
      hiring_signal: signals,
      first_name: _.title(prospect.name.split(' ')[0])
    })

    //console.log(templateBody)
      
    return templateBody
  },

  componentDidUpdate: function() {
    //console.log(this.props.currentTemplate)
    parsedTemplate = this.parseTemplate(this.props.currentTemplate.body)
    
    //$('.body').html(this.props.currentTemplate.body)
    $('.body').html(parsedTemplate)
  }
});

var UserPlaceHolder = React.createClass({displayName: 'UserPlaceHolder',
  render: function() {
    return (
        React.DOM.div({className: "btn-group", style: {marginRight:5,marginBottom:5}}, 
          React.DOM.div({className: "btn-group"}, 
            React.DOM.button({type: "button", 
                    className: "btn btn-success btn-sm"}, 
              React.DOM.i({className: "fa fa-user"}), "  ", 
              (this.props.prospect) ? _.title(this.props.prospect.name) : ""
            )
          ), 
          React.DOM.button({type: "button", className: "btn btn-success btn-sm"}, 
            React.DOM.i({className: "fa fa-trash-o"})
          )
        )
    )
  }
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
